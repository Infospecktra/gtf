/* Generated by Together */

package org.yang.services.dbService;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.PreparedStatement;
import java.sql.CallableStatement;
import java.sql.DatabaseMetaData;
import java.sql.SQLWarning;
import java.sql.SQLException;
import java.sql.Savepoint;
import java.sql.Struct;
import java.sql.Array;
import java.util.Properties;
import java.sql.SQLXML; 
import java.sql.NClob;
import java.sql.Clob;
import java.sql.Blob;

public class ConnectionProxy implements Connection
{
   private RDBMS rdbms = null;
   private Connection conn = null;

   public ConnectionProxy(RDBMS rdbms, Connection conn)
   {
      this.rdbms = rdbms;
      this.conn = conn;
   }

   public void realClose() throws SQLException
   {
      conn.close();
   }

   public Statement createStatement() throws SQLException
   {
      return conn.createStatement();
   }

   public PreparedStatement prepareStatement(String sql) throws SQLException
   {
      return conn.prepareStatement(sql);
   }

   public  CallableStatement prepareCall(String sql) throws SQLException
   {
      return conn.prepareCall(sql);
   }
	                    
   public String nativeSQL(String sql) throws SQLException
   {
      return conn.nativeSQL(sql);
   }

   public void setAutoCommit(boolean autoCommit) throws SQLException
   {
      conn.setAutoCommit(autoCommit);
   }

   public boolean getAutoCommit() throws SQLException
   {
      return conn.getAutoCommit();
   }

   public void commit() throws SQLException
   {
      conn.commit();
   }

   public void rollback() throws SQLException
   {
      conn.rollback();
   }

   public void close() throws SQLException
   {
      rdbms.close();
   }

   public boolean isClosed() throws SQLException
   {
      return conn.isClosed();
   }

   public DatabaseMetaData getMetaData() throws SQLException
   {
      return conn.getMetaData();
   }

   public void setReadOnly(boolean readOnly) throws SQLException
   {
      conn.setReadOnly(readOnly);
   }

   public boolean isReadOnly() throws SQLException
   {
      return conn.isReadOnly();
   }

   public void setCatalog(String catalog) throws SQLException
   {
      conn.setCatalog(catalog);
   }

   public String getCatalog() throws SQLException
   {
      return conn.getCatalog();
   }

   public void setTransactionIsolation(int level) throws SQLException
   {
      conn.setTransactionIsolation(level);
   }

   public int getTransactionIsolation() throws SQLException
   {
      return conn.getTransactionIsolation();
   }

   public SQLWarning getWarnings() throws SQLException
   {
      return conn.getWarnings();
   }

   public void clearWarnings() throws SQLException
   {
      conn.clearWarnings();
   }

   public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException
   {
      return conn.createStatement(resultSetType, resultSetConcurrency);
   }

   public PreparedStatement prepareStatement(String sql,
                                             int resultSetType,
	                                         int resultSetConcurrency) throws SQLException
   {
      return conn.prepareStatement(sql, resultSetType, resultSetConcurrency);
   }

   public CallableStatement prepareCall(String sql,
                                        int resultSetType,
	                                    int resultSetConcurrency) throws SQLException
   {
      return conn.prepareCall(sql, resultSetType, resultSetConcurrency);
   }

   public java.util.Map getTypeMap() throws SQLException
   {
      return conn.getTypeMap();
   }

   public void setTypeMap(java.util.Map map) throws SQLException
   {
      conn.setTypeMap(map);
   }

   public void setHoldability(int holdability) throws SQLException
   {
      conn.setHoldability(holdability);
   }

   public int getHoldability() throws SQLException
   {
      return conn.getHoldability();
   }

   public Savepoint setSavepoint() throws SQLException
   {
      return conn.setSavepoint();
   }

   public Savepoint setSavepoint(String name) throws SQLException
   {
      return conn.setSavepoint(name);
   }

   public void rollback(Savepoint savepoint) throws SQLException
   {
      conn.rollback(savepoint);
   }

   public void releaseSavepoint(Savepoint savepoint) throws SQLException
   {
      conn.releaseSavepoint(savepoint);
   }

   public Statement createStatement(int resultSetType,
                                    int resultSetConcurrency,
	                                int resultSetHoldability) throws SQLException
   {
      return createStatement(resultSetType, resultSetConcurrency, resultSetHoldability);
   }

   public PreparedStatement prepareStatement(String sql,
                                             int resultSetType,
	                                         int resultSetConcurrency,
                                             int resultSetHoldability) throws SQLException
   {
      return prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
   }

   public CallableStatement prepareCall(String sql,
                                        int resultSetType,
                                        int resultSetConcurrency,
	                                    int resultSetHoldability) throws SQLException
   {
      return  prepareCall(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
   }

   public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException
   {
      return prepareStatement(sql, autoGeneratedKeys);
   }

   public PreparedStatement prepareStatement(String sql,
                                             int columnIndexes[]) throws SQLException
   {
      return prepareStatement(sql, columnIndexes);
   }

   public PreparedStatement prepareStatement(String sql,
                                             String columnNames[]) throws SQLException
   {
      return prepareStatement(sql, columnNames);
   }
   
   public Struct createStruct(String typeName, Object[] attributes)
   {
       return null;
   }    

   public Array createArrayOf(String typeName, Object[] elements) 
   {
       return null;
   }  
   public Properties getClientInfo() 
   {
      return null;
   }
   public String getClientInfo(String s) 
   {
      return null;
   }
   
   public void setClientInfo(Properties p) {}
   
   public void setClientInfo(String name, String value) {}
   
   public boolean isValid(int timeout){return false;}
   public SQLXML createSQLXML(){return null;}   
   public NClob createNClob(){return null;}
   public Clob createClob(){return null;}
   public Blob createBlob(){return null;}    
   public boolean isWrapperFor(Class<?> iface)throws SQLException{return false;}
   public <T> T unwrap(Class<T> iface) throws SQLException {return null;}
}