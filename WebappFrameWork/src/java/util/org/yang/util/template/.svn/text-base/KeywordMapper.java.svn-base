/* Generated by Together */

package org.yang.util.template;

import java.util.HashMap;

public final class KeywordMapper
{
   private boolean keywordOnly = false;
   private String  slefttag    = "$";
   private String  srighttag   = "$";
   private int slefttaglen  = 1;
   private int srighttaglen = 1;
   private StringBuffer document = new StringBuffer(100);
   private StringBuffer keyword  = new StringBuffer(100);

   KeywordReplaceHandler mh = null;

   public KeywordMapper()
   {
      mh = new KeywordReplaceHandler();
   }

   public void setMapping(String key, String value)
   {
      mh.setMapping(key, value);
   }

   public void setKeywordOnly(boolean keywordOnly)
   {
      this.keywordOnly = keywordOnly;
   }
  
   public void setLeftTag(char lt)
   {
      slefttag = (new StringBuffer()).append(lt).toString();
   }

   public void setRightTag(char rt)
   {
      srighttag = (new StringBuffer()).append(rt).toString();
   }
  
   public void setLeftTag(String slt)
   {
      slefttag = slt;
      slefttaglen  = slt.length();
   }

   public void setRightTag(String srt)
   {
      srighttag = srt;
      srighttaglen = srt.length();
   }

   public String replace(String template)
   {
      if(null==template)
         return null;

      document.delete(0, document.length());
      keyword.delete(0, keyword.length());

      boolean scope    = false;
      boolean boundary = false;
      String skeyword  = null;
      String svalue    = null;

      mh.startToMap();

      for(int i=0; i<template.length(); i++)
      {
         // maybe find a keyword beginning Tag - now isn't in a keyword
         if(!scope && template.charAt(i)==slefttag.charAt(0))
         {
            if(isATag(i, slefttag, template))
            {
               keyword.delete(0, keyword.length());
               scope   = true;
            }
         }
         // maybe find a keyword ending Tag - now in a keyword
         else if(scope && template.charAt(i)==srighttag.charAt(0))
         {
            if(isATag(i, srighttag, template))
            {
               i = i + srighttaglen-1;
               skeyword = keyword.substring(slefttaglen, keyword.length());
               if(null==(svalue=mh.replace(skeyword)))
                  svalue=(new StringBuffer(slefttag).append(skeyword).append(srighttag)).toString();
               //System.out.println("value ->" + svalue);
               document.append(svalue);
               boundary = true;
               scope    = false;
            }
         }
        
         if(!boundary)
         {
            if(!scope&&!keywordOnly)
               document.append(template.charAt(i));
            else
               keyword.append(template.charAt(i));
         }
         else
         {
            boundary = false;
         }
      }
     
      mh.endOfMapping(document.toString());
      return mh.getResult();
   }
  
   private boolean isATag(int i, String tag, String template)
   {
      for(int j=0; j<tag.length(); j++)
      {
         if(tag.charAt(j)!=template.charAt(i+j))
         {
            return false;
         }
      }
      return true;
   }
  
  final class KeywordReplaceHandler
  {
     String  result = null;
     HashMap map    = null;
  
     public KeywordReplaceHandler()
     {
        map = new HashMap();
     }

     public void setMapping(String key, String value)
     {
        if(null==value)
           map.put(key, "");
        map.put(key, value);
     }

     public void startToMap()
     {
        result = null;	
     }

     public String replace(String keyword)
     {
        return (String)map.get(keyword);
     }
  
     public void endOfMapping(String document)
     {
        result = document;
     }
  
     public String getResult()
     {
        return result;	
     }
  }

  public static void main(String[] argc)
  {
     KeywordMapper ikm = new KeywordMapper();
     ikm.setMapping("KEY1", "REAL_KEY1");
     ikm.setMapping("KEY2", "REAL_KEY2");
     ikm.setMapping("KEY3", "REAL_KEY3");
     //ikm.setLeftTag("%");
     //ikm.setRightTag("%");
     System.out.println("Result ---> " + ikm.replace("parameter1=$KEY1$,parameter2=$KEY2$,parameter3=$KEY3$"));
  }
}