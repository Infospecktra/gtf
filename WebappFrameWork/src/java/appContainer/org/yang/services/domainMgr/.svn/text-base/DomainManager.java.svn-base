/* Generated by Together */

package org.yang.services.domainMgr;

import java.util.ArrayList;
import org.yang.services.dbService.RDBMSFactory;
import org.yang.services.servicemgr.Service;
import org.yang.services.servicemgr.Area;
import org.yang.services.accountmgr.User;
import org.yang.services.accountmgr.UserManager;
import java.util.Collections;
import java.util.Properties;
import org.yang.web.applicationContainer.Passport;
import org.yang.services.dataAccess.genericDAO.GenericDAO;
import org.yang.services.dataAccess.genericDAO.StorableList;
import org.yang.services.accountmgr.SimpleDAOs.SimpleDAOFactoryImpl;
import org.yang.services.accountmgr.UserDAO;
import org.yang.services.accountmgr.GroupDAO;
import org.yang.services.dataAccess.genericDAO.GenericStorableObject;
import org.yang.services.accountmgr.PermissionDAO;
import org.yang.services.accountmgr.User;
import org.yang.services.accountmgr.Group;
import org.yang.services.accountmgr.Permission;

public class DomainManager implements Service
{
   private GenericDAO dao = null;
   private Domain domainTemplate = null;
   private UserManager userMgr = null;
   //---
   private SimpleDAOFactoryImpl basicTableDAOFactory = null;
   //---
   private String domainTablename = null;

   private String name = null;
   public void setName(String name) { this.name = name; }
   public String getName() { return null; }

   private String myDomain = "";
  
   public DomainManager(String domain) {myDomain=domain;}

   public void initialize(Properties prop, Passport passport)
   {
      domainTablename = prop.getProperty("domain.tablename","domain");
      domainTemplate = DomainFactory.createDomain(prop.getProperty("domain.classname"));
      domainTemplate.setTablename(domainTablename);
      dao = new GenericDAO(RDBMSFactory.getInstance().getSystemRDBMS());
      

      //System.out.println("[DomainManager::initialize] domainTablename = " + domainTablename);
      //System.out.println("[DomainManager::initialize] domainTemplate = " + domainTemplate);
      //System.out.println("[DomainManager::initialize] dao = " + dao);
   }

   public void destroy()
   {

   }

   public String[] getAllDomainNames()
   {
      try
      {
         //System.out.println("[DomainManager::getAllDomainNames] Entering .......................");
         ArrayList temp = new ArrayList();
         StorableList domains = dao.load(domainTemplate);
         for(int i=0; i<domains.size(); i++)
         {
            //System.out.println("[DomainManager::getAllDomainNames] domain : " + domains.get(i));
            temp.add(((Domain)domains.get(i)).getId());
         }
         Collections.sort(temp);
         return (String[])temp.toArray(new String[]{});
      }
      catch(Exception e)
      {
         e.printStackTrace();
      }
      return new String[0];
   }

   public Domain newDomain()
   {
      return (Domain)domainTemplate.create();
   }

   public void createDomain(Domain domain)
   {
      try
      {
      	 ((GenericStorableObject)domain).setTablename(this.domainTablename);
         dao.insert((GenericStorableObject)domain);
         createBasicTables(domain);      
      }
      catch(Exception e)
      {
         e.printStackTrace();
      }
   }

   public void createBasicTables(Domain domain)
   {
      try
      {
         //-----
         /*
         String myDomain = null;
         String[] titles = domain.displayColumnNames();
         String[] columns = domain.displayColumns();
         for(int i=0;i<titles.length;i++)
         {
            System.out.println("[DomainManager::createBasicTables]nnnnn----->titles["+i+"]="+titles[i]);
            if("Domain ID".equals(titles[i]))
            {	
               myDomain = (String)domain.get(columns[i]);//domain name
            System.out.println("[DomainManager::createBasicTables]nnnnn----->columns["+i+"]="+columns[i]);
            }   
         }
         */
         String myDomain=(String)domain.get(domain.getPrimaryKey());
         //System.out.println("[DomainManager::createBasicTables]nnnnn----->myDomain="+myDomain);
          
         basicTableDAOFactory = new SimpleDAOFactoryImpl(myDomain.toUpperCase());
      	 //System.out.println("[DomainManager::createBasicTables]----->basicTableDAOFactory("+myDomain+")="+basicTableDAOFactory);

         UserDAO userDAO = basicTableDAOFactory.getUserDAO();
      	 userDAO.createUserTable();

         GroupDAO groupDAO = basicTableDAOFactory.getGroupDAO();
         groupDAO.createGroupTable();
         groupDAO.createUsergroupTable();
         groupDAO.createServiceTable();         
         PermissionDAO permissionDAO = basicTableDAOFactory.getPermissionDAO();     
         permissionDAO.createPermissionTable(); 
         
         //create the default user.
         User u = new User();
         u.setID("Flora");
         u.setFirstName("Flora");
         u.setLastName("Han");
         u.setPassword("0413",true);
         u.setAddress1        ("1");
         u.setAddress2        ("1");
         u.setCity            ("1");
         u.setState           ("1");
         u.setZipCode         ("1");
         u.setCountry         ("1");
         u.setTelephoneNumber ("1");
         u.setFaxNumber       ("1");
         u.setCellphoneNumber ("1");
         u.setEMail           ("1");
         u.setTemplateSet     ("1");
         u.setLanguageSet     ("1");
         u.setDescription     ("1");
         u.setDefaultService("MainDesk");
         
         userDAO.insert(u);        
 
         Group g1 = new Group();
         g1.setID("ACCOUNTMANAGER");
         g1.setName("AccountManager");
         groupDAO.insert(g1);

         Group g2 = new Group();
         g2.setID("LABHEAD");
         g2.setName("LabHead");
         groupDAO.insert(g2);
         groupDAO.addUserToGroup(u.getID(),g1.getID());
         groupDAO.addUserToGroup(u.getID(),g2.getID());
         
         Permission p = new Permission();
         p.setId("ACCOUNTMANAGERgFm_1_56");
         p.setGroupId(g1.getID());
         p.setServiceId("AccountManager");
         permissionDAO.insert(p);
            
      }
      catch(Exception e)
      {
         e.printStackTrace();
      }
   }	

   public boolean updateDomain(Domain domain)
   {
      try
      {
         domain.setTablename(this.domainTablename);
         return dao.update(domain);
      }
      catch(Exception e)
      {
         e.printStackTrace();
      }
      return false;
   }

   public Domain getDomain(String id)
   {
      try
      {
         Domain domain = (Domain)domainTemplate.create();
         domain.setId(id);
         domain.setTablename(this.domainTablename);
         return (Domain)dao.loadStorable(domain);
      }
      catch(Exception e)
      {
         e.printStackTrace();
      }
      return null;
   }

   public String[] getAllUserNames(String domainId)
   {

      return new String[0];
   }

   public User getUser(String domainId, String userId)
   {
      return new User();
   }

   public Domain removeDomain(String id)
   {
      try
      {
         //domainTemplate
         Domain domain = (Domain)getDomain(id);
         if(null==domain)
            return null;
         domain.setTablename(this.domainTablename);
         dao.delete(domain);
         removeBasicTables(id);
         
         return (Domain)domain;
      }
      catch(Exception e)
      {
         e.printStackTrace();
      }
      return null;
   }
   
   private void removeBasicTables(String domainName)
   {
      try
      {
         //System.out.println("[DomainManager::removeBasicTables]----->domainName="+domainName);
         basicTableDAOFactory = new SimpleDAOFactoryImpl(domainName);
      	 UserDAO userDAO = basicTableDAOFactory.getUserDAO();
      	 userDAO.dropUserTable();
         GroupDAO groupDAO = basicTableDAOFactory.getGroupDAO();
         groupDAO.dropGroupTable();
         groupDAO.dropUsergroupTable();
         groupDAO.dropServiceTable();         
         PermissionDAO permissionDAO = basicTableDAOFactory.getPermissionDAO();     
         permissionDAO.dropPermissionTable(); 
         
      }
      catch(Exception e)
      {
         e.printStackTrace();
      }
   }	 
   
   public Area[] allAreas()
   {
      return new Area[]{};
   }

   public boolean containArea(String areaname)
   {
      return false;
   }
}
