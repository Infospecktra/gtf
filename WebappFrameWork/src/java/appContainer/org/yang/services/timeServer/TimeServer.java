/* Generated by Together */

package org.yang.services.timeServer;

import org.yang.web.controller.BackendService;
import java.text.SimpleDateFormat;
import java.util.Properties;
import java.util.HashSet;
import java.util.ArrayList;
import java.util.Date;

public class TimeServer implements Runnable, BackendService
{
   private static TimeServer me = new TimeServer();

   private Date now = null;
   private boolean quit = false;
   private long timeSamplingInterval = 60*1000;

   private HashSet clients = null;
   private ArrayList callbackList = null;

   public static final SimpleDateFormat earningReportDateFormat = new SimpleDateFormat ("dd-MMM-yy");

   private TimeServer()
   {
      clients = new HashSet();
      callbackList = new ArrayList();
   }

   public static TimeServer getInstance()
   {
      return me;
   }

   public void init(Properties prop)
   {
      try
      {
         timeSamplingInterval = Long.parseLong(prop.getProperty("timeSamplingInterval", String.valueOf(timeSamplingInterval)));
      }
      catch(Exception e)
      {
         e.printStackTrace();
      }
   }

   public void registerClient(TimeServiceClient client)
   {
      synchronized(clients)
      {
         clients.add(client);
      }
   }

   public void unregisterClient(TimeServiceClient client)
   {
      synchronized(clients)
      {
         clients.remove(client);
      }
   }

   public void start()
   {
      try
      {
         (new Thread(this)).start();
         System.out.println("[GCCTimeService::start] service started!");
      }
      catch(Exception e) {}
   }

   public void stop()
   {
      quit = true;
   }

   public void destroy() {}

   public void run()
   {
      while(!quit)
      {
         System.out.println("[GCCTimeService::run] Beging updating real time order status.");

         callbackList.clear();
         synchronized(clients)
         {
            callbackList.addAll(clients);
         }

         now = new Date(System.currentTimeMillis());
         for(int i=0; i<callbackList.size(); i++)
         {
            ((TimeServiceClient)callbackList.get(i)).timeUp(now);
         }

         try
         {
            Thread.currentThread().sleep(timeSamplingInterval);
         }
         catch(Exception e)
         {
            e.printStackTrace();
         }
      }
      System.out.println("[GCCTimeService::run] service stoped!");
   }
}
