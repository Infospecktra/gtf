/* Generated by Together */

package org.yang.services.servicemgr;
import java.io.InputStream;
import java.util.HashMap;
import org.yang.util.xml.XmlRWUtil;
import java.util.ArrayList;
import java.util.Properties;
import java.util.Iterator;
import org.w3c.dom.Node;
import org.w3c.dom.NamedNodeMap;
import org.yang.web.controller.BackendService;
import org.yang.web.applicationContainer.Passport;

public class ServiceManager
{
   HashMap clientServices = null;
   HashMap serverServices = null;

   private ServiceDescriptor[] allServices = null;
   public ServiceDescriptor[] getAllServices() { return allServices; }

   public ServiceManager() throws Exception
   {
      loadServiceMap("ServiceManager.xml");
   }

   public void startServerServices()
   {
      Iterator it = serverServices.keySet().iterator();
      String name = null;
      while(it.hasNext())
      {
         try
         {
            name = (String)it.next();
            //&System.out.println("[ServiceManager::startServerServices] Start service name = " + name);
            ((BackendService)serverServices.get(name)).start();
         }
         catch(Exception e)
         {
            e.printStackTrace();
         }
      }
   }

   public void stopServerServices()
   {
      Iterator it = serverServices.keySet().iterator();
      String name = null;
      while(it.hasNext())
      {
         try
         {
            name = (String)it.next();
            //&System.out.println("[ServiceManager::stopServerServices] Stop service name = " + name);
            ((BackendService)serverServices.get(name)).stop();
         }
         catch(Exception e)
         {
            e.printStackTrace();
         }
      }
   }

   public Service getService(String name, String domain, Passport passport)
   {
      // It means all cache function need to be build in indivisual service object.
      return ((ServiceWrapper)clientServices.get(name)).getServiceInstance(domain, passport);
   }

   public BackendService getBackendService(String name)
   {
      // It's shared by all user
      return (BackendService)serverServices.get(name);
   }

   private void loadServiceMap(String mapPath) throws Exception
   {
      try
      {
         if(clientServices==null)
         {
            InputStream is = Thread.currentThread()
                                   .getContextClassLoader()
                                   .getResourceAsStream(mapPath);

            if(null==is)
            {
               throw new Exception("File " + mapPath + " is not found!");
            }

            clientServices = new HashMap();
            serverServices = new HashMap();
            Node mappings = XmlRWUtil.read(is);

            //&System.out.println( "Check ServiceManager.xml file.");
            ArrayList services = XmlRWUtil.getNodesFromDocument(mappings, "/serviceManager/service");
            //&System.out.println( services.size() + " services were found in ServiceManager.xml file.");

            ArrayList clientServiceList = new ArrayList();

            for(int i=0; i<services.size(); i++)
            {
               String uriPath = null;
               String actionHandler = null;
               Node uri = (Node)services.get(i);
               NamedNodeMap atts = uri.getAttributes();

      	       if(null==atts)
      	       {
  	              throw new Exception("Error in file " + mapPath + "!");
      	       }
      	       Node nameNode    = atts.getNamedItem("name");
               Node jClassNode  = atts.getNamedItem("class");
               Node typeNode    = atts.getNamedItem("type");

               if("server".equals(typeNode.getNodeValue()))
               {
                  //&System.out.println("[ServiceManager::loadServiceMap] Create server type service : " + nameNode.getNodeValue());
                  BackendService bService = loadBackendService(jClassNode.getNodeValue());
                  bService.init(loadProperties(uri));
                  serverServices.put(nameNode.getNodeValue(), bService);
               }
               else if("user".equals(typeNode.getNodeValue()))
               {
                  //&System.out.println("[ServiceManager::loadServiceMap] create user type service : " + nameNode.getNodeValue());
                  Node wrapperNode = atts.getNamedItem("wrapper");
                  Node groupNode   = atts.getNamedItem("group");

      	          if(null==nameNode||null==jClassNode||null==wrapperNode)
      	          {
      	             throw new Exception("Error in file " + mapPath + "!");
      	          }

      	          ServiceWrapper wrapper = loadServiceWrapper(wrapperNode.getNodeValue());
                  clientServiceList.add(wrapper);
                  wrapper.setClassName(jClassNode.getNodeValue());
                  wrapper.setName(nameNode.getNodeValue());
                  wrapper.setType(typeNode.getNodeValue());
                  try
                  {
                     wrapper.setGroupIDNumber(Integer.parseInt(groupNode.getNodeValue()));
                  }
                  catch(Exception e)
                  {
                     wrapper.setGroupIDNumber(0);
                  }

      	          if(null!=wrapper)
      	          {
                     ArrayList props = XmlRWUtil.getNodesFromDocument(uri, "property");

                     for(int j=0; j<props.size(); j++)
                     {
                        Node prop = (Node)props.get(j);
                        NamedNodeMap patts = prop.getAttributes();
      	                if(null==patts)
      	                {
      	                   break;
      	                }

      	                Node name = patts.getNamedItem("name");
                        Node value = patts.getNamedItem("value");

      	                if(null==name||null==value)
      	                {
      	                   break;
      	                }
                        wrapper.setEnviromentParameter(name.getNodeValue(), value.getNodeValue());
                     }
      	             clientServices.put(nameNode.getNodeValue(), wrapper);
                  }
               }
            }
            allServices = (ServiceDescriptor[])clientServiceList.toArray(new ServiceDescriptor[]{});
         }
      }
      catch(Exception e)
      {
         throw new Exception("Load table failis!" + e.toString());
      }
   }

   private ServiceWrapper loadServiceWrapper(String name)
   {
      Object obj = null;
      try
      {
         obj = Class.forName(name).newInstance();
      }
      catch(Exception e)
      {
         e.printStackTrace();
      }

      return (ServiceWrapper)obj;
   }

   private BackendService loadBackendService(String name)
   {
      Object obj = null;
      try
      {
         obj = Class.forName(name).newInstance();
      }
      catch(Exception e)
      {
         e.printStackTrace();
      }

      return (BackendService)obj;
   }

   private Properties loadProperties(Node uri)
   {
      Properties temp = new Properties();
      ArrayList props = XmlRWUtil.getNodesFromDocument(uri, "property");

      for(int j=0; j<props.size(); j++)
      {
         Node prop = (Node)props.get(j);
         NamedNodeMap patts = prop.getAttributes();
      	 if(null==patts)
      	 {
      	    break;
      	 }

      	 Node name = patts.getNamedItem("name");
         Node value = patts.getNamedItem("value");

      	 if(null==name||null==value)
      	 {
      	    break;
      	 }
         temp.setProperty(name.getNodeValue(), value.getNodeValue());
      }

      return temp;
   }
}
