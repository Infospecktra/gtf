/* Generated by Together */

package org.yang.services.accountmgr;

import java.util.Hashtable;
import java.util.Properties;
import org.yang.services.dbService.RDBMS;
import org.yang.services.dbService.RDBMSFactory;
import org.yang.services.accountmgr.SimpleDAOs.SimpleDAOFactoryImpl;
import java.lang.reflect.Constructor;

/**
 * @testcase org.test.org.yang.services.accountmgr.TestDAOFactory 
 */
public abstract class DAOFactory
{
    private static Hashtable myFactorys = new Hashtable();

    public static DAOFactory getFactory(Properties prop)
    {
       String domain = prop.getProperty("DAOFactory.domain");
       String key = prop.getProperty("DAOFactory.classname");
       
       try
       {
          Class[]  cl = {domain.getClass()};
          Object[] ob = {domain};
          //key = "org.yang.services.accountmgr.SimpleDAOs.SimpleDAOFactoryImpl";
          System.out.println("[DAOFactory::getFactory] Create factory : classname = " + key + ", domain = " + domain);
          
		  Constructor c = Class.forName(key).getConstructor(new Class[] {String.class});
		  DAOFactory daof = (DAOFactory)c.newInstance(ob);
		
          return daof;
       }
       catch(Exception e)
       {
          //e.printStackTrace();
          System.out.println("[DAOFactory::getFactory] Unable to load daof : " + e.getMessage());
          return null;
       }
    }

    abstract public UserDAO getUserDAO();
    abstract public GroupDAO getGroupDAO();
    abstract public PermissionDAO getPermissionDAO();
}
