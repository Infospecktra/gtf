/* Generated by Together */

package org.yang.services.dataAccess;
import java.io.Serializable;
import java.util.HashMap;
import java.util.Iterator;
import java.util.ArrayList;
import org.yang.util.SMUtility;
import java.util.Set;
import java.util.Hashtable;
import org.yang.services.dataAccess.genericDAO.GenericStorableObject;
import org.yang.services.dataAccess.genericDAO.Storable;

public class Data extends GenericStorableObject implements Serializable, Comparable
{
   public static final int STATUS_NEW       = 0;
   public static final int STATUS_MODIFIED  = 1;
   public static final int STATUS_DELETED   = 2;
   public static final int STATUS_NO_CHANGE = 3;

   public static String ANONYMOUS = "ANONYMOUS";
   private HashMap userDataMap = null;
   private static Hashtable processors = null;

   private DataDescriptor dataDescriptor =  null;
   public void setDataDescriptor(DataDescriptor dataDescriptor) { this.dataDescriptor = dataDescriptor; }
   public DataDescriptor getDataDescriptor() { return dataDescriptor; }

   private DataDisplayer displayer = null;
   public DataDisplayer getDisplayer()
   {
      if(null==displayer)
         displayer = createDisplayer(getName(), getDisplayerName());
      return displayer;
   }

   private String templateId ="";
   public void setTemplateId(String templateId) { this.templateId = templateId; }
   public String  getTemplateId(){return templateId;}

   private int status = STATUS_NO_CHANGE;
   public void setStatus(int status) { this.status = status; }
   public int getStatus() { return status; }

   /******************************
    *  Defined in DataDesceiptor *
    ******************************/

   private String key_id = null;
   public void setId(String key_id) { this.key_id = key_id; }
   public String  getId(){return key_id;}

   private String col_name = null;
   public void setName(String col_name) { this.col_name = col_name; }
   public String  getName(){return col_name;}

   private String col_valuesString = null;
   public void setValuesString(String col_valuesString) { this.col_valuesString = col_valuesString; }
   public String  getValuesString(){return col_valuesString;}

   /******************************
    *  Defined in DataDesceiptor *
    ******************************/

   //private String name = "name";
   //public void setName(String name) { this.name = name; }
   //public String getName() { return name; }

   private String displayName = "Display Name";
   public void setDisplayName(String displayName) { this.displayName = displayName; }
   public String getDisplayName() { return displayName; }

   private int displayOrder = 1000;
   public void setDisplayOrder(int displayOrder) { this.displayOrder = displayOrder; }
   public int getDisplayOrder() { return displayOrder; }

   private String briefDisplayName = "Display Name";
   public void setBriefDisplayName(String briefDisplayName) { this.briefDisplayName = briefDisplayName; }
   public String getBriefDisplayName() { return briefDisplayName; }

   private String unit = "";
   public void setUnit(String unit) { this.unit = unit; }
   public String getUnit() { return unit; }

   private String type = "String";
   public void setType(String type) { this.type = type; }
   public String getType() { return type; }

   private String onTableName = null;
   public void setOnTableName(String onTableName) { this.onTableName = onTableName; }
   public String getOnTableName() { return onTableName; }

   private String width = null;
   public void setWidth(String width) { this.width = width; }
   public String getWidth() { return width; }

   private String[] possibleValue = null;
   public void setPossibleValue(String[] possibleValue) { this.possibleValue = possibleValue; }
   public String[] getPossibleValue() { return possibleValue; }

   private String processorName = null;
   public void setProcessorName(String processorName) { this.processorName = processorName; }
   public String getProcessorName() { return processorName; }

   private String cprocessorName = null;
   public void setCprocessorName(String cprocessorName) { this.cprocessorName = cprocessorName; }
   public String getCprocessorName() { return cprocessorName; }

   private String displayerName = null;
   public void setDisplayerName(String displayerName) { this.displayerName = displayerName; }
   public String getDisplayerName() { return displayerName; }

   private boolean availForClient = false;
   public void setAvailForClient(boolean availForClient) { this.availForClient = availForClient; }
   public boolean getAvailForClient() { return availForClient; }

   private boolean onMasterTable = false;
   public void setOnMasterTable(boolean onMasterTable) { this.onMasterTable = onMasterTable; }
   public boolean getOnMasterTable() { return onMasterTable; }

   private boolean isSortable = false;
   public void setIsSortable(boolean isSortable) { this.isSortable = isSortable; }
   public boolean getIsSortable() { return isSortable; }

   private boolean onDataSheet = true;
   public void setOnDataSheet(boolean onDataSheet) { this.onDataSheet = onDataSheet; }
   public boolean getOnDataSheet() { return onDataSheet; }

   private boolean isMultiInstance = false;
   public void setIsMultiInstance(boolean isMultiInstance) { this.isMultiInstance = isMultiInstance; }
   public boolean getIsMultiInstance() { return isMultiInstance; }

   private boolean isRequired = false;
   public void setIsRequired(boolean isRequired) { this.isRequired = isRequired; }
   public boolean getIsRequired() { return isRequired; }

   public String[] subdatas = null;
   public void setSubdatas(String[] subdatas) { this.subdatas = subdatas; }
   public String[] getSubdatas() { return subdatas; }

   public Data()
   {
      userDataMap = new HashMap();
      processors = new Hashtable();
   }

   public String prepareSQLCreateTable()
   {
      StringBuffer sql =
           new StringBuffer("CREATE TABLE ").append(this.getTablename())
                                            .append(" (id varchar(64) not null")
                                            .append(", name varchar(64) not null")
                                            .append(", valuesString varchar(255)")
                                            .append(", primary key(id))");
      return sql.toString();
   }

   public Storable create()
   {
      return new Data();
   }

   public Set getAllOwnerNames()
   {
      return userDataMap.keySet();
   }

   public String toString()
   {
      return toString("|");
   }

   public String toString(String delimiter)
   {
      StringBuffer buffer = new StringBuffer();
      Iterator it = userDataMap.keySet().iterator();
      String key = null;
      String val = null;
      int count = 0;
      while(it.hasNext())
      {
         key = (String)it.next();
         val = (String)userDataMap.get(key);
         if(null==val)
            val="";
         if(0==count)
            buffer.append(key).append("=").append(val);
         else
            buffer.append(delimiter).append(key).append("=").append(val);
         count++;
      }

      return buffer.toString();
   }

   public void loadValueFrom(Data data)
   {
      this.userDataMap = data.userDataMap;
   }

   public void fromString(String datas)
   {
      fromString("|", datas);
   }

   public void fromString(String delimiter, String datas)
   {
      String[] temp = SMUtility.splitByToken(datas, delimiter, true);
      for(int i=0; i<temp.length; i++)
      {
         int index = temp[i].indexOf("=");
         if(-1==index)
            continue;
         userDataMap.put(temp[i].substring(0, index), temp[i].substring(index+1));
      }
   }

   public String[] getAllOwners()
   {
      Iterator it = userDataMap.keySet().iterator();
      ArrayList owners = new ArrayList();
      while(it.hasNext())
      {
         owners.add(it.next());
      }
      return (String[])owners.toArray(new String[]{});
   }

   public String[] getAllValues()
   {
      Iterator it = userDataMap.values().iterator();
      ArrayList values = new ArrayList();
      while(it.hasNext())
      {
         values.add(it.next());
      }
      return (String[])values.toArray(new String[]{});
   }

   public void setValue(String value)
   {
      setValue(ANONYMOUS, value);
   }

   public void setValue(String ownername, String value)
   {
      //System.out.println(":::::::::::::::::::::::" + value);
      if(!isMultiInstance)
      {
         // clear all other values, only allow one instance
         userDataMap.clear();
      }
      userDataMap.put(ownername, value);
   }

   public String getValue()
   {
      if(!isMultiInstance)
      {
         int size = userDataMap.size();
         if(0==size)
            return "";
         String value = (String)userDataMap.values().iterator().next();
         return value;
      }

      return getSummary(false);
   }

   public String getValue(String ownername)
   {
      if(null==ownername)
         return getValue();
      String val = null;
      if(!isMultiInstance)
      {
         val = getValue();
      }
      else
      {
         val = (String)userDataMap.get(ownername);
         if(null==val)
            val = "";
      }
      return val;
   }

   public String removeValue()
   {
      String temp = getValue();
      userDataMap.clear();
      return temp;
   }

   public String removeValue(String ownername)
   {
      String val = (String)userDataMap.remove(ownername);
      if(null==val)
        return "";
      return val;
   }

   public String getSummary(boolean isClient)
   {
      String myProcessorName = null;
      if(isClient)
      {
         if(null!=cprocessorName)
            myProcessorName = cprocessorName;
         else
            myProcessorName = processorName;
      }
      else
         myProcessorName = processorName;

      return createProcessor(myProcessorName).process(userDataMap);
   }

   public int compareTo(Object obj)
   {
      if(null==obj||!(obj instanceof Data))
         return 0;
      return (displayOrder-((Data)obj).displayOrder);
   }

    public boolean isDataQualified()
    {
       if(!isRequired)
          return true;
       else
       {
          String val = getValue();
          return (null!=val&&!"".equals(val));
       }
    }

    public void showContent()
    {
       System.out.println("===========================================================");
       System.out.println("id=" + this.getId());
       System.out.println("name=" + this.getName());
       System.out.println("display name=" + this.displayName);
       System.out.println("brief name=" + this.briefDisplayName);
       System.out.println("available for client=" + this.availForClient);
       System.out.println("id=" + this.getId());
       System.out.println("id=" + this.getId());
       System.out.println("id=" + this.getId());
       System.out.println("===========================================================");
    }

    private static DataProcessor createProcessor(String processorName)
    {
       try
       {
          if(null==processorName)
             processorName = "org.yang.services.dataAccess.DefaultDataProcessor";
          DataProcessor processor = (DataProcessor)processors.get(processorName);
          if(null==processor)
          {
             processor = (DataProcessor)Class.forName(processorName).newInstance();
             processors.put(processorName, processor);
          }
          return processor;
       }
       catch(Exception e)
       {
          return new DefaultDataProcessor();
       }
    }

    private static DataDisplayer createDisplayer(String name, String displayerName)
    {
       if(null==displayerName)
       {
          return new DefaultDataDisplayer();
       }

       try
       {
          return (DataDisplayer)Class.forName(displayerName).newInstance();
       }
       catch(Exception e)
       {
          return new DefaultDataDisplayer();
       }
    }
}