/* Generated by Together */

package org.yang.web.tagLib.webForm;

import javax.servlet.jsp.tagext.TagSupport;
import javax.servlet.jsp.JspException;
import javax.servlet.http.HttpSession;
import javax.servlet.jsp.JspWriter;
import java.util.Iterator;
import java.io.InputStream;
import org.yang.web.view.controls.WebControl;
import org.yang.web.view.controls.WebControlBuilder;
import org.yang.web.view.controls.WebControlBuilderFactory;
import org.yang.web.controller.GenericBean;

public class WebControlTag extends TagSupport
{
   private WebControlBuilderFactory factory = null;

  /**
   * The key of the session-scope bean we look for.
   */
   private String beanID = "";
   public String getBeanID() { return (this.beanID); }
   public void setBeanID(String beanID) { this.beanID = beanID; }

   private String controlBuilderName = "";
   public String getControlBuilderName() { return controlBuilderName; }
   public void setControlBuilderName(String controlBuilderName) { this.controlBuilderName = controlBuilderName; }

   public WebControlTag()
   {
      super();
      factory = WebControlBuilderFactory.getFactory();
   }

   public int doStartTag() throws JspException
   {
      try
      {
         WebControlBuilder builder = factory.createBuilder(controlBuilderName);
         WebControl control = builder.build((GenericBean)pageContext.getSession().getAttribute(beanID));

	 JspWriter writer = pageContext.getOut();
         control.render(writer);
      }
      catch(Exception e)
      {
         e.printStackTrace();
      }

      return (SKIP_BODY);
   }

   protected String readTemplate(String temp)
   {
            InputStream is = Thread.currentThread()
                                   .getContextClassLoader()
                                   .getResourceAsStream(temp);


            //System.out.println("[WebControlTag.java::readTemplate]---is="+is);
            return null;
   }

   protected Object getClass(String name)
   {
      Object obj = null;
      try
      {
         obj = Class.forName(name).newInstance();
      }
      catch(Exception e){}

      return obj;
   }
}
