/* Generated by Together */

package org.yang.web.applicationContainer;

import java.util.HashMap;
import java.util.Collection;
import java.util.Date;
import java.util.StringTokenizer;
import java.util.Calendar;

import org.yang.services.servicemgr.ServiceManager;
import org.yang.services.accountmgr.UserManager;
import org.yang.services.accountmgr.User;
import org.yang.services.accountmgr.Group;
import org.yang.services.time.TimeKeeper;

import org.yang.util.ExceptionBroadcast;
import org.yang.web.controller.ApplicationContainer;

public class ApplicationContainerImpl extends ApplicationContainer
{
   private HashMap usrMgrs = null;

   private MessageManager msgMgr = null;
   public MessageManager getMessageManager() { return msgMgr; }

   private ServiceManager srvMgr = null;
   public ServiceManager getServiceManager() { return srvMgr; }

   public ApplicationContainerImpl() {}

   public void init()
   {
      msgMgr = new MessageManager();
      usrMgrs = new HashMap();

      try
      {
         if(null!=srvMgr)
            destory();

         srvMgr = new ServiceManager();
         srvMgr.startServerServices();
      }
      catch(Exception e)
      {
         e.printStackTrace();
      }
   }

   public void destory()
   {
      try
      {
         srvMgr.stopServerServices();
         srvMgr = null;
      }
      catch(Exception e)
      {
         e.printStackTrace();
      }
   }

   public UserManager getUserManager(String domain)
   {
      return createUserManager(domain);
   }

   public boolean prepareLoginInformation(PassportBean pass)
   {
      pass.setSysPropUtil(msgMgr.getLangProp(MessageManager.SYSTEM));
      pass.setDefaultPropUtil(msgMgr.getLangProp(MessageManager.ENGLISH));
      return true;
   }

   public boolean login(PassportBean pass)
   {
      String domain = pass.getDomain();
      String username = pass.getUsername();
      String password = pass.getPassword();

      if (domain.equals("") || username.equals(""))
      {
         return false;
      } 
      else
      {
         if (!isValidDomain(domain))
         {  
            return false;
         }
         else 
         {
            UserManager um = null;

            try 
            {
               um = createUserManager(domain);
               User usr = null;
               if (null==(usr=um.logon(username,password)))
               {
                  System.out.println("[PassportBean::logon] User login info is not correct, Login fail.");
                  return false;
               }
               else 
               {
                  // Setup system and user properties for this user
                  pass.setUserPropUtil(msgMgr.getLangProp(usr.getLanguageSet()));

                  // Setup services control for this user
                  pass.setCurrentServiceID(usr.getDefaultService());

                  // Setup user
                  pass.setPassword("*********************");
                  pass.setDomain(domain);
                  pass.setUsername(username);
                  String userID =  usr.getID().toLowerCase();
                  Collection c_grps = um.getGroupsByUID(userID);
                  if(c_grps!=null)
                  { 
                     Object [] o_grps = c_grps.toArray();
                     Group [] grps = new Group [o_grps.length];
                     String [] s_grps = new String [o_grps.length];
                     
                     for (int i=0;i<o_grps.length ; i++)
                     {                          
                        grps[i] = (Group) o_grps[i];
                        s_grps[i] = grps[i].getID();                         
                     }           
                     pass.setGroups(s_grps);
                  }
               }
               return true;
            }
            catch(Exception e) 
            {
               ExceptionBroadcast.print(e);
               return false;
            }
         }
      }
   }

   public boolean logout(PassportBean pass)
   {
      return true;
   }

   protected Date formDate(String d) throws Exception
   {
      try 
      {
         StringTokenizer st = new StringTokenizer(d,"/");
         String yyyy = st.nextToken();
         String mm = st.nextToken();
         String dd = st.nextToken();
         Calendar cl = Calendar.getInstance();
         cl.set(Integer.parseInt(yyyy),Integer.parseInt(mm)-1,Integer.parseInt(dd),00,00,00);
         return cl.getTime();
      } 
      catch (Exception e) 
      {
         return null;
      }
   }

   protected boolean isValidDomain(String d)
   {
      if(d==null||"".equals(d)) 
         return false;

      Date rightNow = TimeKeeper.getInstance().getTime();
      Date startD = null;//formDate(lk.getDomainProperty(d,lk.dStartDate));
      Date stopD = null;//formDate(lk.getDomainProperty(d,lk.dStopDate));
      /* temp
      if(startD==null || stopD==null) 
         return false;
      if(rightNow.before(startD) || rightNow.after(stopD))
         return false;
       */  
      return true;
   }

   private UserManager createUserManager(String domain)
   {
      UserManager um = null;
      if(null==(um=(UserManager)usrMgrs.get(domain)))
      {
         synchronized(this)
         {
            if(null==(um=(UserManager)usrMgrs.get(domain)))
            {
               um = (UserManager)srvMgr.getService("AccountManager", domain, null);
               usrMgrs.put(domain, um);
            }
         }
      }
      return um;
   }
}