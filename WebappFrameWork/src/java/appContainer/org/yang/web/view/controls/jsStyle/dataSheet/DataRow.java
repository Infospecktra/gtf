/* Generated by Together */
package org.yang.web.view.controls.jsStyle.dataSheet;

import org.yang.web.view.controls.WebControl;
import javax.servlet.jsp.JspWriter;
import java.util.HashMap;
import java.util.Iterator;

/**
 * @testcase org.test.org.yang.web.view.controls.jsStyle.TestList 
 */
public class DataRow extends WebControl
{
   protected HashMap itemTable = null;

   protected String id = null;
   public void setId(String id) { this.id = id; }
   public String getId() { return id; }

   private int order = 0;
   public void setOrder(int order) { this.order = order; }
   public int getOrder() { return order; }

   protected String bgcolor = "#eeeeee";
   public void setBgcolor(String bgcolor) { this.bgcolor = bgcolor; }
   public String getBgcolor() { return bgcolor; }

   protected boolean isHighlight = false;
   public void setIsHighlight(boolean isHighlight) { this.isHighlight = isHighlight; }

   protected String highlightColor = "#FFFF00";
   public void setHighlightColor(String highlightColor) { this.highlightColor = highlightColor; }

   public DataRow()
   {
      super();
      itemTable = new HashMap();
   }

   public void addASubcontrol(WebControl control)
   {
      super.addASubcontrol(control);
      itemTable.put(control.getId(), control);
   }

   public DataItem getItem(String key)
   {
      return (DataItem)itemTable.get(key);
   }

   public String[] getItemNames()
   {
      String[] itemNames = new String[mySubcontrols.size()];
      for(int i=0; i<mySubcontrols.size(); i++)
      {
         itemNames[i] = ((DataItem)mySubcontrols.get(i)).getName();
      }
      return itemNames;
   }

   public String[] getItemIds()
   {
      String[] itemIds = new String[mySubcontrols.size()];
      for(int i=0; i<mySubcontrols.size(); i++)
      {
         itemIds[i] = ((DataItem)mySubcontrols.get(i)).getId();
      }
      return itemIds;
   }

   public String[] getItemWidths()
   {
      String[] itemWidths = new String[mySubcontrols.size()];
      for(int i=0; i<mySubcontrols.size(); i++)
      {
         itemWidths[i] = ((DataItem)mySubcontrols.get(i)).getWidth();
      }
      return itemWidths;
   }

   public boolean[] getIsSortable()
   {
      boolean[] sortables = new boolean[mySubcontrols.size()];
      for(int i=0; i<mySubcontrols.size(); i++)
      {
         sortables[i] = ((DataItem)mySubcontrols.get(i)).getIsSortable();
      }
      return sortables;
   }

   public String[] getTitleLinks()
   {
      String[] titleLinks = new String[mySubcontrols.size()];
      for(int i=0; i<mySubcontrols.size(); i++)
      {
         titleLinks[i] = ((DataItem)mySubcontrols.get(i)).getTitleLink();
      }
      return titleLinks;
   }

   public void addElement(DataItem item)
   {
      addASubcontrol(item);
   }

   public void render(JspWriter writer) throws Exception
   {
      Iterator it = this.subcontrols();
      DataItem item = null;
      while(it.hasNext())
      {
         item = (DataItem)it.next();
         if(isHighlight)
         {
            item.setIsHighlight(true);
            item.setHighlightColor(this.highlightColor);
         }
         else
         {
            item.setIsHighlight(false);
         }
      }

      if(isHighlight)
      {
         writer.println("<tr bgcolor=\"" + highlightColor + "\">");
      }
      else
      {
         writer.println("<tr bgcolor=\"" + bgcolor + "\">");
      }

      if(null!=id)
         writer.println("<a name=\"" + id + "\"></a>");
      this.renderSubcontrols(writer);
      writer.println( "</tr>" );
   }

}