/* Generated by Together */

package org.yang.web.view.controls.jsStyle.navigationTree;

import org.yang.web.view.controls.WebControl;
import java.util.Iterator;
import javax.servlet.jsp.JspWriter;
import org.yang.util.SMUtility;

public class NavigationTree extends WebControl
{
   public static final int TYPE_ABSOLUTE_ROOT = 0;
   public static final int TYPE_RELATIVE_ROOT = 1;

   private int type = 0;
   public void setType(int type) { this.type = type; }

   private String rootId = null;
   public void setRootId(String rootId) { this.rootId = rootId; }

   protected NavigationNode root = null;
   public void setRoot(NavigationNode root) { this.root = root; }
   public NavigationNode getRoot() { return root; }

   public NavigationTree()
   {
      super();
   }

   public void render(JspWriter writer) throws Exception
   {
      switch(type)
      {
         case 0:
         {
            if(null!=root)
               root.render(writer);
            break;
         }
         case 1:
         {
            NavigationNode currentRoot = null;
            if(null!=(currentRoot=findNode(rootId)))
            {
               NavigationNode rootParent = currentRoot.removeParent();
               boolean isLast = currentRoot.getIsTheLastNode();
               currentRoot.setIsTheLastNode(true);
               currentRoot.render(writer);
               currentRoot.setParent(rootParent);
               currentRoot.setIsTheLastNode(isLast);
            }
         }
      }
   }

   public void setFocus(String id)
   {
      try
      {
         clearFocus(root);
         (findNode(id, root)).setOnFocus(true);
      }
      catch(Exception e)
      {
         e.printStackTrace();
      }
   }

   public void openNode(String id)
   {
      try
      {
         if(TYPE_RELATIVE_ROOT==type)
            setRootId(id);
         (findNode(id, root)).setIsExpanded(true);
      }
      catch(Exception e)
      {
         e.printStackTrace();
      }
   }

   public void openNodes(String targetId)
   {
      if(null==targetId)
         return ;
      String[] allIds = SMUtility.splitByToken(targetId, ".", false);
      String id = "";
      NavigationNode node = null;
      for(int i=0; i<allIds.length; i++)
      {
         if(0!=i)
            id = id + "." + allIds[i];
         else
            id = allIds[i];
         try
         {
            if(null!=(node=(findNode(id, root))))
               node.setIsExpanded(true);
         }
         catch(Exception e)
         {
            e.printStackTrace();
         }
      }
   }

   public void closeNode(String id)
   {
      try
      {
         if(TYPE_RELATIVE_ROOT==type)
         {
            NavigationNode node = findNode(id);
            setRootId(node.getParentId());
         }
         (findNode(id, root)).setIsExpanded(false);
      }
      catch(Exception e)
      {
         e.printStackTrace();
      }
   }

   public void deleteNode(String id) throws Exception
   {
      int index = id.lastIndexOf(".");
      if(-1==index)
        return;

      String localId = id.substring(index+1);
      id = id.substring(0, index);
      NavigationNode parent = findNode(id, root);
      parent.removeChildNode(id);
   }

   public void addNode(String id, NavigationNode node) throws Exception
   {
      int index = id.lastIndexOf(".");
      if(-1==index)
        return;

      String localId = id.substring(index+1);
      id = id.substring(0, index);
      NavigationNode parent = findNode(id, root);
      parent.addChildNode(node);
   }

   public NavigationNode findNode(String id) throws Exception
   {
      return findNode(id, root);
   }

   private NavigationNode findNode(String id, NavigationNode node) throws Exception
   {
      NavigationNode targetNode = null;

      try
      {
         if(id.equals(node.getId()))
            return node;
         else
         {
            Iterator it = node.subcontrols();
            NavigationNode target = null;
            while(it.hasNext())
            {
               if(null!=(target = findNode(id, (NavigationNode)it.next())))
                  break;
            }
            return target;
         }
      }
      catch(Exception e)
      {
         throw e;
      }
   }

   private void clearFocus(NavigationNode node) throws Exception
   {
      NavigationNode targetNode = null;

      try
      {
         Iterator it = node.subcontrols();
         if(null==it)
            return ;
         else
         {
            NavigationNode target = null;
            while(it.hasNext())
            {
               target = (NavigationNode)it.next();
               clearFocus(target);
            }
         }
         node.setOnFocus(false);
      }
      catch(Exception e)
      {
         throw e;
      }
   }
}