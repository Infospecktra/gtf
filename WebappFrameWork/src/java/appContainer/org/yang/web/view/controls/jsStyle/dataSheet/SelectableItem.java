/* Generated by Together */

package org.yang.web.view.controls.jsStyle.dataSheet;
import javax.servlet.jsp.JspWriter;
import org.yang.web.view.controls.jsStyle.FormElement;

public class SelectableItem extends DataItem 
{
   protected String[] values = null;
   public void setValues(String[] values) { this.values = values; }

   protected String[] displayNames = null;
   public void setDisplayNames(String[] displayNames) { this.displayNames = displayNames; }

   protected String selectedValue = null;
   public void setSelectedValue(String selectedValue) { this.selectedValue = selectedValue; }
   public String getSelectedValue() { return selectedValue; }

   protected String onChange = null;
   public void setOnChange(String onChange) { this.onChange = onChange; }

   protected String size = "1";
   public void setSize(String size) { this.size = size; }

   protected boolean needPromptOption = true;
   public void setNeedPromptOption(boolean needPromptOption){this.needPromptOption = needPromptOption;}

   protected String caption = null;
   public void setCaption(String caption) { this.caption = caption; }

   public boolean isCaptionOnTop = false;
   public boolean getIsCaptionOnTop(){return isCaptionOnTop;}
   public void setIsCaptionOnTop(boolean isCaptionOnTop){this.isCaptionOnTop=isCaptionOnTop;} 
   
   public String align = null;
   public String getAlign(){return align;}
   public void setAlign(String align){this.align=align;} 
   
   protected String cssStyle = "width : 100px;\"font-family : monospace; font-size : 7pt";
   public String getCssStyle(){return cssStyle;}
   public void setCssStyle(String cssStyle){this.cssStyle=cssStyle;} 
   
   public SelectableItem()
   {
      super();
   }

   public void render(JspWriter writer) throws Exception
   {  
      writer.print("<form  name=\"" + this.id + "\" action=\"" + this.actionLink);
      if(null!=this.actionTarget)
         writer.print(  "\" target=\"" + this.actionTarget);
      writer.print(  "\" method=\"post\" id=\"" + this.id + "\">");
      writer.print("  <input type=\"hidden\" name=\"actiontype\" value=\"\" id=\"actiontype.hidden\">");
      writer.print(" <td nowrap ");
      if(null!=align)
         writer.print(" align=\""+align+"\" ");
      writer.print("  class=\"smaller\" ");
      if(null!=bgcolor)
         writer.print(" bgcolor=\"" + bgcolor + "\"");
      writer.print(" >");
      if(null!=caption&&!isCaptionOnTop)
         writer.print("      <font color=\"#1D459D\">" + caption + " :</font>");
      else if (null!=caption&&isCaptionOnTop)     
      {
         writer.print("<table><tr>");
         writer.print("   <td nowrap align=\"center\" class=\"pt7\">");
         writer.print("      <font color=\"#1D459D\">" + caption + " :</font>");
         writer.print("   </td>");
         writer.print("</tr></table>");
      }
      boolean gotCurrentValue = false;
      if(null==displayNames)
         displayNames = values;

      writer.print("    <select id=\"" + id + "\"");
      writer.print("            size=\"" + size + "\"");
      writer.print("            onChange=\"" + onChange + "\"");
      writer.print("            STYLE=\""+cssStyle+"\"");
      writer.print("            name=\"" + name + "\">");
      for(int i=0; i<values.length; i++)
      {
         writer.print("      <option value=\"" + values[i] + "\" ");
     
         if(selectedValue.equals(values[i]))
         {
            writer.print("selected");
            gotCurrentValue = true;
         }
         writer.print(">" + displayNames[i] + "</option>");
      }

      if(needPromptOption)
      {
         if(!gotCurrentValue)
            writer.print("      <option value=\"" + id + ".\" selected>Please select</option>");
         else
            writer.print("      <option value=\"" + id + ".\" >Please select</option>");
      }
      writer.print("    </select>");
      writer.print("</td></form>");
   }

   public int compareTo(Object object)
   {
      try
      {
         return this.selectedValue.compareTo(((SelectableItem)object).selectedValue);
      }
      catch(Exception e)
      {
         e.printStackTrace();
         return 0;
      }
   }

}
