/* Generated by Together */
package org.yang.web.view.controls.jsStyle.dataSheet;

import org.yang.web.view.controls.WebControl;
import javax.servlet.jsp.JspWriter;
import java.util.Collections;
import java.util.Iterator;

/**
 * @testcase org.test.org.yang.web.view.controls.jsStyle.TestNavigationList 
 */
public class DataSheet extends WebControl
{
   protected String id = null;
   public void setId(String id) { this.id = id; }
   public String getId() { return id; }

   protected String text = null;
   public void setText(String text) { this.text = text; }
   public String getText() { return text; }

   protected String title = null;
   public void setTitle(String title) { this.title = title; }
   public String getTitle() { return title; }

   protected int currentPageNumber = 1;
   public void setCurrentPageNumber(int currentPageNumber) { this.currentPageNumber = currentPageNumber; }
   public int getCurrentPageNumber() { return currentPageNumber; }

   protected int rowsPerPage = 8;
   public void setRowsPerPage(int rowsPerPage) { this.rowsPerPage = rowsPerPage; }
   public int getRowsPerPage() { return rowsPerPage; }

   protected String actionLink = null;
   public void setActionLink(String actionLink) { this.actionLink = actionLink; }
   public String getActionLink() { return actionLink; }

   protected int width = 90;
   public void setWidth(int width) { this.width = width; }
   public int getWidth() { return width; }

   protected String highlightId = null;
   public void setHighlightId(String highlightId) { this.highlightId = highlightId; }

   protected String highlightColor = "#FFFF00";
   public void setHighlightColor(String highlightColor) { this.highlightColor = highlightColor; }
   
   protected String titleColumnsFontColor = "#2a00aa";
   public void setTitleColumnsFontColor(String titleColumnsFontColor) { this.titleColumnsFontColor = titleColumnsFontColor; }
   

   protected boolean isPaging = false;
   public void setIsPaging(boolean isPaging) { this.isPaging = isPaging; }

   protected String codeBase = null;
   public void setCodeBase(String codeBase) { this.codeBase = codeBase; }

   protected SelectableItem pageNumberSelector = null;
   public void setPageNumberSelector(SelectableItem pageNumberSelector) { this.pageNumberSelector = pageNumberSelector; }
   public SelectableItem getPageNumberSelector() { return pageNumberSelector; }

   protected String pageNumberSelectorLocation ="top"; /* top/bottom */
   public String getPageNumberSelectorLocation(){return pageNumberSelectorLocation;}
   public void setPageNumberSelectorLocation(String pageNumberSelectorLocation){this.pageNumberSelectorLocation=pageNumberSelectorLocation;}

   protected String dataSizeNote ="";
   public String getDataSizeNote(){return dataSizeNote;}
   public void setDataSizeNote(String dataSizeNote){this.dataSizeNote=dataSizeNote;}
   
   public DataSheet()
   {
      super();
   }

   public void addDataRow(DataRow row)
   {
      mySubcontrols.add(row);
   }

   public void sort(String type)
   {
      sort(type, true);
   }

   public void sort(String type, boolean isAcending)
   {
      if(null!=type)
         Collections.sort(this.mySubcontrols, new DataRowComparator(type, isAcending));
   }

   public void swap(String idFrom, String idTo)
   {
      if(null==idFrom||null==idTo)
         return;

      int indexFrom = -1;
      int indexTo = -1;
      DataRow objFrom = null;
      DataRow temp = null;
//&System.out.println("----------------->" + idFrom + "--->" + idTo);
      for(int i=0; i<mySubcontrols.size(); i++)
      {
         temp = (DataRow)mySubcontrols.get(i);
//&System.out.println("-------------->" + temp.getId() + "--->" + i);
         if(idFrom.equals(temp.getId()))
         {
//&System.out.println("Got indexFrom ->" + indexFrom);
            indexFrom = i;
            objFrom = (DataRow)mySubcontrols.get(i);
         }

         if(idTo.equals(temp.getId()))
         {
//&System.out.println("Got indexTo ->" + indexTo);
            indexTo = i;
         }
      }

      if(-1!=indexFrom&&-1!=indexTo)
      {
         mySubcontrols.set(indexFrom, mySubcontrols.get(indexTo));
         mySubcontrols.set(indexTo, objFrom);
      }
   }

   public void render(JspWriter writer) throws Exception
   {
      if(null!=title)
         writer.println("<b><font color=\"#1D459D\">" + title + "</font></b>");

      writer.println("      <table width=\"" + width + "%\" border=\"0\" cellspacing=\"3\" cellpadding=\"2\" align=\"center\" ID=\"Table1\">");

      if(null!=text)
      {
         writer.println("        <tr bgcolor=\"#000066\">");
         writer.println("          <td class=\"bigger\" background=\"" + codeBase + "/images/bar_bk.gif\"><font color=\"#ffffff\" class=\"bigger\"><b>" + text + "</b></font></td>");
         writer.println("        </tr>");
      }

      writer.println("        <tr>");
      writer.println("       <!--  info. -->");
      writer.println("       <tr>");
      writer.println("          <td>");

      int length = mySubcontrols.size();
      int from = 0;
      int to = length;
      if(null!=pageNumberSelector)
      {
         // current page
         try
         {
            currentPageNumber = Integer.parseInt(pageNumberSelector.getSelectedValue());
         }
         catch(Exception e) { e.printStackTrace(); }

         // paging
         from = (currentPageNumber-1)*rowsPerPage;
         to = from + rowsPerPage;
         if(to>length)
            to = from+length%rowsPerPage;

         if(from>length||to>length)
         {
            from = 0;
            to = length;
         }

System.out.println("=============> from:" + from + ", to:" + to);
      }
      
      if("bottom".equals(pageNumberSelectorLocation))
         renderSpreadsheet(writer, from, to);
            
      if(null!=pageNumberSelector)
      {
         pageNumberSelector.setSelectedValue(String.valueOf(currentPageNumber));
         int total = length/rowsPerPage;
         if(0<length%rowsPerPage)
            total++;
         String[] vals = new String[total];
         for(int i=0; i<vals.length; i++)
            vals[i] = String.valueOf(i+1);
         pageNumberSelector.setValues(vals);
         pageNumberSelector.setDisplayNames(vals);

         writer.print("     <table border=\"0\" cellspacing=\"0\" cellpadding=\"3\" bordercolorlight=\"#cccccc\" bordercolor=\"#cccccc\" bordercolordark=\"#ffffff\" bgcolor=\"#ffffff\" align=\"center\" width=\"100%\" ID=\"Table2\">");
         writer.print("        <tr>");
         writer.print("          <td>");
         writer.print("          <table><tr><td>");
         
         pageNumberSelector.render(writer);
         
         if(dataSizeNote!=null)
         {
            writer.print("                    </td>");
            writer.print("                    <td align=\"left\">");
            writer.print("                    <font color=\"#1D459D\">");
            writer.print(dataSizeNote);
            writer.print("                    </font>");
            
         }	
         writer.print("          </td></tr></table>");
         writer.print("          </td>");
         writer.print("        </tr>");
         writer.println("     </table>");
      }

      if("top".equals(pageNumberSelectorLocation))
         renderSpreadsheet(writer, from, to);

      writer.println("          </td>");
      writer.println("        </tr>");
      writer.println("      </table>");
   }

   protected void renderSpreadsheet(JspWriter writer, int from, int to) throws Exception
   {
      writer.println("            <table border=\"1\" cellspacing=\"0\" cellpadding=\"3\" bordercolorlight=\"#cccccc\" bordercolor=\"#cccccc\" bordercolordark=\"#ffffff\" bgcolor=\"#eaeaea\" align=\"center\" width=\"100%\" ID=\"Table3\">");
      writer.println("              <tr bgcolor=\"#cccccc\">");

      String[] itemNames = ((DataRow)mySubcontrols.get(0)).getItemNames();
      String[] itemWidths = ((DataRow)mySubcontrols.get(0)).getItemWidths();
      String[] itemIds = ((DataRow)mySubcontrols.get(0)).getItemIds();
      boolean[] isSortable = ((DataRow)mySubcontrols.get(0)).getIsSortable();
      String[] titleLinks = ((DataRow)mySubcontrols.get(0)).getTitleLinks();

      for(int i=0; i<itemNames.length; i++)
      {
         writer.print("                <td nowrap class=\"smaller\" align=\"middle\" ");
         if(null!=itemWidths[i])
            writer.print("width=\"" + itemWidths[i] + "\"");
         writer.println(">");
         writer.println("                 <b>");
         //writer.println("                    <font color=\"#2a00aa\">");
         writer.println("                    <font color=\""+titleColumnsFontColor+"\">");
		 
		 
         if(isSortable[i])
         {
            writer.println("                      <a href=\"" + actionLink + "?actiontype=sortMasterTable&sortBy=" + itemIds[i] + "&time=" + System.currentTimeMillis() + "\" ");
            writer.println("                         title=\"Click sort by " + itemNames[i] + "\"");
            writer.println("                      >");
         }
         else if(null!=titleLinks[i])
         {
            writer.println("                      <a href=\"" + titleLinks[i] + "&time=" + System.currentTimeMillis() + "\" >");
         }
         writer.println(itemNames[i]);
         if(isSortable[i])
            writer.println("                      </a>");
         writer.println("                    </font>");
         writer.println("                  </b>");
         writer.println("                </td>");
      }

      writer.println("              </tr>");

      DataRow row = null;
      for(int i=from; i<to; i++)
      {
         row = (DataRow)mySubcontrols.get(i);
         if(null!=highlightId&&highlightId.equals(row.getId()))
         {
            row.setIsHighlight(true);
         }
         else
         {
            row.setIsHighlight(false);
            if(0==i%2)
               row.setBgcolor("#e9e9e9");
            else
               row.setBgcolor("#ffffff");
         }
         row.render(writer);
      }

      writer.println("            </table>");
   }
}