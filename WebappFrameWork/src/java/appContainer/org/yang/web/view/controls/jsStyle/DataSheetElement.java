/* Generated by Together */

package org.yang.web.view.controls.jsStyle;
import javax.servlet.jsp.JspWriter;
import org.yang.web.view.controls.jsStyle.dataSheet.DataSheet;
import org.yang.web.view.controls.jsStyle.dataSheet.DataRow;
import org.yang.web.view.controls.jsStyle.dataSheet.DataItem;
import org.yang.util.SMUtility;
import org.yang.web.view.controls.jsStyle.dataSheet.TextItem;

public class DataSheetElement extends FormElement 
{
   private String id = null;
   public void setId(String id) { this.id = id; }

   private String name = null;
   public void setName(String name) { this.name = name; }

   private String[] columns = null;
   public void setColumns(String[] columns) { this.columns = columns; }

   private String value = null;//"123,456,789|234,345,456";
   public void setValue(String value) { this.value = value; }

   private int cellSize = 10;
   public void setCellSize(int cellSize) { this.cellSize = cellSize; }

   private String unit = null;
   public void setUnit(String unit) { this.unit = unit; }

   private boolean isReadOnly = false;
   public void setIsReadOnly(boolean isReadOnly) { this.isReadOnly = isReadOnly; }

   private boolean displayOnly = false;
   public void setDisplayOnly(boolean displayOnly) { this.displayOnly = displayOnly; }

   protected void printBody(JspWriter writer) throws Exception
   {
      DataSheet sheet = new DataSheet();
      sheet.setId("tailRecord");
	  sheet.setTitleColumnsFontColor("#0066CC");
      sheet.setWidth(100);

      DataRow row = null;
      DataItem item = null;

      String[] rows = SMUtility.splitByToken(value, "!", false);
      String[] cols = null;
      int colLength = 0;
      int rowLength = rows.length;

      for(int i=0; i<rowLength+1; i++)
      {
      	 if(i==rowLength&&isReadOnly)
      	    break;
      	 
         try
         {
            //new row
            row = new DataRow();

            item = new TextItem();
            item.setName("number");
			item.setIsSortable(false);
            ((TextItem)item).setColor("#000066");
            ((TextItem)item).setBold(true);
            ((TextItem)item).setText((i+1)+"");
            row.addElement(item);

            if(i!=rowLength)
               cols = SMUtility.splitByToken(rows[i], ",", true);
            else
               cols = new String[columns.length];
            colLength = cols.length;

            // loop all colums
            for(int j=0; j<columns.length; j++)
            {
               item = new TextItem();
               item.setIsReadOnly(isReadOnly);
               ((TextItem)item).setColor("#000066");
               ((TextItem)item).setSize(cellSize);
               item.setId(id);
			   item.setIsSortable(false);
               item.setName(columns[j]);
               ((TextItem)item).setBold(true);
               if(j>=colLength||null==cols[j])
               {
                  ((TextItem)item).setText("");
               }
               else
               {
                  ((TextItem)item).setText(cols[j]);
               }
               row.addElement(item);
            }
            sheet.addDataRow(row);
         }
         catch(Exception e)
         {
            e.printStackTrace();
         }
      }
      sheet.render(writer);
   }
}