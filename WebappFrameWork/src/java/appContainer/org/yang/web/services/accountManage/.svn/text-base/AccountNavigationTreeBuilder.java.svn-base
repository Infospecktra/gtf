/* Generated by Together */
package org.yang.web.services.accountManage;

import org.yang.web.view.controls.WebControlBuilder;
import org.yang.web.view.controls.WebControl;
import org.yang.web.controller.GenericBean;
import org.yang.web.view.controls.jsStyle.UIForm;
import org.yang.web.view.controls.jsStyle.TextField;
import org.yang.web.view.controls.jsStyle.PassElement;
import org.yang.web.view.controls.jsStyle.SelectElement;
import org.yang.web.view.controls.jsStyle.TextAreaElement;
import org.yang.web.view.controls.jsStyle.ButtonElement;
import org.yang.web.view.controls.jsStyle.navigationTree.NavigationNode;
import java.util.Iterator;
import org.yang.services.accountmgr.Group;
import org.yang.services.accountmgr.User;
import org.yang.web.view.controls.jsStyle.navigationTree.NavigationTree;
import java.util.Collection;
import java.util.Map;
import org.yang.services.servicemgr.ServiceDescriptor;

public class AccountNavigationTreeBuilder implements WebControlBuilder
{
   private String groupsOpen = null;
   private String groupsClose = null;
   private String groupIcon = null;
   private String usersOpen = null;
   private String usersClose = null;
   private String userIcon = null;
   private String servicesOpen = null;
   private String servicesClose = null;

   public WebControl build(GenericBean bean) throws Exception
   {
      AccountManagerBean accountBean = (AccountManagerBean)bean;
      String codeBase = accountBean.getAppBase() + accountBean.getGuiBase();

      NavigationTree tree = null;
      if(null==(tree=(NavigationTree)accountBean.getControl("accountTree")))
      {
         groupsOpen    = accountBean.calculateURL(accountBean.getCurrentServiceProperty("ServiceTree.Icon.groups.open"));
         groupsClose   = accountBean.calculateURL(accountBean.getCurrentServiceProperty("ServiceTree.Icon.groups.close"));
         groupIcon     = accountBean.calculateURL(accountBean.getCurrentServiceProperty("ServiceTree.Icon.group"));

         usersOpen     = accountBean.calculateURL(accountBean.getCurrentServiceProperty("ServiceTree.Icon.users.open"));
         usersClose    = accountBean.calculateURL(accountBean.getCurrentServiceProperty("ServiceTree.Icon.users.close"));
         userIcon      = accountBean.calculateURL(accountBean.getCurrentServiceProperty("ServiceTree.Icon.user"));

         servicesOpen  = accountBean.calculateURL(accountBean.getCurrentServiceProperty("ServiceTree.Icon.services.open"));
         servicesClose = accountBean.calculateURL(accountBean.getCurrentServiceProperty("ServiceTree.Icon.services.close"));

         tree = createTree(accountBean, codeBase);
         accountBean.setControl("accountTree", tree);
         buildTree(tree, accountBean);
         tree.openNodes(accountBean.getTargetID());
      }

      //buildTree(tree, accountBean);

      return tree;
   }

   private NavigationTree createTree(AccountManagerBean accountBean, String codeBase)
   {
      NavigationNode root = NavigationNode.createNewNode(NavigationNode.BASE_STYLE);
      root.setId("root");
      root.setCaption(accountBean.getDomain());
      root.setDescription("Account Information");
      root.setActionLink(codeBase + "/admindesk/accountsRight.jsp");
      root.setType(NavigationNode.BASE_STYLE);
      root.setIsExpanded(true);
      root.setIconOpen(accountBean.calculateURL("/images/domain.gif"));
      root.setIconClose(accountBean.calculateURL("/images/domain.gif"));
      root.setCodeBase(codeBase);
      root.setLevel(0);
      root.setIsExpanded(true);
      root.setIsTheLastNode(true);

      NavigationNode groupRoot = NavigationNode.createNewNode(NavigationNode.ROOT_STYLE);
      groupRoot.setId("root.groups");
      groupRoot.setCaption("Groups");
      groupRoot.setNavigationActionLink("accountTree.wf");
      groupRoot.setType(NavigationNode.ROOT_STYLE);
      groupRoot.setIsExpanded(true);
      groupRoot.setIconOpen(groupsOpen);
      groupRoot.setIconClose(groupsClose);
      groupRoot.setCodeBase(codeBase);
      groupRoot.setLevel(1);
      groupRoot.setIsExpanded(false);
      groupRoot.setParent(root);
      root.addChildNode(groupRoot);

      NavigationNode userRoot = NavigationNode.createNewNode(NavigationNode.ROOT_STYLE);
      userRoot.setId("root.users");
      userRoot.setCaption("Users");
      userRoot.setNavigationActionLink("accountTree.wf");
      userRoot.setType(NavigationNode.ROOT_STYLE);
      userRoot.setIsExpanded(true);
      userRoot.setIconOpen(usersOpen);
      userRoot.setIconClose(usersClose);
      userRoot.setIsTheLastNode(true);
      userRoot.setCodeBase(codeBase);
      userRoot.setLevel(1);
      userRoot.setIsExpanded(false);
      userRoot.setIsTheLastNode(true);
      userRoot.setParent(root);
      root.addChildNode(userRoot);

      NavigationTree tree = new NavigationTree();
      tree.setRoot(root);

      return tree;
   }


   private void buildTree(NavigationTree tree, AccountManagerBean accountBean)
   {
      String codeBase = accountBean.getAppBase() + accountBean.getGuiBase();

      try
      {
         NavigationNode root = tree.getRoot();
         NavigationNode groupRoot = null;
         NavigationNode userRoot = null;
         Iterator it = root.subcontrols();

         groupRoot = (NavigationNode)it.next();
         userRoot = (NavigationNode)it.next();

         groupRoot.clear();
         userRoot.clear();

         String groupRootID = groupRoot.getId();
         String userRootID = userRoot.getId();

         Collection groupCollection = accountBean.getAllGroups();
         Iterator groupIt = groupCollection.iterator();
         int groupSize = groupCollection.size();
         NavigationNode groupNode = null;
         Group group = null;
         String gid = null;

         Iterator userIt = null;
         NavigationNode userNode = null;
         User user = null;
         String uid = null;

         NavigationNode serviceRoot = null;
         Iterator serviceIt = null;
         NavigationNode serviceNode = null;
         String sid = null;
         int groupCount = 0;
         while(groupIt.hasNext())
         {
            groupCount++;
            group = (Group)groupIt.next();
            gid = group.getID();
            String groupNodeID = groupRootID + "." + gid;
            groupNode = NavigationNode.createNewNode(NavigationNode.NODE_STYLE);
            groupNode.setId(groupNodeID);
            groupNode.setCaption(group.getName());
            groupNode.setActionLink("/wf/group.wf?actiontype=load&id=" + gid);
            groupNode.setNavigationActionLink("accountTree.wf");
            groupNode.setType(NavigationNode.NODE_STYLE);
            groupNode.setIconOpen(groupIcon);
            groupNode.setIconClose(groupIcon);
            groupNode.setCodeBase(codeBase);
            if(groupCount==groupSize)
               groupNode.setIsTheLastNode(true);
            groupNode.setLevel(2);
            groupNode.setParent(groupRoot);
            groupRoot.addChildNode(groupNode);

            Collection userCollection = accountBean.getUsersByGID(gid);
            userIt = userCollection.iterator();
            while(userIt.hasNext())
            {
               user = (User)userIt.next();
               uid = user.getID();
               String userNodeID = groupNodeID + "." + uid;
               userNode = NavigationNode.createNewNode(NavigationNode.LEAF_STYLE);
               userNode.setId(userNodeID);
               userNode.setCaption(user.getID());
               userNode.setActionLink("/wf/user.wf?actiontype=load&id=" + uid);
               userNode.setType(NavigationNode.LEAF_STYLE);
               userNode.setIconOpen(userIcon);
               userNode.setIconClose(userIcon);
               userNode.setCodeBase(codeBase);
               userNode.setLevel(3);
               userNode.setParent(groupNode);
               groupNode.addChildNode(userNode);
            }

            serviceRoot = NavigationNode.createNewNode(NavigationNode.NODE_STYLE);
            serviceRoot.setId(groupNode.getId() + ".services");
            serviceRoot.setCaption("Services");
            serviceRoot.setNavigationActionLink("accountTree.wf");
            serviceRoot.setIconOpen(servicesOpen);
            serviceRoot.setIconClose(servicesClose);
            serviceRoot.setCodeBase(codeBase);
            serviceRoot.setIsTheLastNode(true);
            serviceRoot.setLevel(3);
            serviceRoot.setParent(groupNode);
            groupNode.addChildNode(serviceRoot);

            Map serviceDescriptorsMap = accountBean.getAllServiceDescriptorsMap();
            String icon = null;
            Collection serviceCollection = accountBean.getResourceIDSByGID(gid);
            serviceIt = serviceCollection.iterator();
            int serviceSize = serviceCollection.size();
            int serviceCount = 0;
            while(serviceIt.hasNext())
            {
               serviceCount++;
               sid = (String)serviceIt.next();
               serviceNode = NavigationNode.createNewNode(NavigationNode.LEAF_STYLE);
               String serviceNodeID = serviceRoot.getId() + "." + sid;
               serviceNode.setId(serviceNodeID);
               serviceNode.setCaption(sid);

               if(accountBean.hasArea(sid))
                  serviceNode.setActionLink("/wf/service.wf?actiontype=load&gid=" + gid + "&sid=" + sid);
               else
                  serviceNode.setActionLink(null);

               serviceNode.setType(NavigationNode.LEAF_STYLE);

               icon = accountBean.calculateURL(((ServiceDescriptor)serviceDescriptorsMap.get(sid)).getEnviromentParameter("ServiceTree.Icon"));
               serviceNode.setIconOpen(icon);
               serviceNode.setIconClose(icon);
               serviceNode.setCodeBase(codeBase);
               //serviceNode.setIsParentTheLastNode(true);
               if(serviceCount==serviceSize)
                  serviceNode.setIsTheLastNode(true);
               serviceNode.setLevel(4);
               serviceNode.setParent(serviceRoot);
               serviceRoot.addChildNode(serviceNode);
            }
         }

         Collection userCollection = accountBean.getAllUsers();
         userIt = userCollection.iterator();
         int userSize = userCollection.size();
         int userCount = 0;
         while(userIt.hasNext())
         {
            userCount++;
            user = (User)userIt.next();
            uid = user.getID();
            userNode = NavigationNode.createNewNode(NavigationNode.LEAF_STYLE);
            String userNodeID = userRootID + "." + uid;
            userNode.setId(userNodeID);
            userNode.setCaption(uid);
            userNode.setActionLink("/wf/user.wf?actiontype=load&id=" + uid);
            userNode.setType(NavigationNode.LEAF_STYLE);
            userNode.setIconOpen(userIcon);
            userNode.setIconClose(userIcon);
            userNode.setCodeBase(codeBase);
            //userNode.setIsParentTheLastNode(true);
            if(userCount==userSize)
               userNode.setIsTheLastNode(true);
            userNode.setLevel(2);
            userNode.setParent(userRoot);
            userRoot.addChildNode(userNode);
         }
      }
      catch(Exception e)
      {
         e.printStackTrace();
      }
   }
}