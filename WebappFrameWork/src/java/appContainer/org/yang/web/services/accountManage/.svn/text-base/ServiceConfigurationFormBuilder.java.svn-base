/* Generated by Together */
package org.yang.web.services.accountManage;

import java.util.Iterator;
import org.yang.web.controller.GenericBean;
import org.yang.services.accountmgr.Resource;

import org.yang.web.view.controls.WebControlBuilder;
import org.yang.web.view.controls.WebControl;
import org.yang.web.view.controls.jsStyle.UIForm;
import org.yang.web.view.controls.jsStyle.TextField;
import org.yang.web.view.controls.jsStyle.PassElement;
import org.yang.web.view.controls.jsStyle.SelectElement;
import org.yang.web.view.controls.jsStyle.TextAreaElement;
import org.yang.web.view.controls.jsStyle.ServiceListElement;
import org.yang.web.view.controls.jsStyle.AreaElement;
import org.yang.web.view.controls.jsStyle.OperationElement;
import org.yang.web.view.controls.jsStyle.ButtonElement;
import org.yang.services.servicemgr.ServiceDescriptor;
import org.yang.services.servicemgr.Area;
import java.util.Map;
import java.util.Set;
import org.yang.services.servicemgr.Operation;
import org.yang.services.accountmgr.Group;

public class ServiceConfigurationFormBuilder implements WebControlBuilder
{
   public WebControl build(GenericBean bean) throws Exception
   {
      GroupBean groupBean = (GroupBean)bean;
      Group group = groupBean.getCurrentGroup();
      String appBase = groupBean.getAppBase();
      String codeBase = groupBean.getAppBase() + groupBean.getGuiBase();

      UIForm form = new UIForm();
      form.setCaption("Services");

      ButtonElement save = new ButtonElement();
      if(!"clear".equals(groupBean.getLastActiontype()))
      {
         save.setAction("javascript:validateForm('group_form','updateServices',reqA)");
         save.setName("save");
         save.setOffIcon(codeBase + "/images/English/btn_update.gif");
         save.setOnIcon(codeBase + "/images/English/btn_update_on.gif");
         save.setAlt("Update service configurations");
      }
      else
      {
         save.setAction("javascript:validateForm('group_form','create',reqA)");
         save.setName("save");
         save.setOffIcon(codeBase + "/images/English/btn_create.gif");
         save.setOnIcon(codeBase + "/images/English/btn_create_on.gif");
         save.setAlt("Create a new group");
      }
      form.addAButton(save);

      ButtonElement help = new ButtonElement();
      help.setAction("javascript:top.topFrame.openSWHelpWindow('" + codeBase + "/help/English/help.jsp?right=admin_user.htm#group')");
      help.setName("help");
      help.setOffIcon(codeBase + "/images/English/btn_help.gif");
      help.setOnIcon(codeBase + "/images/English/btn_help_on.gif");
      help.setAlt("Help");
      form.addAButton(help);

      // All selectable service
      ServiceDescriptor[] iServ = groupBean.getAllServiceDescriptors();
      // All selected service
      String[] currentServices = groupBean.getAvailableServiceNames();
      ServiceListElement service = null;
      String servName = null;
      Resource resource = null;
      String[] areas = null;
      AreaElement area = null;
      Operation[] operations = null;
      Set validOps = null;
      OperationElement operation = null;
      for(int k=0; k<iServ.length; k++)
      {
         service = new ServiceListElement();
         servName = iServ[k].getName();
         service.setCaption(servName);
         service.setId(servName);
         service.setIcon(groupBean.calculateURL(iServ[k].getEnviromentParameter("ServiceProperty.Icon")));
         service.setName("serv");
         service.setValue(servName);
         if(contain(currentServices, servName))
            service.setIsChecked(true);
         else
            service.setIsChecked(false);
         service.setIsSingle(false);
         service.setIsConfigurable(true);
         service.setConfigButtonIcon( codeBase +"/images/ico_edit.gif");
         resource = groupBean.getGroupService(servName);
         if(!groupBean.hasArea(servName)||null==resource)
            service.setConfigButtonAction(null);
         else
         {
            service.setConfigButtonAction(appBase + "/service.wf?actiontype=load&gid="+ group.getID() + "&sid=" + servName);
            Map allAreasMap = groupBean.getAllAreasMap(servName);
            areas = resource.getAllAreas();
            Area areaInfo = null;
            for(int i=0; i<areas.length; i++)
            {
               area = new AreaElement();
               area.setName(areas[i]);
               area.setIcon(groupBean.calculateURL(iServ[k].getEnviromentParameter("ServiceProperty.Area.Icon")));
               areaInfo = (Area)allAreasMap.get(areas[i]);
               operations = areaInfo.getAllOperations();
               validOps = groupBean.getOperationsNameSet(servName, areas[i]);
               for(int j=0; j<operations.length; j++)
               {
                  operation = new OperationElement();
                  operation.setName(operations[j].getName());
	          operation.setCheckedIcon(codeBase + "/images/checked.gif");
	          operation.setUncheckedIcon(codeBase + "/images/unchecked.gif");
                  operation.setIsChecked(validOps.contains(operations[j].getName()));
                  area.addASubcontrol(operation);
               }
               service.addASubcontrol(area);
            }
         }
         form.addASubcontrol(service);
      }

      return form;
   }

   private boolean contain(String[] servs, String targetServ)
   {
      for (int i=0; i<servs.length; i++)
      {
         if(targetServ.equals(servs[i]))
            return true;
      }
      return false;
   }
}