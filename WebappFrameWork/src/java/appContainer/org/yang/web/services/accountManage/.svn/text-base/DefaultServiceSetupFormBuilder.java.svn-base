/* Generated by Together */
package org.yang.web.services.accountManage;

import java.util.Iterator;
import org.yang.web.controller.GenericBean;
import org.yang.services.accountmgr.Resource;

import org.yang.web.view.controls.WebControlBuilder;
import org.yang.web.view.controls.WebControl;
import org.yang.web.view.controls.jsStyle.UIForm;
import org.yang.web.view.controls.jsStyle.TextField;
import org.yang.web.view.controls.jsStyle.PassElement;
import org.yang.web.view.controls.jsStyle.SelectElement;
import org.yang.web.view.controls.jsStyle.TextAreaElement;
import org.yang.web.view.controls.jsStyle.ServiceListElement;
import org.yang.web.view.controls.jsStyle.AreaElement;
import org.yang.web.view.controls.jsStyle.OperationElement;
import org.yang.web.view.controls.jsStyle.ButtonElement;
import org.yang.services.servicemgr.ServiceDescriptor;
import org.yang.services.accountmgr.User;

public class DefaultServiceSetupFormBuilder implements WebControlBuilder
{
   public WebControl build(GenericBean bean) throws Exception
   {
      UserBean userBean = (UserBean)bean;
      String codeBase = userBean.getAppBase() + userBean.getGuiBase();
      User user = userBean.getCurrentUser();

      UIForm form = new UIForm();
      form.setCaption("Set Default Page");

      ButtonElement save = new ButtonElement();
      if("clear".equals(userBean.getLastActiontype()))
      {
      	 String userid = userBean.getId();
         save.setAction("javascript:validateForm('user_form','create',reqA,'"+userid+"')");
         save.setName("save");
         save.setOffIcon(codeBase + "/images/English/btn_create.gif");
         save.setOnIcon(codeBase + "/images/English/btn_create_on.gif");
         save.setAlt("Create a new user");
      }
      else
      {
         save.setAction("javascript:validateForm('user_form','update',reqA)");
         save.setName("save");
         save.setOffIcon(codeBase + "/images/English/btn_update.gif");
         save.setOnIcon(codeBase + "/images/English/btn_update_on.gif");
         save.setAlt("Update user default login service");
      }
      form.addAButton(save);

      ButtonElement help = new ButtonElement();
      help.setAction("javascript:top.topFrame.openSWHelpWindow('" + codeBase + "/help/English/help.jsp?right=admin_user.htm#group')");
      help.setName("help");
      help.setOffIcon(codeBase + "/images/English/btn_help.gif");
      help.setOnIcon(codeBase + "/images/English/btn_help_on.gif");
      help.setAlt("Help");
      form.addAButton(help);

      ServiceDescriptor[] iServ = userBean.getAllServiceDescriptors();
      ServiceListElement service = null;
      String servName = null;
      Resource resource = null;
      String[] areas = null;
      AreaElement area = null;
      String[] operations = null;
      OperationElement operation = null;
      for(int k=0; k<iServ.length; k++)
      {
         service = new ServiceListElement();
         servName = iServ[k].getName();
         service.setCaption(servName);
         service.setId(servName);
         service.setIcon(userBean.calculateURL(iServ[k].getEnviromentParameter("ServiceProperty.Icon")));
         service.setName("serv");
         service.setValue(servName);
         if(servName.equals(user.getDefaultService()))
            service.setIsChecked(true);
         else
            service.setIsChecked(false);

         resource = userBean.getUserService(servName);
         if(null!=resource)
         {
            areas = resource.getAllAreas();
            for(int i=0; i<areas.length; i++)
            {
               area = new AreaElement();
               area.setName(areas[i]);
               area.setIcon(userBean.calculateURL(iServ[k].getEnviromentParameter("ServiceProperty.Area.Icon")));
               operations = resource.getOperationsInArea(areas[i]);
               for(int j=0; j<operations.length; j++)
               {
                  operation = new OperationElement();
                  operation.setName(operations[j]);
 		          operation.setCheckedIcon(codeBase + "/images/checked.gif");
                  operation.setUncheckedIcon(codeBase + "/images/unchecked.gif");
                  area.addASubcontrol(operation);
              }
              service.addASubcontrol(area);
           }
         }
         form.addASubcontrol(service);
      }

      return form;
   }

   private boolean hasOperation(String[] opers, String oper)
   {
      for (int i=0; i<opers.length; i++)
      {
         if(oper.equals(opers[i]))
            return true;
      }
      return false;
   }
}