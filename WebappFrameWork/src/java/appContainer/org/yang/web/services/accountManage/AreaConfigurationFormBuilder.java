/* Generated by Together */
package org.yang.web.services.accountManage;

import java.util.Iterator;
import org.yang.web.controller.GenericBean;
import org.yang.services.accountmgr.Resource;

import org.yang.web.view.controls.WebControlBuilder;
import org.yang.web.view.controls.WebControl;
import org.yang.web.view.controls.jsStyle.UIForm;
import org.yang.web.view.controls.jsStyle.TextField;
import org.yang.web.view.controls.jsStyle.PassElement;
import org.yang.web.view.controls.jsStyle.SelectElement;
import org.yang.web.view.controls.jsStyle.TextAreaElement;
import org.yang.web.view.controls.jsStyle.ServiceListElement;
import org.yang.web.view.controls.jsStyle.AreaElement;
import org.yang.web.view.controls.jsStyle.OperationElement;
import org.yang.web.view.controls.jsStyle.ButtonElement;
import java.util.Map;
import org.yang.services.servicemgr.Area;
import org.yang.services.servicemgr.Operation;
import java.util.Set;

public class AreaConfigurationFormBuilder implements WebControlBuilder
{
   public WebControl build(GenericBean bean) throws Exception
   {
      ServiceBean serviceBean = (ServiceBean)bean;
      String codeBase = serviceBean.getAppBase() + serviceBean.getGuiBase();
      UIForm form = new UIForm();
      form.setCaption("Operations");

      ButtonElement save = new ButtonElement();
      save.setAction("javascript:submitForm('service_form','updateOperations')");
      //save.setAction("javascript:submitForm('service_form','selectAreas')");
      save.setName("save");
      save.setOffIcon(codeBase + "/images/English/btn_save.gif");
      save.setOnIcon(codeBase + "/images/English/btn_save_on.gif");
      save.setAlt("Save change for operations");
      form.addAButton(save);

      ButtonElement help = new ButtonElement();
      help.setAction("javascript:top.topFrame.openSWHelpWindow('" + codeBase + "/help/English/help.jsp?right=admin_user.htm#group')");
      help.setName("help");
      help.setOffIcon(codeBase + "/images/English/btn_help.gif");
      help.setOnIcon(codeBase + "/images/English/btn_help_on.gif");
      help.setAlt("Help");
      form.addAButton(help);

      String[] areas = serviceBean.getAreas();
      Map allAreasMap = serviceBean.getAllAreasMap();
//System.out.println("------------------>5 allAreasMap.size()="+allAreasMap.size());
      ServiceListElement service = null;
      AreaElement area = null;
      OperationElement operation = null;
      Area areaInfo = null;
      Operation[] operations = null;
      Set validOps = null;
      for(int i=0; i<areas.length; i++)
      {
         area = new AreaElement();
         area.setName(areas[i]);
         area.setIcon(codeBase + "/images/serv_report.gif");
//System.out.println("------------------>5.5 areas["+i+"]="+areas[i]);
         areaInfo = (Area)allAreasMap.get(areas[i]);
         operations = areaInfo.getAllOperations();
         validOps = serviceBean.getOperationsNameSet(areas[i]);
         for(int j=0; j<operations.length; j++)
         {
            operation = new OperationElement();
            operation.setName(operations[j].getName());
            operation.setAreaname("operationMap_" + areas[i]);
            operation.setCheckedIcon(codeBase + "/images/checked.gif");
            operation.setUncheckedIcon(codeBase + "/images/unchecked.gif");
            operation.setIsReadOnly(false);
            operation.setIsChecked(validOps.contains(operations[j].getName()));
            area.addASubcontrol(operation);
         }
         form.addASubcontrol(area);
      }

      return form;
   }

   private boolean contain(String[] servs, String targetServ)
   {
      for (int i=0; i<servs.length; i++)
      {
         if(targetServ.equals(servs[i]))
            return true;
      }
      return false;
   }
}