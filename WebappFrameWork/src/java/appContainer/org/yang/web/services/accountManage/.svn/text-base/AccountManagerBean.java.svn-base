/* Generated by Together */

package org.yang.web.services.accountManage;

import java.util.Properties;
import java.util.Collection;
import java.util.Iterator;

import org.yang.web.applicationContainer.SecuredBean;
import org.yang.web.applicationContainer.Passport;

import org.yang.services.accountmgr.Group;
import org.yang.services.accountmgr.User;
import org.yang.services.accountmgr.UserManager;
import org.yang.web.view.controls.jsStyle.navigationTree.NavigationTree;
import org.yang.services.accountmgr.AccountDataAccessException;
import org.yang.services.servicemgr.Area;
import java.util.Map;
import org.yang.services.servicemgr.Service;

public class AccountManagerBean extends AccountBean
{
   static final long serialVersionUID = 4711296382979764916L;

   private static int OPEN_NODE = 0;
   private static int CLOSE_NODE = 1;

   private int event = 0;
   public int getEvent() { return event; }

   private String targetID = null;
   public void setTargetID(String targetID) { this.targetID = targetID; }
   public String getTargetID() { return targetID; }

   public AccountManagerBean()
   {
      super();
   }

   /*************************************
    *  Implement NavigationTree method  *
    *************************************/

   public String getDomain()
   {
      return passport.getDomain();
   }

   public Collection getAllUsers() throws AccountDataAccessException
   {
       return userMgr.getAllUsers();
   }

   public Collection getAllGroups() throws AccountDataAccessException
   {
      return userMgr.getAllGroups();
   }

   public Collection getUsersByGID(String gid) throws AccountDataAccessException
   {
      return userMgr.getUsersByGID(gid);
   }

   public Collection getResourceIDSByGID(String gid) throws AccountDataAccessException
   {
      return userMgr.getResourceIDSByGID(gid);
   }

   public boolean hasArea(String sid) throws AccountDataAccessException
   {
      //Area[] temp = passport.loadService(sid).allAreas();
      //return (!(null==temp)&&(0!=temp.length));
      Area[] temp = null;
      Service service = null;
      if(null!=(service=passport.loadService(sid)))
      {
         temp = service.allAreas();
      }
      return (!(null==temp)&&(0!=temp.length));
   }

   public Map getAllServiceDescriptorsMap() throws AccountDataAccessException
   {
      return passport.getAllServiceDescriptorsMap();
   }

   /***************************************
    *  Implement GenericHandler's method  *
    ***************************************/
   protected void init() throws Exception
   {
      ensureResource();

      if(null==userMgr)
         throw new Exception("User manager is null.");
   }

   protected void destroy()
   {
      userMgr = null;
   }

   /***************************************
    *           my action method          *
    ***************************************/

   public void load()
   {
      removeControl("accountTree");
   }

   public void open()
   {
      NavigationTree tree = (NavigationTree)getControl("accountTree");
      tree.openNode(targetID);
   }

   public void close()
   {
      NavigationTree tree = (NavigationTree)getControl("accountTree");
      tree.closeNode(targetID);
   }
}