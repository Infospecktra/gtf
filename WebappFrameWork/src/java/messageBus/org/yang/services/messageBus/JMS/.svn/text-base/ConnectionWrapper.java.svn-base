/* Generated by Together */

package org.yang.services.messageBus.JMS;

import javax.jms.ExceptionListener;
import javax.jms.Connection;
import java.util.HashMap;
import org.apache.log4j.Category;
import javax.jms.JMSException;
import javax.jms.Session;
import javax.naming.NamingException;
import org.yang.services.messageBus.InitException;
import java.util.Collection;
import java.util.Iterator;
import java.util.ArrayList;
import java.util.Hashtable;

abstract public class ConnectionWrapper implements ExceptionListener
{
   static final long serialVersionUID = 3439536523980252199L;
   static final String SHARED_SESSION = "shared_session";

   protected String userID = null;
   protected String userPasswd = null;
   protected String factoryJNDI = null;
   protected Hashtable jndi_Props = null;

   protected Connection conn      = null;
   protected HashMap listeners = null;
   protected HashMap sessions = null;

   protected transient Category log = null;

   private String id = null;
   public String getId(){ return id; }

   public ConnectionWrapper(JMSAdaptor adaptor)
   {
      log = Category.getInstance(this.getClass());

      id = adaptor.getConnUID();

      if(!adaptor.isProvider())
      {
         userID = adaptor.getUserID();
         userPasswd = adaptor.getUserPasswd();
      }
      factoryJNDI = adaptor.getFactoryJNDI();
      jndi_Props = adaptor.getJndi_Props();

      listeners = new HashMap();
      sessions = new HashMap();
   }

   abstract public boolean resumeConnection();

   abstract public Session getSession(boolean shareSession, String id);

   public static ConnectionWrapper createConnectionWrapper(JMSAdaptor adaptor) throws javax.jms.JMSException
   {
      if(adaptor instanceof JMSTopicAdaptor)
         return new TopicConnectionWrapper(adaptor);
      else if (adaptor instanceof JMSQueueAdaptor)
         return new QueueConnectionWrapper(adaptor);
      return null;
   }

   public void setConnection(Connection conn) throws JMSException
   {
      this.conn = conn;
      conn.setExceptionListener(this);
      conn.start();
   }

   public Connection getConnection()
   {
      return conn;
   }

   public void registerListener(String id, JMSAdaptor adaptor)
   {
      listeners.put(id, adaptor);
   }

   public void closeSession(String id)
   {
      Session session = null;
      if(null!=(session=((Session)sessions.remove(id))))
      {
         try
         {
            session.close();
         }
         catch(Exception e)
         {
            //e.printStackTrace();
            System.out.println("[ConnectionWrapper::closeSession] Exception happen when closing session: " + e.getMessage());
         }
      }
   }

   public void destory()
   {
      	
   }

   public int size()
   {
      return listeners.size();
   }

   public boolean isEmpty()
   {
      return listeners.isEmpty();
   }

   public void onException(JMSException jmse)
   {
      System.out.println("[ConnectionWrapper::onException] Connection was broken : " + jmse.getMessage());
      System.out.println("[ConnectionWrapper::onException] Close current connection.");

      try
      {
         conn.close();
      }
      catch(Exception e)
      {
         System.out.println("[ConnectionWrapper::onException] Exception happen when closing connection : " + e.getMessage());
      }

      System.out.println("[ConnectionWrapper::onException] Trying to resume connection.");

      int count = 0;
      while(!resumeConnection())
      {
         System.out.println("[ConnectionWrapper::onException] Reconnect for " + id + ", count:" + count);
         try
         {
            Thread.currentThread().sleep(10000);
         }
         catch(Exception e)
         {
            log.warn("Error while I'm sleeping. ", e);
         }
         count++;
      }

      synchronized(this)
      {
         sessions.clear();
         Iterator it = listeners.keySet().iterator();
         ArrayList list = new ArrayList();
         String adaptorID = null;
         while(it.hasNext())
         {
            count = 0;
            while(true)
            {
               try
               {
                  adaptorID = (String)it.next();
                  System.out.println("[ConnectionWrapper::onException] Reconnect for " + adaptorID + ", count:" + count);
                  ((JMSAdaptor)listeners.get(adaptorID)).resume();
                  break;
               }
               catch(Exception ne)
               {
                  count++;
                  try
                  {
                     Thread.currentThread().sleep(10000);
                  }
                  catch(Exception e)
                  {
                     log.warn("Error while I'm sleeping. ", e);
                  }
               }
            }
         }
      }
      
      System.out.println("[ConnectionWrapper::onException] Resume connection done.");
   }

   public String toString()
   {
      StringBuffer sb = null;
      try
      {
         sb = new StringBuffer("Conection client id:"+conn.getClientID());
         sb.append("\n");
         sb.append("Conection reference:"+conn);
      }
      catch(Exception e)
      {
         sb = new StringBuffer("Conection client id:Unable to get clint id for Connection");
      }

      sb.append("\n");
      Iterator it = listeners.values().iterator();
      while(it.hasNext())
      {
         sb.append("   Connection Listener:").append(((JMSAdaptor)it.next()).getId()).append("\n");
      }

      sb.append("\n");
      it = sessions.keySet().iterator();
      String sid = null;
      while(it.hasNext())
      {
         sid = (String)it.next();
         sb.append("   Session: id = ").append(sid)
           .append(", ref = ").append(sessions.get(sid)).append("\n");
      }

      return sb.toString();
   }
}