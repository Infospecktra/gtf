/* Generated by Together */

package org.yang.services.messageBus.IMS;

import java.util.HashMap;
import java.util.Properties;
import java.io.Serializable;
import java.io.IOException;
import org.yang.services.messageBus.MessageReceiver;
import org.yang.services.messageBus.Message;
import org.yang.services.messageBus.MessageTransmitter;
import org.yang.services.messageBus.Route;
import org.yang.services.messageBus.MessageTransmitException;
import java.io.ByteArrayOutputStream;
import java.io.ObjectOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ObjectInputStream;

final public class IMSTransmitterImpl implements MessageTransmitter
{
   private static final long serialVersionUID = 3439536522284252000L;
   private HashMap myReceiver = null;
   private Route route = null;
   private int count = 0;
   private boolean passByReference = false;

   public IMSTransmitterImpl(Route route)
   {
      this.route = route;
      passByReference = Boolean.valueOf(route.getProperty("passByReference", new Boolean(passByReference).toString()))
                               .booleanValue();
   }

   public void transmit(Message msg) throws MessageTransmitException
   {
      try
      {
         if(!passByReference)
            msg.setPayload(deepClone(msg.getPayload()));
         IMS.getInstance().sendMessage(route.getName(), msg);
         count++;
      }
      catch(MessageTransmitException mte)
      {
         throw mte;
      }
      catch(Exception e)
      {
         throw new MessageTransmitException("Unable to send message to receiver " + route.getReceiver() + " :" + e.getMessage());
      }
   }

   public int getMessageCount()
   {
      return count;
   }

   private Serializable deepClone(Serializable payload) throws Exception
   {
      if(null==payload || payload instanceof String)
         return payload;
      ByteArrayOutputStream baos = new ByteArrayOutputStream();
      ObjectOutputStream oos = new ObjectOutputStream(baos);
      oos.writeObject(payload);
      ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(baos.toByteArray()));
      return (Serializable)ois.readObject();
   }
}