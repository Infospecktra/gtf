/* Generated by Together */

package org.yang.services.messageBus;

import org.yang.services.messageBus.FileSystem.FileMessageTransmitterImpl;
import org.yang.services.messageBus.JMS.*;
import org.yang.services.messageBus.FileSystem.*;
import org.yang.services.messageBus.IMS.IMSTransmitterImpl;
import org.yang.services.messageBus.IMS.IMSReceiverImpl;
import java.util.HashMap;

abstract public class MessageTrancieverFactory
{
   private static HashMap myFactorys = new HashMap();

   public static MessageTrancieverFactory getFactory(String classname)
   {
      MessageTrancieverFactory temp = null;
      if(null==(temp=(MessageTrancieverFactory)myFactorys.get(classname)))
      {
         synchronized(myFactorys)
         {
            if(null==(temp=(MessageTrancieverFactory)myFactorys.get(classname)))
            {
               temp = loadFactory(classname);
               myFactorys.put(classname, temp);
            }
         }
      }
      return temp;
   }

   abstract public boolean createRoute(Route rt);

   abstract public boolean deleteRoute(Route rt);

   abstract public MessageTransmitter createTransmitter(Route rt) throws InitException;

   abstract public MessageReceiver createReceiver(String hostName, String id, Route rt, MessageReceiver receiver) throws InitException;

   private static MessageTrancieverFactory loadFactory(String name)
   {
      Object obj = null;
      try
      {
         obj = Class.forName(name).newInstance();
      }
      catch(Exception e)
      {
         e.printStackTrace();
      }

      return (MessageTrancieverFactory)obj;
   }
}