/* Generated by Together */

package org.yang.services.messageBus.JMS;

import org.yang.services.messageBus.FileSystem.FileMessageTransmitterImpl;
import org.yang.services.messageBus.FileSystem.*;
import org.yang.services.messageBus.IMS.IMSTransmitterImpl;
import org.yang.services.messageBus.IMS.IMSReceiverImpl;
import org.yang.services.messageBus.Route;
import org.yang.services.messageBus.MessageTransmitter;
import org.yang.services.messageBus.InitException;
import org.yang.services.messageBus.MessageReceiver;
import org.yang.services.messageBus.MessageTrancieverFactory;
//import org.yang.services.jboss.messageBus.JMS.JBossMQAdmin;

public class JMSTrancieverFactoryImpl extends MessageTrancieverFactory
{
   //JBossMQAdmin admin = null;

   public JMSTrancieverFactoryImpl()
   {
      //admin = new JBossMQAdmin();
   }

   public boolean createRoute(Route rt)
   {
      String type = rt.getType();
      try
      {
         if("JMS Topic".equals(type))
         {
            //admin.createQueue(rt.getProperty(JMSTopicAdaptor.TOPIC_NAME));
            return true;
         }
         else if("JMS Queue".equals(type))
         {
            //admin.createTopic(rt.getProperty(JMSQueueAdaptor.QUEUE_NAME));
            return true;
         }
         else
         {
            return false;
         }
      }
      catch(Exception e)
      {
         return false;
      }
   }

   public boolean deleteRoute(Route rt)
   {
      String type = rt.getType();
      try
      {
         if("JMS Topic".equals(type))
         {
            //admin.deleteQueue(rt.getProperty(JMSTopicAdaptor.TOPIC_NAME));
            return true;
         }
         else if("JMS Queue".equals(type))
         {
            //admin.deleteTopic(rt.getProperty(JMSQueueAdaptor.QUEUE_NAME));
            return true;
         }
         else
         {
            return false;
         }
      }
      catch(Exception e)
      {
         return false;
      }
   }

   public MessageTransmitter createTransmitter(Route rt) throws InitException
   {
      boolean isTopic = true;

      String type = rt.getType();
      if(-1!=type.indexOf("-q"))
         isTopic = false;
      try
      {
         if(isTopic)
         {
            return new JMSTopicMessageTransmitterImpl(rt);
         }
         else
         {
            return new JMSQueueMessageTransmitterImpl(rt);
         }
      }
      catch(Exception e)
      {
         throw new InitException(e.getMessage());
      }
   }

   public MessageReceiver createReceiver(String hostName, String id, Route rt, MessageReceiver receiver) throws InitException
   {
      boolean isTopic = true;
      boolean isListener = true;
      boolean isDurable = true;

      String type = rt.getType();
      if(-1!=type.indexOf("-q"))
         isTopic = false;

      if(-1!=type.indexOf("-g"))
         isListener = false;

      if(-1==type.indexOf("-d"))
         isDurable = false;

System.out.println("[JMSTrancieverFactoryImpl::createReceiver] isTopic=" + isTopic + ", isListener=" + isListener + ", isDurable=" + isDurable);

      try
      {
         rt.getProperties().setProperty(JMSAdaptor.CLIENT_ID, hostName);
         if(isTopic)
         {
            try
            {
               if(isListener)
                  return new JMSTopicMessageReceiverImpl(id, rt, receiver, isDurable);
               else
                  return new JMSTopicMessageReceiverImpl(id, rt, null, isDurable);
            }
            catch(Exception e)
            {
               throw new InitException("Unable to create message receiver due to naming look up:" + e.getMessage());
            }
         }
         else
         {
            try
            {
               if(isListener)
                  return new JMSQueueMessageReceiverImpl(id, rt, receiver);
               else
                  return new JMSQueueMessageReceiverImpl(id, rt, null);
            }
            catch(Exception e)
            {
               throw new InitException("Unable to create message receiver due to naming look up!");
            }
         }
      }
      catch(Exception e)
      {
         throw new InitException(e.getMessage());
      }
   }
}