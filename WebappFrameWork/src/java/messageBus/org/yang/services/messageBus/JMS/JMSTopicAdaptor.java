/* Generated by Together */

package org.yang.services.messageBus.JMS;
import org.apache.log4j.Category;
import javax.jms.TopicSubscriber;
import java.util.Properties;
import org.yang.services.messageBus.InitException;
import java.util.Hashtable;
import javax.naming.Context;
import javax.jms.Session;
import javax.naming.NamingException;
import javax.jms.MessageListener;
import javax.jms.JMSException;
import javax.jms.TopicPublisher;
import javax.jms.TopicSession;
import javax.jms.Topic;

public abstract class JMSTopicAdaptor extends JMSAdaptor
{
   static final long serialVersionUID = 3439536781444252199L;

   private ConnectionManager connMgr = null;
   private String topicName = null;

   public JMSTopicAdaptor(Properties prop) throws InitException
   {
      super(prop);
      try
      {
         connMgr = ConnectionManager.getInstance();
         topicName = prop.getProperty(TOPIC_NAME, "");
         System.out.println("[JMSTopicAdaptor] Tipic name   : " + topicName);
      }
      catch(Exception e)
      {
         throw new InitException("JMSTopicAdaptor : " + e.getMessage());
      }
   }

   /************************************
    *  Implements method in JMSAdaptor *
    ************************************/

   public void closeSession() throws JMSException
   {
      closeSession(false);
   }

   /************************************
    *  My new defined protected method *
    ************************************/

   protected Session getSession() throws NamingException, JMSException
   {
      return connMgr.getSession(this);
   }

   protected void closeSession(boolean unregisterListener) throws JMSException
   {
      connMgr.closeSession(this);
   }

   protected void subscribe(String subscribeID, MessageListener ml, boolean isDurable) throws NamingException
   {
      try
      {
         System.out.println("[JMSTopicAdaptor::subscribe] Subscribe topic: " + topicName +" by using id: " + subscribeID);
         if(isDurable)
            ((TopicSession)getSession()).createDurableSubscriber((Topic)JMSHelper.jndiLookUp(topicName, jndi_props), subscribeID)
                                        .setMessageListener(ml);
         else
            ((TopicSession)getSession()).createSubscriber((Topic)JMSHelper.jndiLookUp(topicName, jndi_props))
                                        .setMessageListener(ml);
      }
      catch(NamingException ne)
      {
         throw ne;
      }
      catch(Exception e)
      {
         log.error(e);
      }
   }

   protected TopicSubscriber prepareSubscriber(String subscribeID, boolean isDurable) throws NamingException, JMSException
   {
      System.out.println("[JMSTopicAdaptor::prepareSubscriber] Subscribe topic: " + topicName +" by using id: " + subscribeID);
      if(isDurable)
         return ((TopicSession)getSession()).createDurableSubscriber((Topic)JMSHelper.jndiLookUp(topicName, jndi_props), subscribeID);
      else
         return ((TopicSession)getSession()).createSubscriber((Topic)JMSHelper.jndiLookUp(topicName, jndi_props));
   }

   protected TopicPublisher preparePublisher() throws NamingException, JMSException
   {
      System.out.println("[JMSTopicAdaptor::preparePublisher] Prepare publisher for : " + topicName );
      return ((TopicSession)getSession()).createPublisher((Topic)JMSHelper.jndiLookUp(topicName, jndi_props));
   }

   /*********************************
    *  My new defined public method *
    *********************************/

   public void closeConnection()
   {

   }

   /**********************
    *  My private method *
    **********************/
}