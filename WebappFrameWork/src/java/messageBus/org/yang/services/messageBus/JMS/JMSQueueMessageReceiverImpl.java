/* Generated by Together */

package org.yang.services.messageBus.JMS;

import javax.jms.MessageListener;
import org.yang.services.messageBus.Route;
import java.io.StringReader;
import javax.xml.parsers.SAXParserFactory;
import javax.xml.parsers.SAXParser;
import java.io.FileWriter;
import java.util.Date;
import javax.naming.NamingException;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import org.yang.services.messageBus.MessageReceiver;
import org.yang.services.messageBus.InitException;
import org.yang.services.messageBus.MessageBus;
import javax.jms.TopicSubscriber;
import org.yang.services.messageBus.Message;
import java.io.Serializable;
import javax.jms.QueueReceiver;
import org.apache.log4j.Category;
import org.yang.services.messageBus.DataReceivingException;

public class JMSQueueMessageReceiverImpl extends JMSQueueAdaptor implements  MessageListener, MessageReceiver
{
   static final long serialVersionUID = 3439536529228252199L;

   private int count = 0;

   private String site = null;
   public void setSite(String site) { this.site=site; }
   public String getSite() { return site; }

   private String channel = null;
   public void setChannel(String channel) { this.channel=channel; }
   public String getChannel() { return channel; }

   MessageReceiver realReceiver = null;
   public void setRealReceiver(MessageReceiver receiver) { this.realReceiver = realReceiver; }

   MessageReceiver receiver = null;
   QueueReceiver qReceiver = null;

   public JMSQueueMessageReceiverImpl(String id, Route rt, MessageReceiver receiver) throws NamingException, InitException
   {
      super(rt.getProperties());
      this.receiver = receiver;
      setId(id);
      initialize();
   }

   /************************************
    *  Implements method in JMSAdaptor *
    ************************************/

   public void resume() throws NamingException, InitException
   {
      initialize();
   }

   /*****************************************
    *  Implements method in JMSTopicAdaptor *
    *****************************************/

   public boolean isProvider()
   {
      return false;
   }

   /*****************************************
    *  Implements method in MessageReceiver *
    *****************************************/

   public void closeSession(boolean unregisterListener)
   {
      try
      {
         super.closeSession(unregisterListener);
      } catch(Exception e) { e.printStackTrace(); }
   }

   public void onMessage(Message msg)
   {
      receiver.onMessage(msg);
   }

   public Message getMessage(long timeout) throws DataReceivingException
   {
      try
      {
         log.debug("[getMessage] Check message from queue : my id = " + getId());
         Message msg = convertMessage(qReceiver.receive(timeout));
         if(null!=msg)
            count++;
         return msg;
      }
      catch(Exception e)
      {
         log.error("Unable to receive message. ", e);
         throw new DataReceivingException(e.getMessage());
      }
   }

   public Message getMessage()
   {
      try
      {
         log.debug("[getMessage] Check message from queue : my id = " + getId());
         Message msg = convertMessage(qReceiver.receive());
         if(null!=msg)
            count++;
         return msg;
      }
      catch(Exception e)
      {
         log.error("Unable to receive message. ", e);
         return null;
      }
   }

   /*****************************************
    *  Implements method in MessageListener *
    *****************************************/

   public void onMessage(javax.jms.Message message)
   {
      // Convert JMS message to GH Message
      count++;
      Message msg = null;
      if(null!=(msg=convertMessage(message)))
         onMessage(msg);
   }

   public int getMessageCount()
   {
      return count;
   }

   /***********************
    *  My private method  *
    ***********************/

   private void initialize() throws NamingException, InitException
   {
      try
      {
         if(null!=receiver)
         {
            subscribe(getId(), this);
         }
         else
         {
            qReceiver = prepareReceiver(getId());
         }
      }
      catch(NamingException ne)
      {
         throw ne;
      }
      catch(Exception e)
      {
         throw new InitException("Unable to initialize message receiver : " + e.getMessage());
      }
   }

   private void writeObject(ObjectOutputStream out) throws IOException
   {
      // nothing wanna to do
   }

   private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException
   {
      log = Category.getInstance(this.getClass());
   }

   private Message convertMessage(javax.jms.Message message)
   {
      Message msg = MessageBus.createMessage();
      try
      {
         Serializable inputMsg = ((javax.jms.ObjectMessage)message).getObject();
         if(null==inputMsg)
         {
            log.info("[onMessage] Null or Empty message, Skip this message!");
            return null;
         }

         msg.setPayload(inputMsg);
      }
      catch(Exception e)
      {
         e.printStackTrace();
         log.error("[onMessage] Exception happen when reveiving message from topic.");
      }
      
      return msg;
   }
}
