/* Generated by Together */

package org.yang.services.messageBus.JMS;

import javax.jms.TopicPublisher;
import javax.jms.TextMessage;
import javax.jms.JMSException;
import javax.naming.NamingException;
import org.yang.services.messageBus.MessageTransmitter;
import org.yang.services.messageBus.Route;
import org.yang.services.messageBus.InitException;
import org.yang.services.messageBus.Message;
import org.yang.services.messageBus.MessageTransmitException;
import javax.jms.ObjectMessage;
import java.io.Serializable;
import javax.jms.Session;

public class JMSTopicMessageTransmitterImpl extends JMSTopicAdaptor implements MessageTransmitter
{
   static final long serialVersionUID = 3439536524264252199L;

   private int count = 0;
   private Session session = null;
   private TopicPublisher publisher = null;

   private String channel = null;
   public void setChannel(String channel) { this.channel=channel; }
   public String getChannel() { return channel; }

   public JMSTopicMessageTransmitterImpl(Route rt) throws InitException
   {
      super(rt.getProperties());
      setId(rt.getName());
   }

   /************************************
    *  Implements method in JMSAdaptor *
    ************************************/

   public void resume() throws NamingException, InitException
   {
      session = null;
      publisher = null;
   }

   /************************************
    *  Implements method in JMSAdaptor *
    ************************************/

   public boolean isProvider()
   {
      return true;
   }

   /********************************************
    *  Implements method in MessageTransmitter *
    ********************************************/

   public void transmit(Message msg) throws MessageTransmitException
   {
      try
      {
         Serializable payload = msg.getPayload();
         if(null==payload)
            throw new NullPointerException("Null message payload.");

         if(null==session)
            session = super.getSession();
         javax.jms.Message jmsMsg = null;
         if(payload instanceof String)
         {
            //System.out.println("[JMSTopicMessageTransmitterImpl::transmit] Send a text message start.");
            jmsMsg = session.createTextMessage((String)payload);
         }
         else
         {
            //System.out.println("[JMSTopicMessageTransmitterImpl::transmit] Send a Object message start.");
            jmsMsg = session.createObjectMessage(msg.getPayload());
         }

         jmsMsg.setStringProperty(Message.SOURCE_ENGINE, msg.getSourceEngine());
         jmsMsg.setStringProperty(Message.SENDER, msg.getSender());
         jmsMsg.setStringProperty(Message.DESTINATION_ENGINE, msg.getDestinationEngine());
         jmsMsg.setStringProperty(Message.RECEIVER, msg.getReceiver());
         jmsMsg.setStringProperty(Message.ROUTE, msg.getRoute());
         jmsMsg.setStringProperty(Message.REPLY_ROUTE, msg.getReplyRoute());

         if(null==publisher)
            publisher = preparePublisher();
         publisher.publish(jmsMsg);
         count++;
      }
      catch(Exception e)
      {
         System.out.println("[JMSTopicMessageTransmitterImpl::transmit] Exception happen, set publisher to null.");
         publisher = null;
         session = null;
         throw new MessageTransmitException(e.getMessage());
      }
   }

   public int getMessageCount()
   {
      return count;
   }
}