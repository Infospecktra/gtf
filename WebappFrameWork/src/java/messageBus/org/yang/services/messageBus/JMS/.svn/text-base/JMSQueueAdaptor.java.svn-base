/* Generated by Together */

package org.yang.services.messageBus.JMS;

import java.io.InputStreamReader;
import java.util.Hashtable;
import java.util.Properties;
import javax.naming.Context;
import javax.jms.TopicConnection;
import javax.jms.TopicConnectionFactory;
import javax.jms.TopicSession;
import javax.jms.Topic;
import javax.jms.TopicSubscriber;
import javax.jms.TextMessage;
import javax.jms.Session;
import javax.jms.JMSException;
import javax.jms.MessageListener;
import javax.jms.TopicPublisher;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import java.util.Iterator;
import javax.jms.ExceptionListener;
import javax.jms.Connection;
import javax.jms.Destination;
import javax.jms.TopicRequestor;
import javax.jms.Message;
import org.yang.services.messageBus.InitException;
import javax.jms.QueueConnection;
import javax.jms.Queue;
import javax.jms.QueueConnectionFactory;
import javax.jms.QueueSender;
import javax.jms.QueueReceiver;
import javax.jms.QueueSession;
import org.apache.log4j.Category;

public abstract class JMSQueueAdaptor extends JMSAdaptor
{
   static final long serialVersionUID = 3439536781444252199L;

   private static ConnectionManager connMgr = null;
   private QueueReceiver   receiver        = null;
   private String          queueName       = null;

   public JMSQueueAdaptor(Properties prop) throws InitException
   {
      super(prop);
      try
      {
         connMgr = ConnectionManager.getInstance();
         queueName      = prop.getProperty(QUEUE_NAME, "");
         System.out.println("[JMSAdaptor] Queue name   : " + queueName);
      }
      catch(Exception e)
      {
         throw new InitException("JMSAdapter : " + e.getMessage());	
      }
   }

   /************************************
    *  Implements method in JMSAdaptor *
    ************************************/

   public void closeSession() throws JMSException
   {
      closeSession(false);
   }

   /************************************
    *  My new defined protected method *
    ************************************/

   abstract public boolean isProvider();

   public Session getSession() throws NamingException, JMSException
   {
      return connMgr.getSession(this);
   }

   public void closeSession(boolean unregisterListener)throws JMSException
   {
      try
      {
         connMgr.closeSession(this);
         log.debug("[closeSession] Topic session closed. ");
      }
      catch(Exception e)
      {
         log.error("[closeSession] Exception happen when closing queue session. ");
      }
   }

   protected void subscribe(String subscribeID, MessageListener ml) throws NamingException
   {
      try
      {
         log.debug("[subscribe] Subscribe topic: " + queueName +" by using id: " + subscribeID);
         ((QueueSession)getSession()).createReceiver((Queue)JMSHelper.jndiLookUp(queueName, jndi_props), subscribeID)
                                     .setMessageListener(ml);
      }
      catch(Exception e)
      {
         //e.printStackTrace();
         log.error(e);
      }
   }

   protected QueueReceiver prepareReceiver(String subscribeID) throws NamingException, JMSException
   {
      return ((QueueSession)getSession()).createReceiver((Queue)JMSHelper.jndiLookUp(queueName, jndi_props));
   }

   protected QueueSender prepareSender() throws NamingException, JMSException
   {
      log.debug("[preparePublisher] Prepare publisher for : " + queueName );
      return ((QueueSession)getSession()).createSender((Queue)JMSHelper.jndiLookUp(queueName, jndi_props));
   }

   /*********************************
    *  My new defined public method *
    *********************************/

   public void closeConnection()
   {

   }
}