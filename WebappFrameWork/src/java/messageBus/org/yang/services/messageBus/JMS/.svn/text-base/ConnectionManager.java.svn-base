/* Generated by Together */

package org.yang.services.messageBus.JMS;

import javax.jms.Connection;
import java.util.HashMap;
import javax.naming.NamingException;
import org.yang.services.messageBus.InitException;
import java.util.Iterator;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.jms.JMSException;
import javax.jms.TopicConnectionFactory;
import java.util.Hashtable;
import javax.jms.Session;

public class ConnectionManager implements Runnable
{
    public static final long serialVersionUID = 3439536529440052199L;
    private static Object lock = new Object();
    private static ConnectionManager myInstance = null;

    private Context jndiContext = null;
    private HashMap connections = null;

    private ConnectionManager()
    {
       connections = new HashMap();
       (new Thread(this)).start();
    }

    public static ConnectionManager getInstance()
    {
       if(null==myInstance)
       {
          synchronized(lock)
          {
             if(null==myInstance)
             {
                myInstance = new ConnectionManager();
             }
          }
       }

       return myInstance;
    }

    public Session getSession(JMSAdaptor adaptor) throws javax.jms.JMSException
    {
       return getConnectionWrapper(adaptor).getSession(adaptor.isProvider(), adaptor.getId());
    }

    public void closeSession(JMSAdaptor adaptor) throws javax.jms.JMSException
    {
       getConnectionWrapper(adaptor).closeSession(adaptor.getId());
    }

    private ConnectionWrapper getConnectionWrapper(JMSAdaptor adaptor) throws javax.jms.JMSException
    {
       ConnectionWrapper connection = null;
       System.out.println("[ConnectionManager::getConnectionWrapper] client adaptor connection uid : " + adaptor.getConnUID());
       if(null==(connection=(ConnectionWrapper)connections.get(adaptor.getConnUID())))
       {
          connection = ConnectionWrapper.createConnectionWrapper(adaptor);
          connections.put(adaptor.getConnUID(), connection);
          System.out.println("[ConnectionManager::getConnectionWrapper] New connection : " + connection);
       }
       else
       {
          System.out.println("[ConnectionManager::getConnectionWrapper] Reuse connection : " + connection);
       }

       if(!connections.keySet().contains(adaptor.getId()))
          connection.registerListener(adaptor.getId(), adaptor);
       return connection;
    }

    public String toString()
    {
       StringBuffer sb = new StringBuffer();
       Iterator it = connections.values().iterator();
       while(it.hasNext())
       {
          sb.append(it.next()).append("\n");
       }
       return sb.toString();
    }

    public void run()
    {
       while(true)
       {
          try
          {
             System.out.println("[ConnectionManager::run] ============================================== ");
             System.out.println(this);
             System.out.println("[ConnectionManager::run] ============================================== ");
             Thread.sleep(120000);
          } catch(Exception e) {}
       }
    }
}