/* Generated by Together */

package org.yang.services.messageBus.IMS;

import java.util.HashMap;
import java.util.Properties;
import java.io.Serializable;
import java.io.IOException;
import org.yang.services.messageBus.MessageReceiver;
import org.yang.services.messageBus.Message;
import org.yang.services.messageBus.MessageTransmitter;
import org.yang.services.messageBus.Route;
import org.yang.services.messageBus.MessageTransmitException;
import org.yang.services.messageBus.DataReceivingException;

final public class IMSReceiverImpl implements MessageReceiver, Runnable
{
   private MessageReceiver receiver = null;
   private IMS myIMS = IMS.getInstance();
   private Thread myThread = null;
   private String rtName = null;
   private int count = 0;
   private boolean quit = false;

   public IMSReceiverImpl(String id, Route rt, MessageReceiver receiver)
   {
      rtName = rt.getName();
      this.receiver = receiver;
      myIMS.setReceiver(rtName, this);
   }

   private String site = null;
   public void setSite(String site) { this.site=site; }
   public String getSite() { return site; }

   private String channel = null;
   public void setChannel(String channel) { this.channel=channel; }
   public String getChannel() { return channel; }

   private boolean isSync = false;
   public void setIsSync(boolean isSync) { this.isSync=isSync; }
   public boolean getIsSync() { return isSync; }

   MessageReceiver realReceiver = null;
   public void setRealReceiver(MessageReceiver receiver) { this.realReceiver = realReceiver; }

   public void onMessage(Message msg)
   {
      receiver.onMessage(msg);
   }

   public Message getMessage(long timeout) throws DataReceivingException
   {
      Message msg = myIMS.getMessage(rtName, timeout);
      if(null!=msg)
         count++;
      return msg;
   }

   public Message getMessage() throws DataReceivingException
   {
      Message msg = myIMS.getMessage(rtName);
      if(null!=msg)
         count++;
      return msg;
   }

   public void closeSession(boolean b)
   {
      System.out.println("[IMSReceiverImpl::closeSession] Before closing IMS session." + rtName);
      stop();
      myIMS.removeReceiver(rtName);
      System.out.println("[IMSReceiverImpl::closeSession] After closing IMS session." + rtName);
   }

   public int getMessageCount()
   {
      return count;
   }

   public void run()
   {
      System.out.println("[IMSReceiverImpl::run] Receiver start successfully :" + rtName);
      while(!quit)
      {
         try
         {
            onMessage(getMessage());
         }
         catch(Exception e)
         {
            System.out.println("[IMSReceiverImpl::run] Exception happen when deliver IMS :" + e.getMessage());
         }
         catch(Throwable t)
         {
            System.out.println("[IMSReceiverImpl::run] Fatal Error happen when deliver IMS :" + t.getMessage());
         }
      }
      System.out.println("[IMSReceiverImpl::run] IMS session closed:" + rtName);
   }

   public void start()
   {
      if(null!=receiver)
      {
         quit = false;
         myThread = new Thread(this);
         myThread.start();
      }
   }

   public void stop()
   {
      if(null!=receiver)
         quit = true;
   }
}