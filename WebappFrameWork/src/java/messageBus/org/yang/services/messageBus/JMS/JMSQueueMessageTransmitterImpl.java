/* Generated by Together */

package org.yang.services.messageBus.JMS;

import javax.jms.TopicPublisher;
import javax.jms.TextMessage;
import javax.jms.JMSException;
import javax.naming.NamingException;
import org.yang.services.messageBus.MessageTransmitter;
import org.yang.services.messageBus.Route;
import org.yang.services.messageBus.InitException;
import org.yang.services.messageBus.Message;
import org.yang.services.messageBus.MessageTransmitException;
import javax.jms.ObjectMessage;
import javax.jms.QueueSender;

public class JMSQueueMessageTransmitterImpl extends JMSQueueAdaptor implements MessageTransmitter
{
   static final long serialVersionUID = 3439536524264252199L;
   private int count = 0;

   private String channel = null;
   public void setChannel(String channel) { this.channel=channel; }
   public String getChannel() { return channel; }

   QueueSender sender = null;

   public JMSQueueMessageTransmitterImpl(Route rt) throws InitException
   {
      super(rt.getProperties());
   }
   
   /************************************
    *  Implements method in JMSAdaptor *
    ************************************/

   public void resume() throws NamingException, InitException
   {
      try
      {
         sender = prepareSender();
      }
      catch(NamingException ne)
      {
         throw ne;
      }
      catch(Exception e)
      {
         throw new InitException("Uable to resume : " + e.getMessage());
      }
   }

   /************************************
    *  Implements method in JMSAdaptor *
    ************************************/

   public boolean isProvider()
   {
      return true;
   }

   /********************************************
    *  Implements method in MessageTransmitter *
    ********************************************/

   public void transmit(Message msg) throws MessageTransmitException
   {
      try
      {
         if(null==msg)
            throw new MessageTransmitException("Message is null.");

         if(null==sender)
         {
            sender = prepareSender();
            if(null==sender)
               throw new MessageTransmitException("Unable to create publisher.");
         }
         ObjectMessage jmsMsg = getSession().createObjectMessage();
         jmsMsg.setObject(msg.getPayload());
         sender.send(jmsMsg);
         count++;
      }
      catch(MessageTransmitException mte)
      {
         throw mte;
      }
      catch(Exception e)
      {
         log.error("[transmit] Exception happen.");
         try
         {
            closeConnection();
         }
         catch(Exception e1)
         {
            log.error("[transmit] Exception happen again, can not resume connection.");
            throw new MessageTransmitException(e1.getMessage());
         }
         finally
         {
            log.info("[transmit] Set publisher to null.");
            sender = null;
         }

         throw new MessageTransmitException(e.getMessage());
      }
   }

   public int getMessageCount()
   {
      return count;
   }
}
