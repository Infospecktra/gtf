/* Generated by Together */
package org.yang.services.messageBus;

import org.yang.services.messageBus.Route;
import java.io.IOException;
import org.apache.log4j.Category;
import javax.naming.NamingException;

public class MessageReceiverWraper implements MessageReceiver
{
   public static final long serialVersionUID = 3439536529228252199L;

   private Category log = null;
   private String handlerName = null;
   private MessageReceiver receiver = null;
   private Route rt = null;

   private String site = null;
   public void setSite(String site) { this.site=site; }
   public String getSite() { return site; }

   private String channel = null;
   public void setChannel(String channel) { this.channel=channel; }
   public String getChannel() { return channel; }

   MessageReceiver realReceiver = null;
   public void setRealReceiver(MessageReceiver receiver) { this.realReceiver = realReceiver; }

   public MessageReceiverWraper(String hostName, String id, Route rt, MessageReceiver receiver) throws NamingException, InitException
   {
      realReceiver = MessageTrancieverFactory.getFactory(rt.getTrancieverFactory()).createReceiver(hostName, id, rt, this);
      this.rt = rt;
      setChannel(rt.getName());
      this.receiver = receiver;
      this.receiver.setRealReceiver(this);
   }

   public void onMessage(Message msg)
   {
      try
      {
         msg.setSender(rt.getSender());
         msg.setReceiver(rt.getReceiver());
         msg.setRoute(rt.getName());
         receiver.onMessage(msg);
      }
      catch(Exception e)
      {
         // need to be handle
      }
      catch(Throwable t)
      {
         // need to be handle
      }
   }

   public Message getMessage(long timeout) throws DataReceivingException
   {
      return realReceiver.getMessage(timeout);
   }

   public Message getMessage() throws DataReceivingException
   {
      return realReceiver.getMessage();
   }

   public void closeSession(boolean b)
   {
      realReceiver.closeSession(true);
   }

   public int getMessageCount()
   {
      return realReceiver.getMessageCount();
   }

   private void writeObject(java.io.ObjectOutputStream out) throws IOException
   {
      // nothing wanna to do
   }

   private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException
   {
      log = Category.getInstance(this.getClass());
   }
}