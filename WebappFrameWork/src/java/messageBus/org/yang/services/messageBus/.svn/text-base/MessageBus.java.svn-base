/* Generated by Together */

package org.yang.services.messageBus;
import java.util.HashMap;
import java.util.Properties;
import java.io.Serializable;
import java.io.IOException;

public abstract class MessageBus implements Serializable
{
    static final long serialVersionUID = 3439536987644252199L;

    public static String HOST_NAME = "gh.message.host.name";
    public static String BUS_CLASS = "gh.message.bus.class";
    public static String ROUTE_MAP = "gh.message.route.map";

    private static HashMap messageBuses = new HashMap();

    /**
     * This method is the only method that can create or access GHMessageBus.
     * It's multi-thread save. For access a GHMessageBus object
     * you need to provide BUSS_CLASS and ROUTE_MAP two properties.
     * 
     * @param env - properties that use to create this message bus system.
     * @return message bus object, if it is not successful, return null instead.
     * @see GHMessage
     * @see MessageReceiver
     * @see MessageTransmitter
     * @since 1.0
     **/
    public static MessageBus getMessageBus(Properties env)
    {
       MessageBus msgBus = null;
       
       String busClass = env.getProperty(BUS_CLASS);
       if(null==busClass)
          return null;
       
       if(null==(msgBus=(MessageBus)messageBuses.get(busClass)))
       {
          synchronized(messageBuses)
          {
             if(null==(msgBus=(MessageBus)messageBuses.get(busClass)))
             {
                msgBus = createMessageBus(busClass, env);
                if(null!=msgBus)
                {
                   messageBuses.put(busClass, msgBus);
                }
             }
          }
       }
       return msgBus;
    }

    /**
     * This method is for creating a GHMessage.
     * The GHMessage object which created by using this method
     * will contain message sender information.
     * 
     * @return GHMessage - an empty message object, with sender information in it.
     * @since 1.0
     */
    public static Message createMessage()
    {
       return new MessageImpl();
    }

    public abstract boolean getIsPrimaryRoute();
    
    public abstract void setIsPrimaryRoute(boolean isPrimaryRoute);

    public abstract Route getRoute(String route);

    public abstract Route[] getRoutes();

    public abstract boolean createRoute(Route rt);

    /**
     * This method return turn all available route that a receiver can listen to.
     * 
     * @param siteid - receiver id.
     * @return String[] - contain al available route id that this receiver can listen to.
     * @since 1.0 
     */
    public abstract String[] availableIncomingRoutes(String siteID);

    /**
     * This method will return all available routes that the sender will send message to.
     * 
     * @param siteid - the sender id.
     * @since 1.0 
     */
    public abstract String[] availableOutgoingRoutes(String siteID);

    /**
     * Register a receiver to receive message from all available route by using listening mode.
     * 
     * @param receiver - a reciver which is going to listen message from all its available route.
     * @since 1.0
     * @exception RegisterReceiverException
     **/
    public abstract void registerReceiver(MessageReceiver receiver) throws RegisterReceiverException;

    /**
     * Register a receiver to receive message from a route by using listening mode.
     * 
     * @param receiver - a reciver which is going to listen message from a route.
     * @param routeID - a route id.
     * @since 1.0
     * @exception RegisterReceiverException
     **/
    public abstract void registerReceiver(String routeID, MessageReceiver receiver) throws RegisterReceiverException;

    /**
     * Stop a receiver listening to all its available route.
     * 
     * @param receiver - a reciver which is going to stop listening all its available route.
     * @since 1.0
     * @exception RegisterReceiverException
     **/
    public abstract void unregisterReceiver(MessageReceiver reciever) throws RegisterReceiverException;

    /**
     * Stop a receiver listening to a route.
     * 
     * @param receiver - a reciver which is going to stop listening to a route.
     * @param routeID - a route id.
     * @since 1.0
     * @exception RegisterReceiverException
     **/
    public abstract void unregisterReceiver(String routeID, MessageReceiver receiver) throws RegisterReceiverException;

    /**
     * Get a transmitter for sending message.
     * 
     * @since 1.0
     * @exception RegisterReceiverException
     **/
    public abstract MessageTransmitter getTransmitter();

    /**
     * Get a receiver to receive messge by using pooling mode.
     * 
     * @param siteID - a site id.
     * @param routeID - a route id.
     * @since 1.0
     * @exception RegisterReceiverException
     **/
    public abstract MessageReceiver getReceiver(String siteID, String routeID) throws RegisterReceiverException;
    
    protected abstract void init(Properties env);

    private static MessageBus createMessageBus(String busClass, Properties env)
    {
      System.out.println("[MessageBus::createMessageBus] Bus Classname : " + busClass);
      try
      {
         MessageBus bus = (MessageBus)Class.forName(busClass).newInstance();
         bus.init(env);
         return bus;
      }
      catch(Exception e)
      {
         e.printStackTrace();
         return null;
      }
    }
}


