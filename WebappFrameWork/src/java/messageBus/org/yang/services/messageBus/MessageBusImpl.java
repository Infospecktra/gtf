/* Generated by Together */

package org.yang.services.messageBus;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Properties;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Properties;
import javax.naming.Referenceable;
import javax.jms.ExceptionListener;
import javax.naming.NamingException;
import java.io.IOException;
import org.yang.util.xml.XMLHelper;
import org.w3c.dom.Node;
import org.w3c.dom.NamedNodeMap;
import org.apache.log4j.Category;
import org.yang.util.SMUtility;
import java.util.HashSet;
import org.yang.util.template.KeywordMapper;

public class MessageBusImpl extends MessageBus
{
   static final long serialVersionUID = 3439536539044252199L;   

   private String hostName = null;

   private HashMap transmitterMap = null;
   private HashMap receiverMap   = null;

   private transient MessageTransmitterWraper transmitterWarper = null;
   private transient Category log = null;
   private HashMap routeMap = null;

   public boolean isPrimaryRoute = true;
   public boolean getIsPrimaryRoute() { return isPrimaryRoute; }
   public void setIsPrimaryRoute(boolean isPrimaryRoute) { this.isPrimaryRoute = isPrimaryRoute; }

   private Route[] routes = null;
   public Route[] getRoutes() { return routes; }

   public MessageBusImpl()
   {
      // for server side use
      log = Category.getInstance(this.getClass());
      routeMap = new HashMap();
      transmitterMap = new HashMap();
      receiverMap   = new HashMap();
   }

   protected void init(Properties env)
   {
      hostName = env.getProperty(HOST_NAME);
      String routeMap = env.getProperty(ROUTE_MAP);
      
      try
      {
         routes = loadHandlerMap(routeMap);
         KeywordMapper ikm = new KeywordMapper();
         ikm.setLeftTag("$");
         ikm.setRightTag("$");

         Iterator it = env.keySet().iterator();
         String key  = null;
         String nKey = null;
         while(it.hasNext())
         {
            key = (String)it.next();
            if(key.startsWith("$")&&key.endsWith("$"))
            {
               nKey = key.substring(1, key.length()-1);
               ikm.setMapping(nKey, env.getProperty(key, nKey));
            }
         }

         for(int i=0; i<routes.length; i++)
         {
            routes[i].setSender(ikm.replace(routes[i].getSender()));
            routes[i].setReceiver(ikm.replace(routes[i].getReceiver()));
            System.out.println("[MessageBusImpl::init] create route : " + routes[i].getName());
            createRoute(routes[i]);
         }
      }
      catch(Exception e) 
      {
         e.printStackTrace();	
      }      	
   }

   public Route getRoute(String routename)
   {
      return (Route)routeMap.get(routename);
   }

   public boolean createRoute(Route route)
   {
      String sender = route.getSender();
      String receiver = route.getReceiver();
      String name = route.getName();

      if(null==sender||null==receiver||null==name)
         return false;

      System.out.println("[GHMessageBusImpl] Tranciever factory:" + route.getTrancieverFactory());

      MessageTrancieverFactory.getFactory(route.getTrancieverFactory()).createRoute(route);

      // for sender topic can be shared
      System.out.println("[GHMessageBusImpl] Construct transmitter for Sender:" + sender + " Route:" + name);
      transmitterMap.put(name, route);
      // for receiver topic cann't be shared
      System.out.println("[GHMessageBusImpl] Construct receiver for Receiver:" + receiver + " Route:" + name + " Key:" + receiver+"_"+name);
      receiverMap.put(receiver+"_"+name, route);
      // for keeping routes with key
      routeMap.put(name, route);
      return true;
   }

   public boolean deleteRoute(Route route)
   {
      String sender = route.getSender();
      String receiver = route.getReceiver();
      String name = route.getName();

      if(null==sender||null==receiver||null==name)
         return false;

      MessageTrancieverFactory.getFactory(route.getTrancieverFactory()).deleteRoute(route);

      // for sender topic can be shared
      System.out.println("[GHMessageBusImpl] Delete transmitter for Sender:" + sender + " Route:" + name);
      transmitterMap.remove(name);
      // for receiver topic cann't be shared
      System.out.println("[GHMessageBusImpl] Delete receiver for Receiver:" + receiver + " Route:" + name);
      receiverMap.remove(receiver+"_"+name);
      return true;
   }

   public String[] availableIncomingRoutes(String siteID)
   {
      ArrayList aRoutes = new ArrayList();
      String sitePrefix = siteID + "_";
      Iterator it = receiverMap.keySet().iterator();
      while(it.hasNext())
      {
         aRoutes.add((String)it.next());
      }
      int size = aRoutes.size();
      String[] sRoutes = new String[size];
      for(int i=0; i<size; i++)
      {
         sRoutes[i] = (String)aRoutes.get(i);
      }
      return sRoutes;
   }

   public String[] availableOutgoingRoutes(String siteID)
   {
      ArrayList aRoutes = new ArrayList();
      String sitePrefix = siteID + "_";
      Iterator it = transmitterMap.keySet().iterator();
      while(it.hasNext())
      {
         aRoutes.add((String)it.next());
      }
      int size = aRoutes.size();
      String[] sRoutes = new String[size];
      for(int i=0; i<size; i++)
      {
         sRoutes[i] = (String)aRoutes.get(i);
      }
      return sRoutes;
   }

   public void registerReceiver(MessageReceiver receiver) throws RegisterReceiverException
   {
      log.info("[registerReceiver1] Register receiver.");
      registerReceiver(receiver, true);
   }

   public void registerReceiver(MessageReceiver receiver, boolean allRoute) throws RegisterReceiverException
   {
      String sitePrefix = receiver.getSite()+"_";
      log.info("[registerReceiver] Register receiver for Site " + sitePrefix);
      String routeID = null;
      if(!allRoute)
      {
         routeID = sitePrefix + receiver.getChannel();
         doRegisterReceiver(routeID, receiver);
      }
      else
      {
         Iterator it = receiverMap.keySet().iterator();
         while(it.hasNext())
         {
            routeID = (String)it.next();
            log.info("[registerReceiver] Found an available route " + routeID);
            if(routeID.startsWith(sitePrefix))
            {
               doRegisterReceiver(routeID, receiver);
            }
         }
      }
   }

   public void registerReceiver(String routeID, MessageReceiver receiver) throws RegisterReceiverException
   {
      if(null==routeID||null==receiver)
         throw new RegisterReceiverException("Unable to register receiver, neither route id nor receiver can be null.");
      routeID = receiver.getSite()+ "_" + routeID;
      doRegisterReceiver(routeID, receiver);
   }

   public void unregisterReceiver(MessageReceiver receiver) throws RegisterReceiverException
   {
      String sitePrefix = receiver.getSite() + "_";
      log.info("[unregisterReceiver] Unregister receiver for Site " + sitePrefix);
      Iterator it = receiverMap.keySet().iterator();
      String routeID = null;
      while(it.hasNext())
      {
         routeID = (String)it.next();
         log.info("[unregisterReceiver] Unregister me from route " + routeID);
         if(routeID.startsWith(sitePrefix))
         {
            unregisterReceiver(routeID);
         }
      }
   }

   public void unregisterReceiver(String routeID, MessageReceiver receiver) throws RegisterReceiverException
   {
      routeID = receiver.getSite() + "_" + routeID;
      unregisterReceiver(routeID);
   }

   public MessageTransmitter getTransmitter()
   {
      if(null==transmitterWarper)
      {
         synchronized(transmitterMap)
         {
            if(null==transmitterWarper)
            {
               transmitterWarper = new MessageTransmitterWraper(this);
            }
         }
      }

      return transmitterWarper;
   }

   MessageTransmitter getTransmitter(String channel) throws MessageTransmitException
   {
      MessageTransmitter transmitter = null;
      String aKey = null;
      Route rt = (Route)transmitterMap.get(channel);
      if(null==rt)
      {
         throw new MessageTransmitException("No route is available, Channel: " + channel);
      }
      	
      transmitter = rt.getMessageTransmitter();
      if(null==transmitter)
      {
         synchronized(transmitterMap)
         {
            if(null==transmitter)
            {        
               try
               {
                  transmitter = MessageTrancieverFactory.getFactory(rt.getTrancieverFactory())
                                                        .createTransmitter(rt);
               }
               catch(InitException ie)
               {
                  throw new MessageTransmitException("Fail to init transmitter.");
               }
         
               //transmitter.setChannel(channel);
               rt.setMessageTransmitter(transmitter);
            }
         }
      }
      return transmitter;
   }

   public MessageReceiver getReceiver(String siteID, String routeID) throws RegisterReceiverException
   {
      return doRegisterReceiver(siteID + "_" + routeID, null);
   }

   private void writeObject(java.io.ObjectOutputStream out) throws IOException
   {
      out.defaultWriteObject();
      // nothing wanna to do
   }

   private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException
   {
       in.defaultReadObject();
       // for client side using
       log = Category.getInstance(this.getClass());
   }

   private MessageReceiver doRegisterReceiver(String routeID, MessageReceiver receiver) throws RegisterReceiverException
   {
      System.out.println("[doRegisterReceiver] Register receiver, route = " + routeID);
      System.out.println("[doRegisterReceiver] Check size of route : " + receiverMap.size());
      Route rt = (Route)receiverMap.get(routeID);
      if(null!=rt)
      {
         MessageReceiverWraper wraper = null;
         if(null!=(wraper=(MessageReceiverWraper)rt.getMessageReceiver()))
            throw new RegisterReceiverException("Duplicate receiver.");

         synchronized(receiverMap)
         {
            if(null!=(wraper=(MessageReceiverWraper)rt.getMessageReceiver()))
               throw new RegisterReceiverException("Duplicate receiver.");
            
            try
            {
               wraper = new MessageReceiverWraper(hostName, routeID, rt, receiver);
               if(null!=receiver)
               {
                  wraper.setSite(receiver.getSite());
                  wraper.setChannel(receiver.getChannel());
               }
            }
            catch(NamingException ne)
            {
               throw new RegisterReceiverException("Fail to init receiver : " + ne.getMessage());
            }
            catch(InitException ie)
            {
               throw new RegisterReceiverException("Fail to init receiver : " + ie.getMessage());
            }
            
            rt.setMessageReceiver(wraper);
         }
         return wraper;
      }
      else
      {
         throw new RegisterReceiverException("No route for this receiver.");
      }
   }

   private void unregisterReceiver(String routeID) throws RegisterReceiverException
   {
      log.info("[unregisterReceiver] Unregister receiver, route = " + routeID);
      Route rt = (Route)receiverMap.get(routeID);
      if(null!=rt)
      {
         MessageReceiverWraper wraper = null;
         synchronized(receiverMap)
         {
            // remove wrapper from route. Later if you want to register it again,
            // I'll create a new wrapper for this receiver.
            if(null==(wraper=(MessageReceiverWraper)rt.removeMessageReceiver()))
            {
               log.info("[unregisterReceiver] Route name : " + routeID + " is not found.");
               return;
            }

            try
            {
               // close my session, Connection still available for furture using
               System.out.println("[MessageBusImpl::unregisterReceiver] before close session .....");
               wraper.closeSession(true);
               System.out.println("[MessageBusImpl::unregisterReceiver] after close session .....");
            }
            catch(Exception e)
            {
               throw new RegisterReceiverException("Fail to close connection for this receiver : " + e.getMessage());
            }
         }
      }
   }

   private Route[] loadHandlerMap(String mapPaths) throws NoRoutingTableException, Exception
   {
      ArrayList routes = new ArrayList();
      String[] confiles = SMUtility.splitByToken(mapPaths, "|", false);
      for(int i=0; i<confiles.length; i++)
      {
         routes.addAll(loadRouteConfile(confiles[i]));
      }

      return loadRoutes(routes);
   }

   private ArrayList loadRouteConfile(String filename)
   {
      ArrayList temp = null;
      InputStream is = null;
      try
      {
         is = this.getClass()
                  .getClassLoader()
                  .getResourceAsStream(filename);

         if(null==is)
         {
            throw new NoRoutingTableException("File " + filename + " is not found!");
         }

         Node mappings = XMLHelper.read(is);
         temp = XMLHelper.getNodesFromDocument(mappings, "/map/route");
      }
      catch(Exception e)
      {
         e.printStackTrace();
      }
      finally
      {
         try
         {
            is.close();
         }
         catch(Exception e)
         {}
      }

      return temp;
   }

   private Route[] loadRoutes(ArrayList uris) throws NoRoutingTableException, Exception
   {
      HashSet routeSet = new HashSet();
      try
      {
         Route rt = null;
         for(int i=0; i<uris.size(); i++)
         {
            String uriPath = null;
            String actionHandler = null;
            Node uri = (Node)uris.get(i);
            NamedNodeMap atts = uri.getAttributes();

      	    if(null==atts)
      	    {
  	          throw new Exception("Error when loading route : route attributes are missing.");
      	    }

            try
            {
      	       Node type     = atts.getNamedItem("type");
               Node name     = atts.getNamedItem("name");
      	       Node sender   = atts.getNamedItem("sender");
               Node receiver = atts.getNamedItem("receiver");
               Node tranciever = atts.getNamedItem("trancieverFactory");

      	       if(null==type||null==name||null==sender||null==receiver||null==tranciever)
      	       {
      	          throw new Exception("Error when loading route : missing important attributes.");
      	       }

               rt = new Route();
               rt.setMessageBus(this);
               rt.setType(type.getNodeValue());
               rt.setName(name.getNodeValue());
               rt.setSender(sender.getNodeValue());
               rt.setReceiver(receiver.getNodeValue());
               rt.setTrancieverFactory(tranciever.getNodeValue());

               populateTServer(rt, uri);

               System.out.println("************************************************************");
               System.out.println(rt.toString());
               System.out.println("************************************************************");

               Iterator it = routeSet.iterator();
               boolean isExist = false;
               while(it.hasNext())
               {
                  if(rt.equals(it.next()))
                  {
                     isExist = true;
                     break;
                  }
               }
               if(!isExist)
                  routeSet.add(rt);
            }
            catch(Exception e)
            {
               log.warn("[loadHandlerMap] Unable to read routing table.", e);
            }
         }
      }
      catch(Exception e)
      {
         e.printStackTrace();
         throw new Exception("Load table failis!" + e.toString());
      }
      Route[] routeList = new Route[routeSet.size()];
      Iterator it = routeSet.iterator();
      int i = 0;
      while(it.hasNext())
      {
         routeList[i] = (Route)it.next();
         i++;
      }
      return routeList;
   }
   private void populateTServer(Route rt, Node uri) throws NoRoutingTableException, Exception
   {
      ArrayList tServers = XMLHelper.getNodesFromDocument(uri, "transportationServer");
      if(null!=tServers)
      {
         System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Multi-server");
         for(int i=0; i<tServers.size(); i++)
         {
            Node tServer = (Node)tServers.get(i);
            ArrayList props = XMLHelper.getNodesFromDocument(tServer, "property");

            for(int j=0; j<props.size(); j++)
            {
               Node prop = (Node)props.get(j);
               NamedNodeMap patts = prop.getAttributes();
    	       if(null==patts)
      	       {
      	          break;
      	       }

               Node pName = patts.getNamedItem("name");
               Node pValue = patts.getNamedItem("value");

      	       if(null==pName||null==pValue)
      	       {
      	          break;
      	       }
               rt.setProperty(i, pName.getNodeValue(), pValue.getNodeValue());
            }
         }
      }
      else
      {
         System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Single Server");
         ArrayList props = XMLHelper.getNodesFromDocument(uri, "property");

         for(int j=0; j<props.size(); j++)
         {
            Node prop = (Node)props.get(j);
            NamedNodeMap patts = prop.getAttributes();
    	    if(null==patts)
      	    {
      	       break;
      	    }

            Node pName = patts.getNamedItem("name");
            Node pValue = patts.getNamedItem("value");

      	    if(null==pName||null==pValue)
      	    {
      	       break;
      	    }
            rt.setProperty(pName.getNodeValue(), pValue.getNodeValue());
         }
      }
   }
}