/* Generated by Together */

package org.yang.customized.gtf.services.projectViewer.web;
import org.yang.web.applicationContainer.SecuredBean;
import java.util.Collection;
import org.yang.web.view.controls.jsStyle.navigationList.NavigationList;
import java.util.ArrayList;
import java.util.Arrays;
import org.yang.services.dataAccess.DataGroup;
import org.yang.services.dataAccess.Data;
import org.yang.customized.gtf.services.dataAccess.Project;
import org.yang.customized.gtf.services.projectViewer.ProjectViewerManager;
import java.io.ObjectOutputStream;
import java.io.IOException; 
import java.io.ObjectInputStream;  
import java.util.HashMap;

public class ProjectListMenuBean extends ProjectViewerBean
{
   static final long serialVersionUID = 4711296332221794601L;

/*
   private int event = 0;
   public int getEvent() { return event; }

   private String idFrom = null;
   public void setIdFrom(String idFrom) { this.idFrom = idFrom; }
   public String getIdFrom() { return idFrom; }

   private String idTo = null;
   public void setIdTo(String idTo) { this.idTo = idTo; }
   public String getIdTo() { return idTo; }

   private String[] targetIds = null;
   public void setTargetIds(String[] targetIds) { this.targetIds = targetIds; }

   private String type = null;
   public void setType(String type) { this.type = type; }
   public String getType() { return type; }
*/
   public ProjectListMenuBean()
   {
      super();
      projectViewerMap = new HashMap();
   }

   /*********************************
    *  All methods used by Builder  *
    *********************************/
   //selected check Boxes
   private String[] targetIds = null;
   public void setTargetIds(String[] targetIds) { this.targetIds = targetIds; }
   
   // 
   private String currentViewMode = ProjectViewerManager.DATA_ON_TABLE_NAME_1;
   public String getCurrentViewMode()
   {
      return currentViewMode;
   }
   
   /*
     when on click check boxes on ProjectListMenuBuilder 
     1. update the data in ALL_projectViewer tabe based on projectViewerMap  
     2. refresh reload data and projectViewerMap --> load()
   */
   public void setCurrentViewMode(String selectedViewMode) 
   { 
      try
      {   
      	  System.out.println("[ProjectListMenuBean::setCurrentViewMode]----this.currentViewMode="+this.currentViewMode);
      	  System.out.println("[ProjectListMenuBean::setCurrentViewMode]----selectedViewMode="+selectedViewMode);

          String pid = "";
          ArrayList pvs = new ArrayList();
          projectViewerMgr.removeProjectViewerByViewMode(this.currentViewMode);	
          for(int i=0;i<allAvailableProjects.length;i++)
          {
             pid=allAvailableProjects.getProjectId();	
             ProjectViewer pv = new ProjectViewer();
             pv.setId(pid);
             pv.setViewMode(this.currentViewMode);
             pvs.add(pv);
          }
          ProjectViewer[] pvs2 = (ProjectViewer[])pvs.toArray(new ProjectViewer[]);
          projectViewerMgr.createProjectViewers(pvs2);
      	  System.out.println("[ProjectListMenuBean::setCurrentViewMode]----insert pvs.length=="+ pvs2.length);
          projectViewerMap.clear();
          this.currentViewMode = selectedViewMode; 
          load();
          
      }
      catch(Exception e)
      {
         e.printStackTrace();	
      }			
      altPage = null;	
   }
   
   //  
   public Project[] getOngoingProjects(String type)
   {
       Project[] projects = null;	
       try
       {
           projects = projectViewerMgr.getProjectsByType(type);
           if(projects==null)
              projects = new Project[0];
       }
       catch(Exception e)
       {
          System.out.println("[ProjectViewerServiceBean::getAllAvailableProjects] Exception happen : " + e.getMessage());
       }
       return projects;
   }   
   
   private Project[] allAvailableProjects = null;
   public Project[] getAllAvailableProjects()
   {
      try
      {
         //allAvailableProjects = getWaitingOngoingProjects(ProjectViewerManager.PROJECT_TYPE_GT);
         load();
         System.out.println("----------");
         for(int i=0;i<allAvailableProjects.length;i++)
         {
            System.out.println("[ProjectViewsServiceBean::getAllAvailableProjects]-----projects["+i+"].getStartDate()="+allAvailableProjects[i].getStartDate());	
         }	
         System.out.println("----------");
         for(int i=0;i<allAvailableProjects.length;i++)
         {
            System.out.println("[ProjectViewsServiceBean::getAllAvailableProjects]-----projects["+i+"].getSerialNumber()="+allAvailableProjects[i].getSerialNumber());	
         }	
         System.out.println("----------");
      }
      catch(Exception e)
      {
         e.printStackTrace();	
      }			
      
      return allAvailableProjects;
   }
   /*
   public String[] getAllAvailableProjectTypes()
   {
      return passport.getServiceAreas("ProjectViewerManager");
   }
   */
   /***************************************
    *  Implement GenericHandler's method  *
    ***************************************/

   protected void init() throws Exception
   {
      System.out.println("[ProjectViewerServiceBean::init] entering!");

      ensureResource();

      if(null==projectViewerMgr)
         throw new Exception("ProjectViewer manager should not be null.");
   }
   
   private String altPage = null; 
   protected String altPage()
   {
      System.out.println("[ProjectViewerServiceBean::altPage] reload page :" + isReload);
      if(isReload)
      {
         passport.setRuntimeProperty("right", "/projectListMenu.wf?actiontype=clear");
         return "reload-forward";
      }
      else
         return altPage;//null;
   }

   protected void destroy()
   {
      projectViewerMgr = null;
   }

   /***************************************
    *           my action method          *
    ***************************************/
   public void clear()
   {
      System.out.println("[ProjectViewerServiceBean::clear]----->enter this scope");	
   }


   //1.targetIds --> for project list
   x//2.synchronize the  projectViewer data  btw  projectViewerMap and targetIds     
   public void changeSelectedItems()
   {
      try
      {	
      	 String pid = "";
      	 
      	 for(int i=0;i<targetIds.length;i++)
      	 {
      	    ProjectViewer  pv = new ProjectViewer();
      	    pv.setId(targetIds[i]);	
      	    pv.setViewMode(viewMode);
      	    projectViewerMap(targetIds[i],pv); 	
      	 }	
      	 
      	 System.out.println("[ProjectListMenuBean::targetIds]----->targetIds.length="+targetIds.length);
            	
         }
         	
         //load();
         altPage=null; //projectViewerBody.jsp	
      }
      catch(Exception e)
      {
         e.prinStackTrace();	
      }	   
   }
	
   public void displayProjectList()
   {
      try
      {	
         load();
      }
      catch(Exception e)
      {
         e.printStackTrace();	
      }	   	
      removeControl("projectList");
      altPage = "projectListMenu";	
   }	
   private HashMap projectViewerMap = null;    
   private ProjectViewer[] projectViewerData = null;
   public ProjectViewer[] getProjectViewerData(){return projectViewerData;}    
   public projectViewer[] loadProjectViewerMap()
   {
      try
      {
      	  System.out.println("[ProjectListMenuBean::loadProjectViewerData]--->viewerMode="+viewerMode);
          projectViewerData = projectViewerMgr.loadProjectViewerDataByViewMode(viewMode);
          if(projectViewerData==null)
             projectViewerData = new ProjectViewer[0];
          for(int i=0;i<projectViewerData.length;i++)
          {
              projectViewerMap.put(projectViewerData[i].getId(),projectViewerData); 	
          }	
          System.out.println("[ProjectListMenuBean::loadProjectViewerData]--->projectViewerData.length="+projectViewerData.length);   
      }
      catch(Exception e)
      {
         e.prinStackTrace();	
      }			
   }
   
   //1.load all ongoing projecs
   //2.load selected projectViewerData -->data Structure
   public void load()
   {
      System.out.println("[ProjectListMenuBean::load]----->enter this scope");	
      
      try
      {
         loadAllProjects();
         loadProjectViewerMap();
         allAvailableProjects = filterProjectByViewMap();    
      System.out.println("[ProjectListMenuBean::load]----->allAvailableProjects.length="+allAvailableProjects.length);	

      }
      catch(Exception e)
      {
         e.printStackTrace();	
      }	
   }
   /*
   public void changeType()
   {
      passport.setRuntimeProperty("type", type);
      isReload = true;
   }
   
   public void swap()
   {
      try
      {
         projectViewerMgr.swap(idFrom, idTo);
      }
      catch(Exception e) {}
      isReload = true;
   }

   public void activate()
   {
      if(null==targetIds)
        return;
      for(int i=0; i<targetIds.length; i++)
      {
         try
         {
            projectViewerMgr.startProject(targetIds[i]);
         }
         catch(Exception e)
         {
            e.printStackTrace();
         }
      }
      isReload = true;
   }

   public void delete()
   {
      if(null==targetIds)
        return;
      for(int i=0; i<targetIds.length; i++)
      {
         try
         {
            projectViewerMgr.removeProject(targetIds[i]);
         }
         catch(Exception e)
         {
            e.printStackTrace();
         }
      }
      isReload = true;
   }
*/
   
   /**
     Filtering projects by viewMode
   **/
   private Project[] filterProjectByViewMap()
   {	
      ArrayList projects = new ArrayList();	
      Colleaction <K,V>  pvs =  null;
      String pid = "";
      try
      {  
      	 pvs = projectViewerMap.values();            	
         for(int i=0;i< allProjects.length;i++)
         {
            pid = allProjects[i].getProjectId();
            for(int j=0;j<pvs.length;j++)
            {
               if((pvs[j].getId()).equals(pid))
                  projects.add(allProjects[i]);	
            }		
         }	
      }
      catch(Exception e)
      {
         e.prinStackTrace();	
      }		
      return (Project[])projects.toArray(new Project[0]);	
   }
	
   private Project[] allProjects = null;
   public Project[] loadAllProjects()
   {
      try
      {
         allProjects = projectViewerMgr.getProjectsByType(ProjectViewerManager.PROJECT_TYPE_GT); 
         if(allProjects==null)
             allProjects = new Project[0];
         System.out.println("[ProjectListMenuBean::loadAllProjects]--->allProjects.length="+allProjects.length);   
      	
      }
      catch(Exception e)
      {
         e.printStackTrace();	
      }
      return allProjects;			
   }	
   
   public void append()
   {

   }
}