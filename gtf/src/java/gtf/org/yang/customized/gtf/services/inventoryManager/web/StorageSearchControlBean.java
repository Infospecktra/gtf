/* Generated by Together */

package org.yang.customized.gtf.services.inventoryManager.web;

import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.ArrayList;
import java.util.Collections;

public class StorageSearchControlBean extends InventoryServiceBean
{
   static final long serialVersionUID = 4731292382179754922L;
 
   public StorageSearchControlBean()
   {
      super();
   }

   /***************************************
    *  Implement GenericHandler's method  *
    ***************************************/

   protected void init() throws Exception
   {
      ensureResource();
   }
   private String altPage = null;
   protected String altPage()
   {
      System.out.println("[StorageSearchControlBean::::init] ::altPage] reload page :" + isReload);
      if(isReload)
      {
         passport.setRuntimeProperty("right", "/inventory.wf?actiontype=clear");
         return "reload-forward";
      }
      else
         return altPage;
   }

   protected void destroy()
   {
      inventoryMgr = null;
   }

   /***************************************
    *           accessive methods         *
    ***************************************/
   private String searchKeys ="";

   public String getSearchKeys(){return searchKeys;}
   public void setSearchKeys(String sks)
   {
      searchKeys = sks;
   }

   private String labName = "  Please select";
   public String getLabName(){return labName;}
   public void setLabName(String labName){this.labName=labName;}
   
   private String investigator = "  Please select";
   public String getInvestigator(){return investigator;}
   public void setInvestigator(String investigator){this.investigator=investigator;}
   
   private String[] investigators = null;
   public String[] getAvailableInvestigators()
   {
      if(investigators==null)
      	investigators = new String[] {"  Please select"}; 
	
      return investigators;
   }
   public void setAvailableInvestigators(String[] investigators){this.investigators=investigators;}

   
   /***************************************
    *           my action method          *
    ***************************************/

   public void load()
   {
      removeControl("searchControl");
      altPage = null;
   }

   private String tab = "search";
   public String getTab() { return tab; }
   public void toSearchMode()
   {
      tab = "search";
      removeControl("searchControl");
   }

   private String[] domainsFromPassport = null; 
   public String[] getDomainsFromPassport()
   {
   	return domainsFromPassport;
   }   

   public String[] getAllDomains()
   {
      ArrayList temp = new ArrayList();
      try
      {	
         domainsFromPassport = passport.getDomains();
         HashSet set = inventoryMgr.loadAllPersistentLabNames();
         for(int i=0; i<domainsFromPassport.length; i++)
         {
            set.add(domainsFromPassport[i]);
         }
         Iterator it = set.iterator();
         ArrayList domainList = new ArrayList();
         while(it.hasNext())
         {
            domainList.add(it.next());	
         }	
         Collections.sort(domainList);
         
         int size = domainList.size()+1;
         //System.out.println("[StorageSearchControlBean::getAllDomains]---size="+size);
         temp.add("  Please select");
         String labName = "";
         Iterator it2 = domainList.iterator();
         while(it2.hasNext())
         {
      	    labName = (String)it2.next();
      	    if(!"".equals(labName)) 
               temp.add(labName);	
            //System.out.println("[StorageSearchControlBean::getAllDomains]---labName="+labName);
         }
      }
      catch(Exception e)
      {
         e.printStackTrace();	
      }	   	
      return (String[])temp.toArray(new String[]{});
   }
 
   public String whoIsIt(String domain, String username)
   {
      return passport.whoIsIt(domain, username);
   }
   //----
   public void updateData()
   {
      removeControl("searchControl");
      altPage=null;
   }


   public void updateDomain()
   {
      removeControl("panel");
      //System.out.println("[StorageSearchControlBean::updateLabName]----->labName="+labName);
      loadInvestigatorsByDomain(labName);
      altPage=null;
   }
	
   public String getDomain()
   {
      return passport.getDomain();
   }

   private String[] investigatorsInSelectedLab = null;
   public String[] getInvestigatorsInSelectedLab()
   {
   	if(investigatorsInSelectedLab==null)
   	{
   	   investigatorsInSelectedLab = new String[1];
   	   investigatorsInSelectedLab[0] = "  Please select";
   	}
   	return investigatorsInSelectedLab;
   }

   public void loadInvestigatorsByDomain(String labName)
   {  
      ArrayList temp = new ArrayList();
      boolean isValidDomain = false;
      
      try
      {
      	 String[] domains = passport.getDomains();
      	 //System.out.println("[StorageSearchControlBean::loadInvestigatorsByDomain]---labName="+labName);
      	 
      	 for (int ii=0; ii<domains.length; ii++)
      	 {
      	    if(domains[ii].equalsIgnoreCase(labName))
      	       isValidDomain = true;	
      	 }	
      	 if(!isValidDomain) 
      	 {
            investigatorsInSelectedLab = new String[1];
            investigatorsInSelectedLab[0] = "  Please select";
      	 }
      	 else
      	 {
            String[] t =  passport.getDomainUserNames(labName); //from passport
      	    investigatorsInSelectedLab = new String[t.length+1];
      	    investigatorsInSelectedLab[0] = "  Please select";
      	    for(int x=1;x<investigatorsInSelectedLab.length;x++)
      	    {
      	      investigatorsInSelectedLab[x] = t[x-1];	
      	    }	
      	    //System.out.println("[StorageSearchControlBean::loadInvestigatorsByDomain]---investigatorsInSelectedLab.length="+investigatorsInSelectedLab.length);
      	 }	
      	 HashSet set = inventoryMgr.loadAllPersistentInvestigators(labName);//from database
         if(set==null)
            set = new HashSet();
              
         for(int i=0; i<investigatorsInSelectedLab.length; i++)
         {
            set.add(investigatorsInSelectedLab[i]);
         }
         
         Iterator it = set.iterator();
         ArrayList investigatorList = new ArrayList();
         while(it.hasNext())
         {
            investigatorList.add(it.next());	
         }	
         Collections.sort(investigatorList);
         
         //int size = investigatorList.size()+1;
         //System.out.println("[StorageSearchControlBean::loadInvestigatorsByDomain]---size="+size);
         String investigator = "";
         Iterator it2 = investigatorList.iterator();
         while(it2.hasNext())
         {
      	    investigator = (String)it2.next();
      	    if(!"".equals(investigator)) 
               temp.add(investigator);	
            //System.out.println("[StorageSearchControlBean::loadInvestigatorsByDomain]---investigator="+investigator);
         }
         Iterator it3 = temp.iterator();
         investigators = new String[temp.size()];

         for(int j=0;j<investigators.length;j++)
         { 
            investigators[j]=(String)it3.next();	
            //System.out.println("[StorageSearchControlBean::loadInvestigatorsByDomain]--investigators["+j+"]="+investigators[j]);	
         }	  	
      }
      catch(Exception e)
      {
         e.printStackTrace();	
      }		   	
   }
    
}