/* Generated by Together */

package org.yang.customized.gtf.services.scheduleManager.web;
import org.yang.web.applicationContainer.SecuredBean;
import org.yang.customized.gtf.services.scheduleManager.ScheduleManager;
import java.util.Collection;
import org.yang.web.view.controls.jsStyle.navigationList.NavigationList;
import java.util.ArrayList;
import java.util.Arrays;
import org.yang.customized.gtf.services.dataAccess.Project;
import org.yang.customized.gtf.services.projectManager.ProjectManager;
import java.io.ObjectOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
//import javax.servlet.http.HttpSessionActivationListener;
//import javax.servlet.http.HttpSessionEvent;


public class ScheduleServiceBean extends ScheduleBean
{
   static final long serialVersionUID = 4711296382979764901L;

   private int event = 0;
   public int getEvent() { return event; }

   private String idFrom = null;
   public void setIdFrom(String idFrom) { this.idFrom = idFrom; }
   public String getIdFrom() { return idFrom; }

   private String idTo = null;
   public void setIdTo(String idTo) { this.idTo = idTo; }
   public String getIdTo() { return idTo; }

   private String[] targetIds = null;
   public void setTargetIds(String[] targetIds) { this.targetIds = targetIds; }

   private String type = null;
   public void setType(String type) { this.type = type; }
   public String getType() { return type; }

   public ScheduleServiceBean()
   {
      super();
   }

   /*********************************
    *  All methods used by Builder  *
    *********************************/

   public String getDomain()
   {
      return passport.getDomain();
   }

   public Project[] getAllAvailableProjects()
   {
       try
       {
          String cDomain = null;
          if(!gotPermit("ScheduleManager", type, ScheduleManager.CROSS_DOMAIN))
             cDomain = getDomain();
          String cGroup = null;
          //if(!gotPermit("ScheduleManager", targetType, ScheduleManager.CROSS_GROUP))
          //   cGroup = getGroup();
          String cUser = null;
          if(!gotPermit("ScheduleManager", type, ScheduleManager.CROSS_USER))
             cUser = passport.getUsername();

          String condition = null;
          if(gotPermit("ScheduleManager", type, ScheduleManager.HISTORY))
             condition = "name LIKE '*%'";
          else
             condition = "name NOT LIKE '*%'";

          // combination
          // 1. xuser  , xdomain  : getProjects(type, null, null, null, condition)   -> assistant
          // 2. xuser  , ~xdomain : getProjects(type, domain, null, null, condition) -> lab manager
          // 3. ~xuser , xdomain  : getProjects(type, null, null, user, condition)   -> xdomain user
          // 4. ~xuser , ~xdomain : getProjects(type, domain, null, user, condition) -> normal user
          return scheduleMgr.getProjects(type, cDomain, cGroup, cUser, condition);
       }
       catch(Exception e)
       {
          System.out.println("[ScheduleServiceBean::getAllAvailableProjects] Exception happen : " + e.getMessage());
       }
       return new Project[0];
   }

   /*
      Sorting the projectlist by configuration time ()
   */
   
   public Project[] getAllProjectsSortingByProjectIDs()
   {
       try
       {
          String cDomain = null;
          if(!gotPermit("ScheduleManager", type, ScheduleManager.CROSS_DOMAIN))
             cDomain = getDomain();
          String cGroup = null;
          //if(!gotPermit("ScheduleManager", targetType, ScheduleManager.CROSS_GROUP))
          //   cGroup = getGroup();
          String cUser = null;
          if(!gotPermit("ScheduleManager", type, ScheduleManager.CROSS_USER))
             cUser = passport.getUsername();

          String condition = null;
          if(gotPermit("ScheduleManager", type, ScheduleManager.HISTORY))
             condition = "name LIKE '*%'";
          else
             condition = "name NOT LIKE '*%'";

          // combination
          // 1. xuser  , xdomain  : getProjects(type, null, null, null, condition)   -> assistant
          // 2. xuser  , ~xdomain : getProjects(type, domain, null, null, condition) -> lab manager
          // 3. ~xuser , xdomain  : getProjects(type, null, null, user, condition)   -> xdomain user
          // 4. ~xuser , ~xdomain : getProjects(type, domain, null, user, condition) -> normal user
          return scheduleMgr.getProjectsSortingByID(type, cDomain, cGroup, cUser, condition,"projectId"); 
       }
       catch(Exception e)
       {
          System.out.println("[ScheduleServiceBean::getAllAvailableProjects] Exception happen : " + e.getMessage());
       }
       return new Project[0];
   }

   public String[] getAllAvailableProjectTypes()
   {
      return passport.getServiceAreas("ScheduleManager");
   }

   /***************************************
    *  Implement GenericHandler's method  *
    ***************************************/

   protected void init() throws Exception
   {
      System.out.println("[ScheduleServiceBean::init] entering!");

      ensureResource();

      if(null==scheduleMgr)
         throw new Exception("User manager should not be null.");
   }

   protected String altPage()
   {
      System.out.println("[ScheduleServiceBean::altPage] reload page :" + isReload);
      if(isReload)
      {
         passport.setRuntimeProperty("right", "/project.wf?actiontype=clear");
         return "reload-forward";
      }
      else
         return null;
   }

   protected void destroy()
   {
      scheduleMgr = null;
   }

   /***************************************
    *           my action method          *
    ***************************************/

   public void load()
   {
      if(null==type)
      {
         String[] areas = getAllAvailableProjectTypes();
         if(null!=areas&&0<areas.length)
         {
            type = areas[0];
         }
      }
      removeControl("projectList");
   }

   public void changeType()
   {
      passport.setRuntimeProperty("type", type);
      isReload = true;
   }

   public void swap()
   {
      try
      {
         scheduleMgr.swap(idFrom, idTo);
      }
      catch(Exception e) {}
      isReload = true;
   }

   public void activate()
   {
      if(null==targetIds)
        return;
      for(int i=0; i<targetIds.length; i++)
      {
         try
         {
            scheduleMgr.startProject(targetIds[i]);
         }
         catch(Exception e)
         {
            e.printStackTrace();
         }
      }
      isReload = true;
   }

   public void delete()
   {
      if(null==targetIds)
        return;
      for(int i=0; i<targetIds.length; i++)
      {
         try
         {
            scheduleMgr.removeProject(targetIds[i]);
         }
         catch(Exception e)
         {
            e.printStackTrace();
         }
      }
      isReload = true;
   }

   public void append()
   {

   }
}