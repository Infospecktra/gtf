/* Generated by Together */
package org.yang.customized.gtf.services.reportManager.web;
import org.yang.web.view.controls.WebControlBuilder;
import org.yang.web.view.controls.WebControl;
import org.yang.web.controller.GenericBean;
import org.yang.web.view.controls.jsStyle.panel.Panel;
import org.yang.web.view.controls.jsStyle.panel.GenericPanel;
import org.yang.web.view.controls.jsStyle.panel.TabPanelElement;
import org.yang.web.view.controls.jsStyle.ButtonElement;
import org.yang.web.view.controls.jsStyle.SelectElement;
import org.yang.web.view.controls.jsStyle.CheckBoxes;
import org.yang.web.view.controls.jsStyle.CheckBoxGroup;
import org.yang.web.view.controls.jsStyle.CheckBox;
import org.yang.customized.gtf.services.reportManager.ReportManager;
import org.yang.customized.gtf.services.dataAccess.Stage;
import org.yang.services.dataAccess.Data;
import org.yang.customized.gtf.services.dataAccess.Project;
import org.yang.web.view.controls.jsStyle.RadioButtonGroup;


public class ReportsBrowsingPanelBuilder implements WebControlBuilder
{
   String codeBase = null;

   public WebControl build(GenericBean bean) throws Exception
   {
      ReportsBrowsingPanelBean panelBean = (ReportsBrowsingPanelBean)bean;
      codeBase = panelBean.getAppBase() + panelBean.getGuiBase();

      Panel panel = null;
      if(null==(panel=(GenericPanel)panelBean.getControl("panel")))
      {
         panel = createPanel(panelBean);
         panelBean.setControl("panel", panel);
      }

      return panel;
   }

   private GenericPanel createPanel(ReportsBrowsingPanelBean accountBean)
   {
      String tab = accountBean.getTab();

      GenericPanel panel = new GenericPanel();
      panel.setId("browseReport");
      panel.setText("Managing your reports.");
      panel.setDisableForm(true);
      panel.setCodeBase(codeBase);
      panel.setColor("#C0C0C0");
      panel.setActionLink("/wf/reportsList.wf");

      // Browse tab
      TabPanelElement browsingTab = new TabPanelElement();
      browsingTab.setText("Browse");
      browsingTab.setCodeBase(codeBase);
      browsingTab.setTabSwitchingLink("/wf/reportsPanel.wf?actiontype=toBrowseMode");
      if("browse".equals(tab))
      {
         browsingTab.setOnFocus(true);
         browsingTab.addASubcontrol(createBrowsingControl(panel.getId(), accountBean));
      }
      else
         browsingTab.setOnFocus(false);

      panel.addASubcontrol(browsingTab);

      // Search tab
      TabPanelElement searchingTab = new TabPanelElement();
      searchingTab.setText("Search");
      searchingTab.setCodeBase(codeBase);
      //searchingTab.setTabSwitchingLink("/wf/reportsPanel.wf?actiontype=toBrowseMode");
      searchingTab.setTabSwitchingLink("/wf/reportsPanel.wf?actiontype=toSearchMode");
      if("search".equals(tab))
      {
         searchingTab.setOnFocus(true);
         searchingTab.addASubcontrol(createSearchingControl(panel.getId(), accountBean));
      }
      else
         searchingTab.setOnFocus(false);

      panel.addASubcontrol(searchingTab);
      return panel;
   }

   private ReportsBrowsingControl createBrowsingControl(String id, ReportsBrowsingPanelBean accountBean)
   {
      ReportsBrowsingControl browsing = new ReportsBrowsingControl();
      browsing.setCodeBase(codeBase);
      browsing.setId(id);
      browsing.setActionLink("/wf/reportsList.wf");
      browsing.setSwitchViewLink("/wf/reportsPanel.wf?actiontype=switchView&");
      browsing.setSwitchTimeActionLink("/wf/reportsPanel.wf?actiontype=switchTime");
      browsing.setBackwardActionLink("/wf/reportsPanel.wf?actiontype=backward");
      browsing.setForwardActionLink("/wf/reportsPanel.wf?actiontype=forward");
      browsing.setDisplayedYear(accountBean.getDisplayedYear());
      browsing.setDisplayedMonth(accountBean.getDisplayedMonth());
      browsing.setDisplayedDay(accountBean.getDisplayedDay());
      browsing.setView(accountBean.getCalendarView());

      SelectElement dateType = new SelectElement();
      dateType.setId("dateType");
      dateType.setName("dateType");
      dateType.setDisplayNames(new String[] {"Starting day", "Ending day"});
      dateType.setValues(new String[] {"startDate", "endDate"});
      String selectedDateType = accountBean.getDateType();
      if(null==selectedDateType||"".equals(selectedDateType))
         selectedDateType = "endDate";
      dateType.setSelectedValue(selectedDateType);
      browsing.setDateTypeSelector(dateType);

      String[][] pTypes = accountBean.getAvailableProjectTypes();
      SelectElement projectType = new SelectElement();
      projectType.setId("projectType");
      projectType.setName("projectType");
      projectType.setDisplayNames(pTypes[1]);
      projectType.setValues(pTypes[0]);
      String selectedProjectType = accountBean.getProjectType();
      if(null==selectedProjectType||"".equals(selectedProjectType))
         selectedProjectType = pTypes[0][0];
      projectType.setSelectedValue(selectedProjectType);
      browsing.setProjectTypeSelector(projectType);

      String[] labs = accountBean.getAllDomains();
      SelectElement lab = new SelectElement();
      lab.setId("institute");
      lab.setName("institute");
      lab.setDisplayNames(labs);
      lab.setValues(labs);
      String selectedLab = accountBean.getInstitute();
      if(null==selectedLab||"".equals(selectedLab))
         selectedLab = labs[0];
      lab.setSelectedValue(selectedLab);
      browsing.setLabSelector(lab);

      browsing.setDisplayItems(createDisplayItems(selectedProjectType, accountBean));

      ButtonElement browse = new ButtonElement();
      browse.setAction("javascript:submitFormThenTargetTo('" + id + "', 'browse', 'rightTopFrame')");
      browse.setAlt("Send browsing request.");
      browse.setName("browse");
      browse.setOffIcon(codeBase + "/images/English/btn_submit.gif");
      browse.setOnIcon(codeBase + "/images/English/btn_submit_on.gif");
      browsing.addASubcontrol(browse);

      ButtonElement help = new ButtonElement();
      help.setAction("javascript:top.topFrame.openSWHelpWindow('" + codeBase + "/help/English/help.jsp?right=schedule.htm#project')");
      help.setName("help");
      help.setOffIcon(codeBase + "/images/English/btn_help.gif");
      help.setOnIcon(codeBase + "/images/English/btn_help_on.gif");
      help.setAlt("Help");
      browsing.addASubcontrol(help);

      return browsing;
   }

   private ReportsSearchingControl createSearchingControl(String id, ReportsBrowsingPanelBean accountBean)
   {
      ReportsSearchingControl searching = new ReportsSearchingControl();
      searching.setCodeBase(codeBase);
      searching.setId(id);
      searching.setActionLink("/wf/reportsList.wf");
      searching.setSearchYearFrom(accountBean.getSearchYearFrom());
      searching.setSearchMonthFrom(accountBean.getSearchMonthFrom());
      searching.setSearchDayFrom(accountBean.getSearchDayFrom());
      searching.setSearchYearTo(accountBean.getSearchYearTo());
      searching.setSearchMonthTo(accountBean.getSearchMonthTo());
      searching.setSearchDayTo(accountBean.getSearchDayTo());
      searching.setKeywords(accountBean.getKeywords());

      // Date type
      SelectElement dateType = new SelectElement();
      dateType.setId("dateType");
      dateType.setName("dateType");
      dateType.setDisplayNames(new String[] {"Starting day", "Ending day"});
      dateType.setValues(new String[] {"startDate", "endDate"});
      String selectedDateType = accountBean.getDateType();
      if(null==selectedDateType||"".equals(selectedDateType))
         selectedDateType = "endDate";
      dateType.setSelectedValue(selectedDateType);
      searching.setDateTypeSelector(dateType);

      // Project type
      String[][] pTypes = accountBean.getAvailableProjectTypes();
      SelectElement projectType = new SelectElement();
      projectType.setId("projectType");
      projectType.setName("projectType");
      projectType.setDisplayNames(pTypes[1]);
      projectType.setValues(pTypes[0]);
      //projectType.setOnChange("javascript:submitFormThenTargetTo('" + id + "','search', 'rightTopFrame')");
      String selectedProjectType = accountBean.getProjectType();
      if(null==selectedProjectType||"".equals(selectedProjectType))
         selectedProjectType = pTypes[0][0];
      projectType.setSelectedValue(selectedProjectType);
      searching.setProjectTypeSelector(projectType);

      // Lab name
      String[] labs = accountBean.getAllDomains();
      SelectElement lab = new SelectElement();
      lab.setId("institute");
      lab.setName("institute");
      lab.setDisplayNames(labs);
      lab.setValues(labs);
      String selectedLab = accountBean.getInstitute();
      if(null==selectedLab||"".equals(selectedLab))
         selectedLab = labs[0];
      lab.setSelectedValue(selectedLab);
      searching.setLabSelector(lab);

      // Search by
      SelectElement searchType = new SelectElement();
      searchType.setId("searchBy");
      searchType.setName("searchBy");
      searchType.setDisplayNames(new String[] {"Project Name", "Lab Head", "Investigator"});
      searchType.setValues(new String[] {"name", "labHead", "investigator"});
      String selectedType = accountBean.getSearchBy();
      if(null==selectedType||"".equals(selectedType))
         selectedType = "name";
      searchType.setSelectedValue(selectedType);
      searching.setSearchTypeSelector(searchType);

      // isAnd
      RadioButtonGroup andOr = new RadioButtonGroup();
      andOr.setId("andOr");
      andOr.setName("andOr");
      andOr.setDisplayNames(new String[] { "and", "or"});
      andOr.setValues(new String[] { "and", "or"});
      String selectedAndOr = accountBean.getAndOr();
      if(null==selectedAndOr||"".equals(selectedAndOr))
         selectedAndOr = "and";
      andOr.setSelectedValue(selectedAndOr);
      searching.setAndOr(andOr);

      //searching.setDisplayItems(createDisplayItems(selectedProjectType, accountBean));

      ButtonElement search = new ButtonElement();
      search.setAction("javascript:submitFormThenTargetTo('" + id + "','search', 'rightTopFrame')");
      search.setAlt("Sending searching request.");
      search.setName("search");
      search.setOffIcon(codeBase + "/images/English/btn_submit.gif");
      search.setOnIcon(codeBase + "/images/English/btn_submit_on.gif");
      searching.addASubcontrol(search);

      ButtonElement help2 = new ButtonElement();
      help2.setAction("javascript:top.topFrame.openSWHelpWindow('" + codeBase + "/help/English/help.jsp?right=schedule.htm#project')");
      help2.setName("help");
      help2.setOffIcon(codeBase + "/images/English/btn_help.gif");
      help2.setOnIcon(codeBase + "/images/English/btn_help_on.gif");
      help2.setAlt("Help");
      searching.addASubcontrol(help2);

      return searching;
   }

   private CheckBoxGroup createDisplayItems(String selectedProjectType, ReportsBrowsingPanelBean rbpBean)
   {
      boolean isClient = rbpBean.gotPermit("ReportManager", rbpBean.getProjectType(), ReportManager.CLIENT);

//System.out.println("---------------> is Client:" + isClient);

      CheckBoxGroup displayItems = new CheckBoxGroup();
      displayItems.setId("displayItems");
      displayItems.setName("displayItems");

      CheckBox item = null;
      Stage[] templates = rbpBean.getAllStageTemplates(selectedProjectType);
      Project pTemplate = rbpBean.getProjectTemplate(selectedProjectType);

      //Iterating all projects
      try
      {
         //item = new CheckBox();
         //item.setId("projectName");
         //item.setDisplayName("Project Name");
         //item.setValue("name");
         //item.setIsChecked(true);
         //displayItems.addASubcontrol(item);

         item = new CheckBox();
         item.setId("domain");
         item.setDisplayName("Lab Name");
         item.setValue("domain");
         item.setIsChecked(true);
         displayItems.addASubcontrol(item);

         item = new CheckBox();
         item.setId("investigator");
         item.setDisplayName("Investigator");
         item.setValue("investigator");
         item.setIsChecked(true);
         displayItems.addASubcontrol(item);

         // Iterating all project's datas
         Data[] datas = pTemplate.getDatas();
         for(int ii=0; ii<datas.length; ii++)
         {
            if(!datas[ii].getOnMasterTable())
               continue;
            item = new CheckBox();
            item.setId(datas[ii].getName());
            item.setDisplayName(datas[ii].getBriefDisplayName());
            item.setValue(datas[ii].getName());
            item.setIsChecked(true);
            displayItems.addASubcontrol(item);
         }

         // Iterating all stages
         String stageName = null;
         for(int j=0; j<templates.length; j++)
         {
            stageName = templates[j].getName();
            if(templates[j].getDateOnMasterTable())
            {
               item = new CheckBox();
               item.setId("date_" + templates[j].getName());
               item.setDisplayName(templates[j].getDateDisplayName());
               item.setValue("date_" + templates[j].getName());
               item.setIsChecked(true);
               displayItems.addASubcontrol(item);
            }

            datas = templates[j].getDatas();
            for(int k=0; k<datas.length; k++)
            {
               // 1. data was defined shown on master table
               // 2. the user either is not client
               // 3. or user is client and data is available for client
               if(!(datas[k].getOnMasterTable()&&(!isClient||(isClient&&datas[k].getAvailForClient()))))
                  continue;

               item = new CheckBox();
               item.setId(stageName + "_" + datas[k].getName());
               item.setDisplayName(datas[k].getBriefDisplayName());
               item.setValue(stageName + "_" + datas[k].getName());
               displayItems.addASubcontrol(item);
            }
         }
      }
      catch(Exception e)
      {
         e.printStackTrace();
      }

      return displayItems;
   }

}