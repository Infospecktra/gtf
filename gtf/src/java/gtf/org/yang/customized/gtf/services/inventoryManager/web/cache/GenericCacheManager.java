/* Generated by Together */
/**
 * @author Celina Yang
 * @version version 1.2 
 */
package org.yang.customized.gtf.services.inventoryManager.web.cache;

import java.io.Serializable;
//import com.yang.cache.GenericCache;
//import com.yang.cache.CacheClientIF;
import java.util.Calendar;
import java.sql.Date;
import java.util.Collection;

public class GenericCacheManager {
    public static GenericCacheManager getInstance() {
        if(null==me)
        {
            synchronized(lock)
            {
                if(null==me)
                {
                    me = new GenericCacheManager();
                }
            }
        }
        return me;
    }
    
    /*
    public void setCacheClient(CacheClientIF cachClient) {
        this.cacheClient = cacheClient;    
    }
    */
    public Object fetchElementFromCache(String searchKey,int dataReplacedInterval) //throws DataAccessException
    {
        if(searchKey==null||"".equals(searchKey))
            return null;
            //throw new DataAccessException("[GenericCacheManager::fetchElement]---searchKey is null or empty string.");
        Object obj = cache.fetchElement(searchKey);
        if(obj==null)
           return  null;
        CacheEntry cacheEntry = (CacheEntry)obj;
        long previousAccessingTime = cacheEntry.getDataAccessingTime();
        //System.out.println("[GenericCacheManager::fetchElementCache]---cachEntry.getElement().size()="+((Collection)(cacheEntry.getElement())).size());
        Calendar calendar = Calendar.getInstance();
        long now = calendar.getTime().getTime();
        //System.out.println("========================================================");        
        //System.out.println("[GenericCacheManager::fetchElementCache]---now-dataReplacedInterval="+(now-dataReplacedInterval));
        //System.out.println("[GenericCacheManager::fetchElementCache]---previousAccessingTime="+previousAccessingTime);
        //System.out.println("[GenericCacheManager::fetchElementCache]---(+ database query||- cache query) => "+(now-dataReplacedInterval-previousAccessingTime));

        if(now-dataReplacedInterval>=previousAccessingTime)
           return null;
        
        return cacheEntry;            
    }
    
    public Object fetchElementFromCache(String searchKey)
    {
        if(searchKey==null||"".equals(searchKey))
            return null;
            //throw new DataAccessException("[GenericCacheManager::fetchElement]---searchKey is null or empty string.");
        Object obj = cache.fetchElement(searchKey);
        if(obj==null)
           return  null;
        CacheEntry cacheEntry = (CacheEntry)obj;
      
        return cacheEntry;
    }
    
    public Object removeElementFromCache(String searchKey) 
    {
        return cache.removeElement(searchKey);
    }

    public boolean addElementToCache(String searchKey,Object element) {//throws DataAccessException {
        if(searchKey==null||"".equals(searchKey))
            return false;
            //throw new DataAccessException("[GenericCacheManager::addElement]---searchKey is null or empty string.");
        if(element==null)
            return false;
            //throw new DataAccessException("[GenericCacheManager::addElement]---element put to cache is null.");
        //Calendar calendar = Calendar.getInstance();
        //long now = calendar.getTime().getTime();
        CacheEntry cacheEntry = new CacheEntry();
        //cacheEntry.setDataAccessingTime(now);
        cacheEntry.setElement(element);
        
        return cache.addElement(searchKey,cacheEntry);
    }

    public int size() {
        return cache.size();
    }

    public void clear() {
        cache.clear();
    }

    private GenericCacheManager() {
        cache = new GenericCache();
    }

    private static Object lock = new Object();
    private static GenericCacheManager me;
    private GenericCache cache;
    //private CacheClientIF cacheClient;
}
