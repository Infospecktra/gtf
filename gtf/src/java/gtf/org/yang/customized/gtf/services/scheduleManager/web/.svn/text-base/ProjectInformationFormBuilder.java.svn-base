/* Generated by Together */
package org.yang.customized.gtf.services.scheduleManager.web;

import org.yang.web.view.controls.WebControlBuilder;
import org.yang.web.view.controls.WebControl;
import org.yang.web.controller.GenericBean;
import org.yang.web.view.controls.jsStyle.UIForm;
import org.yang.web.view.controls.jsStyle.TextField;
import org.yang.web.view.controls.jsStyle.PassElement;
import org.yang.web.view.controls.jsStyle.SelectElement;
import org.yang.web.view.controls.jsStyle.TextAreaElement;
import org.yang.web.view.controls.jsStyle.ButtonElement;
import java.util.HashMap;
import java.util.Iterator;
import org.yang.customized.gtf.services.dataAccess.ProjectFactory;
import org.yang.customized.gtf.services.dataAccess.Project;
import org.yang.web.view.controls.jsStyle.WebControlGroup;
import org.yang.services.dataAccess.DataGroup;
import org.yang.services.dataAccess.Data;
import org.yang.web.view.controls.jsStyle.misc.MessageDisplayingBanner1;
import org.yang.customized.gtf.services.scheduleManager.ScheduleManager;

public class ProjectInformationFormBuilder implements WebControlBuilder
{
   public WebControl build(GenericBean bean) throws Exception
   {
      ProjectInformationBean projectBean = (ProjectInformationBean)bean;
      String codeBase = projectBean.getAppBase() + projectBean.getGuiBase();
      Project currentProject = projectBean.getCurrentProject();

      WebControlGroup controlGroup = new WebControlGroup();

      if(GenericBean.ERR==projectBean.getState())
      {
         MessageDisplayingBanner1 banner = new MessageDisplayingBanner1();
         banner.setText(projectBean.getMsg());//"Some required field is empty, Please submit it again.");
         banner.setColor("#cc0000");
         controlGroup.addASubcontrol(banner);
      }

      // User permission
      boolean xdomain = projectBean.gotPermit("ScheduleManager", currentProject.getType(), ScheduleManager.CROSS_DOMAIN);

      UIForm form = new UIForm();
      form.setCaption("Basic Information");

      if(Project.CREATE==currentProject.getAction())
      {
         SelectElement select = new SelectElement();
         select.setTitle("Project Type");
         select.setId("type");
         select.setName("type");
         select.setOnChange("javascript:submitForm('projectInformation','clear')");
         select.setSelectedValue(currentProject.getType());
         String[][] typeNames = projectBean.getAvailableProjectTypes();
         select.setValues(typeNames[0]);
         select.setDisplayNames(typeNames[1]);
         form.addASubcontrol(select);
      }
      else
      {
         TextField type = new TextField();
         type.setTitle("Project Type");
         type.setId("type");
         type.setName("type");
         type.setValue(currentProject.getDisplayTypeName());
         type.setDisplayOnly(true);
         form.addASubcontrol(type);
      }

      TextField projectId = new TextField();
      projectId.setTitle("Project ID");
      projectId.setId("id");
      projectId.setName("id");
      projectId.setValue(currentProject.getId());
      projectId.setIsReadOnly(true);
      form.addASubcontrol(projectId);


      TextField projectname = new TextField();
      projectname.setTitle("Project Name");
      projectname.setId("name");
      projectname.setName("name");
      projectname.setValue(currentProject.getName());
      projectname.setIsMandatory(true);
      form.addASubcontrol(projectname);

      String domain = currentProject.getDomain();

      if(Project.CREATE==currentProject.getAction()&&xdomain)
      {
         SelectElement institute = new SelectElement();
         institute.setTitle("Lab's Name");
         institute.setId("domain");
         institute.setName("domain");
         institute.setOnChange("javascript:submitForm('projectInformation','clear')");
         institute.setSelectedValue(domain);
         String[] domainNames = projectBean.getAllDomainNames();
         institute.setValues(domainNames);
         institute.setDisplayNames(domainNames);
         form.addASubcontrol(institute);
      }
      else
      {
         TextField institute = new TextField();
         institute.setTitle("Lab's Name");
         institute.setId("domain");
         institute.setName("domain");
         institute.setValue(domain);
         institute.setDisplayOnly(true);
         form.addASubcontrol(institute);
      }

      if(Project.CREATE==currentProject.getAction()&&xdomain)
      {
         SelectElement investigator = new SelectElement();
         investigator.setTitle("Investigator's Name");
         investigator.setId("investigator");
         investigator.setName("investigator");
         investigator.setOnChange("");
         String me = currentProject.getInvestigator();
         investigator.setSelectedValue(me);
         String[] investigatorNames = projectBean.getAllInvestigatorNames(domain);
         String[] investigatorDisplayNames = new String[investigatorNames.length];
         for(int i=0 ;i<investigatorNames.length; i++)
         {
            investigatorDisplayNames[i] = projectBean.whoIsIt(domain, investigatorNames[i]);
         }
         investigator.setValues(investigatorNames);
         investigator.setDisplayNames(investigatorDisplayNames);
         form.addASubcontrol(investigator);
      }
      else
      {
         TextField investigator = new TextField();
         investigator.setTitle("Investigator's Name");
         investigator.setId("investigator");
         investigator.setName("investigator");
         investigator.setValue(projectBean.whoIsIt(domain, currentProject.getInvestigator()));
         investigator.setDisplayOnly(true);
         form.addASubcontrol(investigator);
      }

      TextField accountId = new TextField();
      String type = projectBean.getType();
      String displayName = "Account ID";
      String projectCode = currentProject.getAccountId();

      if("GT".equals(type)&&Project.CREATE==currentProject.getAction())
      {
        displayName = "Project Code";
        projectCode = "999999";
      }
      accountId.setTitle(displayName);
      accountId.setId("accountId");
      accountId.setName("accountId");
      
      accountId.setValue(projectCode);
      accountId.setIsMandatory(true);
      //accountId.setIsReadOnly(true);
      form.addASubcontrol(accountId);

      TextField protocolNumber = new TextField();
      protocolNumber.setTitle("Protocol Number");
      protocolNumber.setId("protocolNumber");
      protocolNumber.setName("protocolNumber");
      protocolNumber.setValue(currentProject.getProtocolNumber());
      protocolNumber.setIsMandatory(true);
      //protocolNumber.setIsReadOnly(true);
      form.addASubcontrol(protocolNumber);

      TextAreaElement description = new TextAreaElement();
      description.setTitle("Description");
      description.setId("description");
      description.setName("description");
      description.setValue(currentProject.getDescription());
      form.addASubcontrol(description);
      controlGroup.addASubcontrol(form);

      DataGroup[] dataGroups = currentProject.getGroups();
      Data[] datas = null;
      TextField data = null;
      Iterator it = null;
      String name = null;
      for(int i=0; i<dataGroups.length; i++)
      {
         datas = currentProject.getDatas(dataGroups[i].getName());
         form = new UIForm();
         form.setCaption(dataGroups[i].getDisplayName());
         for(int j=0; j<datas.length; j++)
         {
            form.addASubcontrol(datas[j].getDisplayer().getDisplay(datas[j],
                                                                   null,
                                                                   false));
         }

         if(i==dataGroups.length-1)
         {
            ButtonElement save = new ButtonElement();
            ButtonElement copy = new ButtonElement();
            if(Project.CREATE==currentProject.getAction()&&
               projectBean.gotPermit("ScheduleManager", currentProject.getType(), "create"))
            {
               save.setAction("javascript:submitForm('projectInformation','create')");
               save.setAlt("Create project");
               save.setName("save");
               save.setOffIcon(codeBase + "/images/English/btn_create.gif");
               save.setOnIcon(codeBase + "/images/English/btn_create_on.gif");
               form.addAButton(save);
            }
            else if(projectBean.gotPermit("ScheduleManager", currentProject.getType(), "update"))
            {
               save.setAction("javascript:submitForm('projectInformation','update')");
               save.setAlt("Update project information");
               save.setName("save");
               save.setOffIcon(codeBase + "/images/English/btn_update.gif");
               save.setOnIcon(codeBase + "/images/English/btn_update_on.gif");
               form.addAButton(save);

               copy.setAction("javascript:submitForm('projectInformation','copy')");
               copy.setAlt("Create similar project");
               copy.setName("copy");
               copy.setOffIcon(codeBase + "/images/English/btn_copy.gif");
               copy.setOnIcon(codeBase + "/images/English/btn_copy_on.gif");
               form.addAButton(copy);
            }

            ButtonElement help = new ButtonElement();
            help.setAction("javascript:top.topFrame.openSWHelpWindow('" + codeBase + "/help/English/help.jsp?right=schedule.htm#project')");
            help.setName("help");
            help.setOffIcon(codeBase + "/images/English/btn_help.gif");
            help.setOnIcon(codeBase + "/images/English/btn_help_on.gif");
            help.setAlt("Help");
            form.addAButton(help);
         }
         controlGroup.addASubcontrol(form);
      }
      return controlGroup;
   }
}