/* Generated by Together */

package org.yang.customized.gtf.services.messageManager.web;

import org.yang.web.applicationContainer.SecuredBean;
import java.util.Collection;
import org.yang.web.view.controls.jsStyle.navigationList.NavigationList;
import java.util.ArrayList;
import java.util.Arrays;
import org.yang.customized.gtf.services.projectManager.ProjectManager;
import java.io.ObjectOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import org.yang.customized.gtf.services.dataAccess.Message;
import org.yang.customized.gtf.services.messageManager.MessageManager;

public class MessageListBean extends MessageServiceBean
{
   public static final long serialVersionUID = 4711296380079764901L;

   private int event = 0;
   public int getEvent() { return event; }

   private String idFrom = null;
   public void setIdFrom(String idFrom) { this.idFrom = idFrom; }
   public String getIdFrom() { return idFrom; }

   private String idTo = null;
   public void setIdTo(String idTo) { this.idTo = idTo; }
   public String getIdTo() { return idTo; }

   private long[] targetIds = null;
   public void setTargetIds(long[] targetIds) { this.targetIds = targetIds; }

   private String type = "send";
   public void setType(String type) { this.type = type; }
   public String getType() { return type; }

   private String peerDomain = null;
   public void setPeerDomain(String peerDomain) { this.peerDomain = peerDomain; }
   public String getPeerDomain() { return peerDomain; }

   protected boolean isSent = false;
   public boolean getIsSent(){ return isSent; }
   public void setIsSent(boolean isSent) { this.isSent = isSent; }

   public MessageListBean()
   {
      super();
   }

   /*********************************
    *  All methods used by Builder  *
    *********************************/

   public String getDomain()
   {
      return passport.getDomain();
   }

   public Message[] getAllAvailableMessages()
   {
       try
       {
          String dateString = (displayedYear+1900) + "-" +
                              (displayedMonth+1) + "-" +
                              (displayedDay);

          if(MessageManager.RECEIVE.equals(type))
          {
             return msgMgr.getMessages(new String[]{"domainFrom='"+peerDomain+"'",
                                                    "domainTo='"+this.getDomain()+"'",
                                                    "theDate='" +dateString+"'",
                                                    "isSent=1"}, true);
          }
          else if(MessageManager.SEND.equals(type))
          {
             return msgMgr.getMessages(new String[]{"domainFrom='"+this.getDomain()+"'",
                                                    "domainTo='"+peerDomain+"'",
                                                    "theDate='" +dateString+"'"}, true);
          }
       }
       catch(Exception e)
       {
          System.out.println("[MessageListBean::getAllAvailableMessages] Exception happen : " + e.getMessage());
       }
       return new Message[0];
   }

   public String[] getAllAvailableDomains()
   {
      String[] domains = passport.getServiceAreas("MessageManager");
      ArrayList availableDomains = new ArrayList();

      for(int i=0; i<domains.length; i++)
      {
         //if(gotPermit("MessageManager", type, type))
            availableDomains.add(domains[i]);
      }

      return (String[])availableDomains.toArray(new String[]{});
   }

   public String[] getAllAvailableTypes()
   {
      if("GTF".equals(getDomain()))
      {
         return new String[]{MessageManager.SEND, MessageManager.RECEIVE};
      }
      else
      {
         return new String[]{MessageManager.SEND};
      }
   }

   /***************************************
    *  Implement GenericHandler's method  *
    ***************************************/

   protected void init() throws Exception
   {
      System.out.println("[MessageListBean::::init] entering!");

      ensureResource();

      if(null==msgMgr)
         throw new Exception("User manager should not be null.");
   }

   protected String altPage()
   {
      System.out.println("[MessageListBean::::init] ::altPage] reload page :" + isReload);
      if(isReload)
      {
         passport.setRuntimeProperty("right", "/message.wf?actiontype=clear");
         return "reload-forward";
      }
      else
         return null;
   }

   protected void destroy()
   {
      msgMgr = null;
   }

   /***************************************
    *           my action method          *
    ***************************************/

   public void load()
   {
      if(null==peerDomain)
      {
         String[] areas = this.getAllAvailableDomains();
         if(null!=areas&&0<areas.length)
         {
            peerDomain = areas[0];
         }
      }
      removeControl("messageList");
   }

   public void changeType()
   {
      passport.setRuntimeProperty("type", type);
      isReload = true;
   }

   public void changeDomain()
   {
      passport.setRuntimeProperty("domainFrom", peerDomain);
      isReload = true;
   }

   public void delete()
   {
      if(null==targetIds)
        return;
      for(int i=0; i<targetIds.length; i++)
      {
         try
         {
            msgMgr.removeMessage(targetIds[i]);
         }
         catch(Exception e)
         {
            e.printStackTrace();
         }
      }
      isReload = true;
   }

   public void append()
   {

   }
}