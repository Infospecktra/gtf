/* Generated by Together */
package org.yang.customized.gtf.services.projectManager.web;

import org.yang.web.view.controls.WebControlBuilder;
import org.yang.web.view.controls.WebControl;
import org.yang.web.controller.GenericBean;
import org.yang.web.view.controls.jsStyle.UIForm;
import org.yang.web.view.controls.jsStyle.TextField;
import org.yang.web.view.controls.jsStyle.PassElement;
import org.yang.web.view.controls.jsStyle.SelectElement;
import org.yang.web.view.controls.jsStyle.TextAreaElement;
import org.yang.web.view.controls.jsStyle.ButtonElement;
import org.yang.web.view.controls.jsStyle.dataSheet.DataSheet;
import org.yang.customized.gtf.services.dataAccess.Project;
import org.yang.web.view.controls.jsStyle.dataSheet.DataRow;
import org.yang.web.view.controls.jsStyle.dataSheet.DataItem;
import org.yang.util.DateFormatter;
import java.util.Date;
import org.yang.web.view.controls.jsStyle.dataSheet.TextItem;
import org.yang.web.view.controls.jsStyle.dataSheet.AccessIcon;
import org.yang.web.view.controls.jsStyle.dataSheet.DataSheetSet;
import org.yang.customized.gtf.services.dataAccess.Stage;
import org.yang.services.dataAccess.Data;
import java.util.HashMap;
import org.yang.services.dataAccess.DataUnavailableException;
import org.yang.web.view.controls.jsStyle.misc.MessageDisplayingBanner;
import org.yang.customized.gtf.services.projectManager.ProjectManager;
import org.yang.util.SMUtility;
import org.yang.customized.gtf.services.dataAccess.DateTextItem;
import org.yang.web.view.controls.jsStyle.dataSheet.SelectableItem;

public class MasterTableBuilder implements WebControlBuilder
{
   private StringBuffer sb = null;
   public WebControl build(GenericBean bean) throws Exception
   {
      System.out.println("[MasterTableBuilder::build] time 1 : " + System.currentTimeMillis());
      StageNotesBean stageBean = (StageNotesBean)bean;

      // if no project available
      Project[] projects = null;
      try
      {
         projects = stageBean.getAllProjects();
      }
      catch(Exception e){}

      if(null==projects||0>=projects.length)
      {
         MessageDisplayingBanner banner = new MessageDisplayingBanner();
         banner.setText("No activated project is available.");
         banner.setColor("#c0c0c0");
         return banner;
      }

      System.out.println("[MasterTableBuilder::build] time 2 : " + System.currentTimeMillis());

      String codeBase = stageBean.getAppBase() + stageBean.getGuiBase();
      DataSheetSet reportDetail = null;
      if(null==(reportDetail=(DataSheetSet)stageBean.getControl("masterTable")))
      {
         reportDetail = createReportDetail(stageBean, projects, codeBase);
         stageBean.setControl("masterTable", reportDetail);
      }
      else
      {
         reportDetail.getDatasheet("masterTable").getPageNumberSelector().setSelectedValue(stageBean.getPage());
      }
      reportDetail.getDatasheet("masterTable").sort(stageBean.getSortBy(), stageBean.getIsAcending());
      String currentProject = null;
      if(null!=stageBean.getCurrentProject())
      {
        currentProject = stageBean.getCurrentProject().getId();
        reportDetail.setHighlightId(currentProject);
      }

      System.out.println("[MasterTableBuilder::build] time 3 : " + System.currentTimeMillis());

      return reportDetail;
   }

   private DataSheetSet createReportDetail(StageNotesBean stageBean, Project[] projects, String codeBase)
   {
      System.out.println("[MasterTableBuilder::createReportDetail] time 1 : " + System.currentTimeMillis());
      boolean isClient = stageBean.gotPermit("ProjectManager", stageBean.getProjectType(), ProjectManager.CLIENT);

//System.out.println("---------------> is Client:" + isClient);
//System.out.println("---------------> stage owner type:" + stageOwnerType);

      DataSheetSet reportDetail = new DataSheetSet();
      DataSheet sheet = new DataSheet();
      sheet.setId("masterTable");
      sheet.setActionLink("/wf/stageNotes.wf");
      sheet.setRowsPerPage(10);

      SelectableItem paging = new SelectableItem();
      paging.setId("page");
      paging.setName("page");
      paging.setCaption("Select page");
      paging.setActionLink("/wf/stageNotes.wf");
      paging.setActionTarget("_parent");
      paging.setOnChange("javascript:submitForm('" + paging.getId() + "','changePage')");
      //System.out.println("page----------------------->" + stageBean.getPage());
      paging.setSelectedValue(stageBean.getPage());
      paging.setNeedPromptOption(false);

      sheet.setPageNumberSelector(paging);
      reportDetail.addDataSheet(sheet);

      DataRow row = null;
      TextItem item = null;

      Stage[] templates = stageBean.getAllStageTemplates();
      System.out.println("[MasterTableBuilder::createReportDetail] time 2 : " + System.currentTimeMillis());

      HashMap stages = null;
      Stage aStage = null;
      Data[] datas = null;
      //String[] values = null;
      String value = null;
      String domain = null;
      String stageColor = null;
      String dataOwnerType = null;
      boolean isCurrentProject = false;

      String projId   = null;
      String projName = null;
      String projType = null;
      String stgName = null;
      HashMap dataTemplateMap = new HashMap();

      for(int i=0; i<projects.length; i++)
      {
         try
         {
            projId = projects[i].getId();
            projName = projects[i].getName();
            projType = projects[i].getType();

            //Project informations
            row = new DataRow();
            row.setId(projId);
            //row.setId(projects[i].getName());

            // 1. project name
            item = new TextItem();
            item.setName("Project Name");
            item.setId("name");
            item.setText(projName);
            row.addElement(item);

            domain = projects[i].getDomain();

            // 2. lab name
            item = new TextItem();
            item.setName("Lab Name");
            item.setId("domain");
            item.setText(domain);
            row.addElement(item);

            // 3. investigator
            item = new TextItem();
            item.setName("Investigator");
            item.setId("investigator");
            item.setText(stageBean.whoIsIt(domain, projects[i].getInvestigator()));
            row.addElement(item);

            // 4. other special project datas
            datas = projects[i].getDatas();
            for(int ii=0; ii<datas.length; ii++)
            {
               if(!datas[ii].getOnMasterTable())
                  continue;
				//System.out.println("ProjectType : " + projects[i].getType() + "Name : " + datas[ii].getBriefDisplayName() + ", onMasterTable : //yes");
               item = new TextItem();
               item.setName(datas[ii].getBriefDisplayName());
               item.setId(datas[ii].getBriefDisplayName().replace('#','N'));
               value = datas[ii].getValue();
               if(null==value||"".equals(value))
                  value = "n/a";
               item.setText(value);
               row.addElement(item);
            }

            // loop all stages
            stages = stageBean.getCurrentAvailableStages(projId);
            for(int j=0; j<templates.length; j++)
            {
               // stage template
               stgName = templates[j].getName();
               // Stage information
               aStage = (Stage)stages.get(stgName);
               stageColor = templates[j].getBgnColorOnMasterTable();

               // if auto-caught date need to be shown on master table
               if(templates[j].getDateOnMasterTable())
               {
                  item = new TextItem();
                  item.setBgcolor(stageColor);
                  item.setName(templates[j].getDateDisplayName());
                  item.setId(templates[j].getDateDisplayName().replace('#','N'));
                  value = null;
                  if(null!=aStage&&-1!=aStage.getDoneDate())
                     value = DateFormatter.getDateTimeString(new Date(aStage.getDoneDate()), templates[j].getDateDisplayFormat());
                  if(null==value||"".equals(value))
                     value = "n/a";
                  if(null!=aStage)
                  {
                     //item.setActionLink("/wf/stageNotes.wf?actiontype=load&projectId=" + projId +
                     //                                                    "&name=" + aStage.getName() +
                     //                                                    "&projectType=" + projType +
                     //                                                    "#" + projName);
                     sb = new StringBuffer();
                     sb.append("/wf/stageNotes.wf?actiontype=load&projectId=").append(projId)
                       .append("&name=").append(stgName)
                       .append("&projectType=").append(projType)
                       .append("#").append(projName);
                     item.setActionTarget("rightFrame");
                     item.setActionLink(sb.toString());
                     item.setBold(true);
                  }
                  item.setText(value);
                  //item.setAltText("Project name:" + projName + ", Data name" + templates[j].getDateDisplayName());
                  sb = new StringBuffer();
                  sb.append("Project name:").append(projName)
                    .append(", Data name").append(templates[j].getDateDisplayName());
                  item.setAltText(sb.toString());
                  row.addElement(item);
               }

               // Display stage datas
               sb = new StringBuffer();
               sb.append(projType).append(".").append(stgName);
               String key = sb.toString();
               if(null==(datas=(Data[])dataTemplateMap.get(key)))
               {
                  datas = templates[j].getDatas();
                  dataTemplateMap.put(key, datas);
               }

               for(int k=0; k<datas.length; k++)
               {
                  // 1. data was defined shown on master table
                  // 2. the user either is not client
                  // 3. or user is client and data is available for client
                  if(datas[k].getOnMasterTable()&&(!isClient||(isClient&&datas[k].getAvailForClient())))
                  {
                     if("DateString".equals(datas[k].getType()))
                        item = new DateTextItem();
                     else
                        item = new TextItem();
                     item.setColor("#000066");
                     //item.setAltText("Project name:" + projects[i].getName() + ", Data name:" + datas[k].getBriefDisplayName());

                     sb = new StringBuffer();
                     sb.append("Project name:").append(projName)
                       .append(", Data name:").append(datas[k].getBriefDisplayName());
                     item.setAltText(sb.toString());
                     item.setBgcolor(stageColor);
                     item.setId(datas[k].getBriefDisplayName().replace('#','N'));
                     item.setName(datas[k].getBriefDisplayName());
                     item.setWidth(datas[k].getWidth());
                     //item.setIsSortable(datas[i].getIsSortable());
                     if(null!=aStage)
                     {
                        try
                        {
                           value = aStage.getData(datas[k].getName()).getSummary(isClient);

                           ////////////////////////////////////////////////////////////////////////////
                           //    Very special for stupid printout
                           ////////////////////////////////////////////////////////////////////////////
                           //if("chimerism".equals(datas[k].getName()))
                           //{
                           //   String sValue =aStage.getData(datas[k].getName()).getValue();
                           //   if(null!=sValue&&!"".equals(sValue))
                           //      reportDetail.addDataSheet(buidChimerism("Project: " + projects[i].getName(), sValue));
                           //}
                           ////////////////////////////////////////////////////////////////////////////


                           //item.setActionLink("/wf/stageNotes.wf?actiontype=load&projectId=" + projId +
                           //                                                    "&name=" + stgName +
                           //                                                    "&projectType=" + projType +
                           //                                                    "#" + projName);
                           sb = new StringBuffer();
                           sb.append("/wf/stageNotes.wf?actiontype=load&projectId=").append(projId)
                             .append("&name=").append(stgName)
                             .append("&projectType=").append(projType)
                             .append("#").append(projName);
                           item.setActionLink(sb.toString());
                           item.setActionTarget("rightFrame");
                           item.setBold(true);
                           //System.out.println("data name:" + datas[k].getName() + ", data value:" + value);
                           if(null==value||"".equals(value))
                           {
                              item.setText("n/a");
                           }
                           else
                           {
                              item.setText(value);
                           }
                        }
                        catch(DataUnavailableException e)
                        {
                           System.out.println("Data is not available, set it to empty string.");
                           item.setText("n/a");
                        }
                     }
                     else
                     {
                        item.setText("n/a");
                     }
                     row.addElement(item);
                  }
               }
            }

            sheet.addDataRow(row);
         }
         catch(Exception e)
         {
            e.printStackTrace();
         }
      }
      //System.out.println("[MasterTableBuilder::createReportDetail] time 3 : " + System.currentTimeMillis());

      return reportDetail;
   }

   private DataSheet buidChimerism(String title, String value)
   {
      DataSheet sheet = new DataSheet();
      sheet.setTitle(title);
      sheet.setId("tailRecord");
      sheet.setWidth(50);

      DataRow row = null;
      DataItem item = null;

      String[] columns = {"sex", "chimeric(%)"};
      String[] rows = SMUtility.splitByToken(value, "!", false);
      String[] cols = null;
      int colLength = 0;
      int rowLength = rows.length;

      for(int i=0; i<rowLength; i++)
      {
         try
         {
            //new row
            row = new DataRow();
            item = new TextItem();
            item.setName("number");
            ((TextItem)item).setColor("#000066");
            ((TextItem)item).setBold(true);
            ((TextItem)item).setText((i+1)+"");
            row.addElement(item);

            if(i!=rowLength)
               cols = SMUtility.splitByToken(rows[i], ",", true);
            else
               cols = new String[columns.length];
            colLength = cols.length;

            // loop all colums
            for(int j=0; j<columns.length; j++)
            {
               item = new TextItem();
               item.setIsReadOnly(true);
               ((TextItem)item).setColor("#000066");
               ((TextItem)item).setSize(10);
               item.setId("data");
               item.setName(columns[j]);
               ((TextItem)item).setBold(true);
               if(j>=colLength||null==cols[j])
               {
                  ((TextItem)item).setText("");
               }
               else
               {
                  ((TextItem)item).setText(cols[j]);
               }
               row.addElement(item);
            }
            sheet.addDataRow(row);
         }
         catch(Exception e)
         {
            e.printStackTrace();
         }
      }

      return sheet;
   }
}