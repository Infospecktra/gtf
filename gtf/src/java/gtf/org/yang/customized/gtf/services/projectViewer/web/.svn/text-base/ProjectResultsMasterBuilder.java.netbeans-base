/* Generated by Together */
package org.yang.customized.gtf.services.projectViewer.web;

import org.yang.web.view.controls.WebControlBuilder;
import org.yang.web.view.controls.WebControl;
import org.yang.web.controller.GenericBean;
import org.yang.web.view.controls.jsStyle.UIForm;
import org.yang.web.view.controls.jsStyle.TextField;
import org.yang.web.view.controls.jsStyle.PassElement;
import org.yang.web.view.controls.jsStyle.SelectElement;
import org.yang.web.view.controls.jsStyle.TextAreaElement;
import org.yang.web.view.controls.jsStyle.ButtonElement;
import org.yang.web.view.controls.jsStyle.dataSheet.DataSheet;
import org.yang.web.view.controls.jsStyle.dataSheet.DataRow;
import org.yang.web.view.controls.jsStyle.dataSheet.DataItem;
import org.yang.customized.gtf.services.dataAccess.DateTextItem;
import org.yang.web.view.controls.jsStyle.dataSheet.TextItem;
import org.yang.web.view.controls.jsStyle.dataSheet.AccessIcon;
import org.yang.web.view.controls.jsStyle.dataSheet.DataSheetSet;
import org.yang.util.DateFormatter;
import java.util.Date;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Set;
import java.util.Iterator;
import org.yang.util.SMUtility;
import org.yang.customized.gtf.services.dataAccess.Stage;
import org.yang.customized.gtf.services.dataAccess.Project;
import org.yang.services.dataAccess.Data;
import org.yang.services.dataAccess.DataUnavailableException;
import org.yang.web.view.controls.jsStyle.misc.MessageDisplayingBanner;
import org.yang.customized.gtf.services.projectViewer.ProjectViewerManager;
import org.yang.web.view.controls.jsStyle.dataSheet.SelectableItem;

public class ProjectResultsMasterBuilder implements WebControlBuilder
{
   public WebControl build(GenericBean bean) throws Exception
   {
      ProjectViewerMasterBean projectMasterBean = (ProjectViewerMasterBean)bean;
      Project[] projects = null;
      try
      {
          projects = projectMasterBean.getDisplayProjects(); 
      }
      catch(Exception e){}

     if(null==projects||0>=projects.length)
      {
         MessageDisplayingBanner banner = new MessageDisplayingBanner();
         banner.setText("No matched project is available.");
         banner.setColor("#c0c0c0");
         return banner;
      }

      String codeBase = projectMasterBean.getAppBase() + projectMasterBean.getGuiBase();
      DataSheetSet reportDetail = null;
      if(null==(reportDetail=(DataSheetSet)projectMasterBean.getControl("projectViewerMaster")))
      {
         if(null==(reportDetail=buildDataSheetSet(projectMasterBean, projects, codeBase)))
         {
            MessageDisplayingBanner banner = new MessageDisplayingBanner();
            banner.setText("No matched project is available.");
            banner.setColor("#c0c0c0");
            return banner;
         }
         projectMasterBean.setControl("projectViewerMaster", reportDetail);
      }
      else
      {
         reportDetail.getDatasheet("projectViewerMaster").getPageNumberSelector().setSelectedValue(projectMasterBean.getPage());
      }
      reportDetail.getDatasheet("projectViewerMaster").sort(projectMasterBean.getSortBy(), projectMasterBean.getIsAcending());

      return reportDetail;
   }

   private DataSheetSet buildDataSheetSet(ProjectViewerMasterBean projectMasterBean, Project[] projects, String codeBase)
   {
      DataSheetSet reportDetail = new DataSheetSet();
      reportDetail.addDataSheet(createReportDetail(projectMasterBean, projects, codeBase));
      return reportDetail;
   }

   private DataSheet createReportDetail(ProjectViewerMasterBean projectMasterBean, Project[] projects, String codeBase)
   {
 
      DataSheet sheet = new DataSheet();
      sheet.setId("projectViewerMaster");
      sheet.setActionLink("/wf/projectViewerMaster.wf");
      sheet.setRowsPerPage(20);

      SelectableItem paging = new SelectableItem();
      paging.setId("page");
      paging.setName("page");
      paging.setCaption("Select page");
      //paging.setActionLink("/wf/projectViewerMaster.wf");
      paging.setActionLink("/wf/projectViewerMaster.wf?actiontype=loadMasterTableData&viewMode=projectResults");paging.setOnChange("javascript:submitForm('" + paging.getId() + "','changePage')");
      ////System.out.println("page----------------------->" + projectMasterBean.getPage());
      paging.setSelectedValue(projectMasterBean.getPage());
      paging.setNeedPromptOption(false);
      sheet.setPageNumberSelector(paging);
      sheet.setDataSizeNote("Total size : "+projectMasterBean.getDisplayProjectsSize());
      DataRow row = null;
      TextItem item = null;
      String value = null;
      String id = "";
      String projectNumber = "";
      String investigator = "";
      String labName = "";
      String projectName = "";
      StringBuffer strBuffer = null;
      String[] groupNames = {ProjectViewerManager.DATAGROUP_NAME_3}; //ESCInfo
      String[] onTableNames = {ProjectViewerManager.DATA_ON_TABLE_NAME_1,ProjectViewerManager.DATA_ON_TABLE_NAME_2,ProjectViewerManager.DATA_ON_TABLE_NAME_3};
      String[] keys1 = {"esCelline","numPosClone","numOfColony","germline","chargePoint","injDateClone#ChimeraGrade"}; //1-1Southern analysis/data //1-2Picking Colony/data// //3Injection/
      String[] columnNames1 = {"ESC","# Pos. Clone","Colony #","Germline","Charge point","InjDate,Clone#,Chimera grade"}; 
      String viewMode = projectMasterBean.getViewMode();
      /*
      String targetDomain = "";
      String loginDomain = projectMasterBean.getLoginDomain();
      System.out.println("[ProjectResultMasterBuilder::createList]vvvv----->loginDomain="+loginDomain);
      */
      for(int i=0; i<projects.length; i++)
      { 
         try
         {
      	    StringBuffer personalInfo = new StringBuffer();
            Data[] myData = null;
            row = new DataRow();
            
            projectNumber = projects[i].getAccountId();
            if(projectNumber==null||"null".equals(projectNumber))
            	projectNumber="&nbsp;";
            id=projects[i].getId();     
            investigator = projects[i].getInvestigator();
            labName = projects[i].getDomain();
            personalInfo.append(investigator).append(" /").append(labName);
            projectName = projects[i].getName(); 

            //Storage  informations
            row.setId(id+"");
            strBuffer = new StringBuffer("");
            strBuffer.append("ID : ")
                     .append(NAFormat(id));
                     
            // 1. projectNumber
            item = new TextItem();
            item.setName("Project#");
            item.setId("projectNumber");
            //String fm_projectNumber = NAFormat(projectNumber);
            item.setText(projectNumber);//fm_projectNumber);
            item.setColor("#000000");
            item.setAltText(strBuffer.toString());
            item.setBold(true);
            row.addElement(item);

            // 2. projectName
            item = new TextItem();
            item.setName("Project Name");
            item.setId("projectName");
            String fm_projectName = NAFormat(projectName);
            item.setText(fm_projectName);
            if(!"n/a".equals(fm_projectName)&&
               !"n /a".equals(fm_projectName))
               item.setColor("#000000");
            else
               item.setColor("#c71585");
            item.setAltText(strBuffer.toString());
            item.setBold(true);
            row.addElement(item);
            ArrayList dataNames = new ArrayList(); 
            
            // 3. Investigator/Lab
           
            String fm_investigatorLab = NAFormat(personalInfo.toString());
            item = new TextItem();
            item.setName("Investigator/Lab");
            item.setId("investigatorLab");
            item.setText(fm_investigatorLab);
            item.setAltText(strBuffer.toString());
            if(!"n/a".equals(fm_investigatorLab)&&
             !"n /a".equals(fm_investigatorLab))
               item.setColor("#000000");
            else
                item.setColor("#ff00ff");
            row.addElement(item);
            String REF_name = ""; 
            String REF_value2 = "";
            String dataName = "";
            String dataValue = "";
            String briefName = "";
            ////System.out.println("-------------------------------------->investigator/lab="+personalInfo);
            for(int x=0;x<groupNames.length;x++)
            {  
               myData = projects[i].getDatas(groupNames[x]);          
              ////System.out.println("-------------------------------------->groupNames["+x+"]="+groupNames[x]);
              ////System.out.println("-------------------------------------->viewMode="+viewMode);
              ////System.out.println("-------------------------------------->myData.length="+myData.length);
               if(myData==null)
                  myData = new Data[0];	   
               for(int k=0;k<myData.length;k++)
               {   
            	  ////System.out.println("-------------------------------------->myData[k].getOnTableName()="+myData[k].getOnTableName());
                  ////System.out.println("-------------------------------------->viewMode="+viewMode);
              	  if((myData[k].getOnTableName()!=null)&&
              		 (myData[k].getOnTableName()).indexOf(viewMode)!=-1)
                  {
                 ////System.out.println("-------------------------------------->myData[k].getOnTableName()="+myData[k].getOnTableName());
                 ////System.out.println("-------------------------------------->myData["+k+"].getBriefDisplayName()="+myData[k].getBriefDisplayName());
                 ////System.out.println("-------------------------------------->myData["+k+"].getValue()="+myData[k].getValue());
                     dataName = myData[k].getName();
                     dataValue = myData[k].getValue();
                     briefName = myData[k].getBriefDisplayName();
                     
                     dataNames.add(dataName);
                     item = new TextItem();
                     item.setName(briefName);
                     item.setId(dataName);
                     String fm_value = NAFormat(dataValue);
                     item.setText(fm_value);
                     if(!"n/a".equals(fm_value)&&
                         !"n /a".equals(fm_value))
                         item.setColor("#000000");
                     else
                         item.setColor("#c71585");
                     row.addElement(item);
                	  
                  }//if((myData[k].getOnTableName()).indexOf(viewMode)!=-1)
               }//for(int x=0;x<groupNames.length;x++)
            }//for(int x=0;x<groupNames.length;x++)
 
            ///boolean isClient = projectMasterBean.gotPermit("ProjectViewerManager", "GT", ProjectManager.CLIENT);
            // loop all stages
            Data[] datas = null;
            Stage aStage = null;
            String stgName = "";
            String stageColor = "";
            StringBuffer sb = null;
            Stage[] templates = projectMasterBean.getAllStageTemplates("GT");
            HashMap stages = projectMasterBean.getCurrentAvailableStages(projects[i].getId());
            HashMap dataTemplateMap = new HashMap();
            for(int j=0; j<templates.length; j++)
            {
               // stage template
               stgName = templates[j].getName();
               // Stage information
               aStage = (Stage)stages.get(stgName);
               stageColor = templates[j].getBgnColorOnMasterTable();
              
               // Display stage datas
               sb = new StringBuffer();
               sb.append("GT").append(".").append(stgName);
               String key = sb.toString();
               if(null==(datas=(Data[])dataTemplateMap.get(key)))
               {
                  datas = templates[j].getDatas();
                  dataTemplateMap.put(key, datas);
               }

               for(int k=0; k<datas.length; k++)
               {
               	   String onTableName = datas[k].getOnTableName();//myData[k].getOnTableName();
                  // 1. data was defined shown on master table
                  // 2. the user either is not client
                  // 3. or user is client and data is available for client
                  //System.out.println("-------------------------------------->viewMode="+viewMode);
            	  //System.out.println("-------------------------------------->datas[k].getOnTableName()="+onTableName);
                    
            	  if(onTableName!=null&&
            	  onTableName.indexOf(ProjectViewerManager.DATA_ON_TABLE_NAME_3)>-1)
                  {
                    if("DateString".equals(datas[k].getType()))
                        item = new DateTextItem();
                     else
                        item = new TextItem();
                     item.setColor("#000066");
                     //item.setAltText("Project name:" + projects[i].getName() + ", Data name:" + datas[k].getBriefDisplayName());
              	     //sb = new StringBuffer();
                     //sb.append("Project name:").append(projName)
                     //  .append(", Data name:").append(datas[k].getBriefDisplayName());
                     //item.setAltText(sb.toString());
                     item.setBgcolor(stageColor);
                     item.setId(datas[k].getBriefDisplayName().replace('#','N'));
                     item.setName(datas[k].getBriefDisplayName());
                     item.setWidth(datas[k].getWidth());
              	     //item.setIsSortable(datas[i].getIsSortable());
                     if(null!=aStage)
                     {
                        try
                        {
                     	    //System.out.println("-------------------------------------->datas[k].getName()="+datas[k].getName());
                        	value = aStage.getData(datas[k].getName()).getSummary(true);//isClient);
                    	    //System.out.println("-------------------------------------->value="+value);
                           if(null==value||"".equals(value))
                           {
                              item.setText("n/a");
                              item.setColor("#c71585");
                           }
                           else
                           {
                              item.setText(value);
                           }

                           ////System.out.println("data name:" + datas[k].getName() + ", data value:" + value);
                              
                           if("click for detail".equals(value))
                           { 	 	
                           	value = "";
                                String val = "";
                              	datas[k].setId(aStage.getId() + "-" + datas[k].getName());
                             	//System.out.println("--->aStage.getId() -  datas[k].getName()="+aStage.getId() + "-" + datas[k].getName());
                                String[] values = aStage.getData(datas[k].getName()).getAllValues(); //get all users values
                                for(int h=0;h<values.length;h++)
                                {
                               	   //System.out.println("--->values["+h+"]="+values[h]);
                                   if(null!=values[h]&&!"".equals(values[h])){
                              	       val = getSubDataContent(datas[k].getSubdatas() ,values[h]);
                                       if(!"".equals(value))
                                          value = value + " & " + val;   
                                       else
                                          value = val;
                              	   }
                              	   
                                } 
                                item.setText(value);
                            }
                           
                            if(null==value||"".equals(value.trim()))
                            {
                              	    item.setText("n/a");
                                    item.setColor("#c71585");
                            }
                        }
                        catch(DataUnavailableException e)
                        {
                          ////System.out.println("Data is not available, set it to empty string.");
                           item.setText("n/a");
                           item.setColor("#c71585");
                        }
                     }
                     else
                     {
                        item.setText("n/a");
                        item.setColor("#c71585");
                     }//end of if(null!=aStage)
                     row.addElement(item);
                  }//The nd of if((datas[k].getOnTableName()).indexOf(ProjectViewerManager.DATA_ON_TABLE_NAME_3)>-1)

               }//The end of for(int k=0; k<datas.length; k++)
               
            }//The end 0f for(int j=0; j<templates.length; j++)
            sheet.addDataRow(row);
         }
         catch(Exception e)
         {
              e.printStackTrace();
         }
      }
      
      return sheet;

   }

   private String getSubDataContent(String[] columns,String value)
   {
      String valueSet = "";
      String[] rows = SMUtility.splitByToken(value, "!", false);
      String[] cols = null;
      int colLength = 0;
      int rowLength = rows.length;
      String[] colors = {"#228b22","#0000cd","#c71585","#ff4500","#8b008b"};
      for(int i=0; i<rowLength; i++)
      {
         try
         {
               valueSet=valueSet+  "<font color='"+colors[(i%5)]+"'>"  +rows[i]+"</font>";
         }
         catch(Exception e)
         {
            e.printStackTrace();
         }
         valueSet= valueSet + "&nbsp;&nbsp;&nbsp;";
      }
      //System.out.println("[ProjectResultsMAsterBuilder:: getSubDataValue]---valueSet="+valueSet);
      valueSet = "<b>" +valueSet + "</b>";
      return valueSet;
   }
   
/*
   private String getSubDataContent(String[] columns,String value)
   {
      String valueSet = "";
      String[] rows = SMUtility.splitByToken(value, "!", false);
      String[] cols = null;
      int colLength = 0;
      int rowLength = rows.length;
      String[] colors = {"#228b22","#0000cd","#c71585","#ff4500","#8b008b"};
      for(int i=0; i<rowLength; i++)
      {
         try
         {
               valueSet=valueSet+  "<font color='"+colors[i]+"'>"  +rows[i]+"</font>";
         }
         catch(Exception e)
         {
            e.printStackTrace();
         }
         valueSet= valueSet + "&nbsp;&nbsp;&nbsp;";
      }
      //System.out.println("[ProjectResultsMAsterBuilder:: getSubDataValue]---valueSet="+valueSet);
      valueSet = "<b>" +valueSet + "</b>";
      return valueSet;
   }
*/      
   public String NAFormat(String str)
   {

      if(str==null)
         return "n/a";
      str=str.trim();
      if("".equals(str))
         return "n/a";
      return str;
   }

}