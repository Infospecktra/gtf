/* Generated by Together */
package org.yang.customized.gtf.services.inventoryManager.web;

import java.sql.Date;
import org.yang.util.SMUtility;
import org.yang.util.DateFormatter;
import org.yang.web.controller.GenericBean;
import org.yang.web.view.controls.WebControl;
import org.yang.web.view.controls.WebControlBuilder;
import org.yang.web.view.controls.jsStyle.UIForm;
import org.yang.web.view.controls.jsStyle.TextField;
import org.yang.web.view.controls.jsStyle.PassElement;
import org.yang.web.view.controls.jsStyle.SelectElement;
import org.yang.web.view.controls.jsStyle.TextAreaElement;
import org.yang.web.view.controls.jsStyle.ButtonElement;
import org.yang.web.view.controls.jsStyle.dataSheet.DataSheet;
import org.yang.web.view.controls.jsStyle.dataSheet.DataRow;
import org.yang.web.view.controls.jsStyle.dataSheet.DataItem;
import org.yang.web.view.controls.jsStyle.dataSheet.TextItem;
import org.yang.web.view.controls.jsStyle.dataSheet.AccessIcon;
import org.yang.web.view.controls.jsStyle.dataSheet.DataSheetSet;
import org.yang.customized.gtf.services.dataAccess.Karyotype;
import org.yang.services.dataAccess.Data;
import org.yang.services.dataAccess.DataUnavailableException;
import org.yang.web.view.controls.jsStyle.misc.MessageDisplayingBanner;
import org.yang.customized.gtf.services.inventoryManager.InventoryManager;
import org.yang.customized.gtf.services.dataAccess.DateTextItem;
import org.yang.web.view.controls.jsStyle.dataSheet.SelectableItem;
import org.yang.customized.gtf.services.inventoryManager.utility.Utility;

public class KaryotypeMasterTableBuilder implements WebControlBuilder
{
   private StringBuffer sb = null;
   public WebControl build(GenericBean bean) throws Exception
   {
      KaryotypeMasterTableBean karyotypeMasterTableBean = (KaryotypeMasterTableBean)bean;
      Karyotype[] karyotypes = null;

      try
      {
         karyotypes = karyotypeMasterTableBean.getAvailableKaryotypes();
      }
      catch(Exception e){}

      if(null==karyotypes||0>=karyotypes.length)      // if no inventory available
      {
         MessageDisplayingBanner banner = new MessageDisplayingBanner();
         banner.setText("No activated probe item is available.");
         banner.setColor("#c0c0c0");
         
         return banner;
      }

      String codeBase = karyotypeMasterTableBean.getAppBase() + karyotypeMasterTableBean.getGuiBase();
      DataSheetSet reportDetail = null;

      if(null==(reportDetail=(DataSheetSet)karyotypeMasterTableBean.getControl("karyotypeMasterTable")))
      {
          reportDetail = createReportDetail(karyotypeMasterTableBean, karyotypes, codeBase,System.currentTimeMillis());
          karyotypeMasterTableBean.setControl("karyotypeMasterTable", reportDetail);
      }
      else
      {
          reportDetail = createReportDetail(karyotypeMasterTableBean, karyotypes, codeBase,System.currentTimeMillis());
          reportDetail.getDatasheet("karyotypeMasterTable").getPageNumberSelector().setSelectedValue(karyotypeMasterTableBean.getPage());
      }
      
      reportDetail.getDatasheet("karyotypeMasterTable").sort(karyotypeMasterTableBean.getSortBy(), karyotypeMasterTableBean.getIsAcending());
      String currentKaryotypeId ;
      if(null!=karyotypeMasterTableBean.getCurrentKaryotype())
      {
         currentKaryotypeId = karyotypeMasterTableBean.getCurrentKaryotype().getId();
         reportDetail.setHighlightId(currentKaryotypeId+"");
         reportDetail.setHighlightColor("#00ffff");
      }

      return reportDetail;
   }

   private DataSheetSet createReportDetail(KaryotypeMasterTableBean karyotypeMasterTableBean, Karyotype[] karyotypes, String codeBase,long time)
   {
      DataSheetSet reportDetail = new DataSheetSet();
      DataSheet sheet = new DataSheet();
      sheet.setId("karyotypeMasterTable");
      sheet.setActionLink("/wf/karyotypeMasterTable.wf");
      sheet.setRowsPerPage(10);

      SelectableItem paging = new SelectableItem();
      paging.setId("page");
      paging.setName("page");
      paging.setCaption("Select page");
      paging.setActionLink("/wf/karyotypeMasterTable.wf");
      paging.setActionTarget("_parent");
      paging.setOnChange("javascript:submitForm('" + paging.getId() + "','changePage')");
      //System.out.println("page----------------------->" + karyotypeMasterTableBean.getPage());
      paging.setSelectedValue(karyotypeMasterTableBean.getPage());
      paging.setNeedPromptOption(false);

      sheet.setPageNumberSelector(paging);
      reportDetail.addDataSheet(sheet);

      DataRow row = null;
      TextItem item = null;
      String value = null;
      boolean iscurrentKaryotypeId = false;
      AccessIcon icon = null;
      Boolean allChecked = new Boolean (karyotypeMasterTableBean.getIsAllChecked());
      boolean isItemChecked = false;
     
      String id = "";
      String domain = "";
      String projectName = "";
      String projectCode = "";
      String cellSource = "";
      String investigator = "";
      String labName = "";
      String parentalLine = "";
      String note = "";
      String requestedBy = "";
      String result = "";
      String resultType = "";
      StringBuffer strBuffer = null;

      for(int i=0; i<karyotypes.length; i++)
      { 
         try
         {
            isItemChecked = karyotypes[i].getIsSelected();
            icon = new AccessIcon();
            icon.setName("All");
            icon.setIsSortable(false);
            icon.setActionTarget("_parent");
            long time2 = System.currentTimeMillis();
            if(!karyotypeMasterTableBean.getIsAllChecked())
               icon.setTitleLink("/wf/karyotypeMasterTable.wf?actiontype=selectAll");
            else
               icon.setTitleLink("/wf/karyotypeMasterTable.wf?actiontype=deselectAll");
         
            id = karyotypes[i].getId();
            projectName = karyotypes[i].getProjectName();
            projectCode = karyotypes[i].getProjectCode();
            cellSource = karyotypes[i].getCellSource();
            parentalLine = karyotypes[i].getParentalLine();
            investigator = karyotypes[i].getInvestigator();
            labName = karyotypes[i].getLabName();
            //phone = karyotypes[i].getPhone();
            //probeNumber = karyotypes[i].getProbeNumber();
            requestedBy = karyotypes[i].getRequestedBy();
            result = karyotypes[i].getResult();
            resultType = karyotypes[i].getResultType();
            note = karyotypes[i].getNote();
    
            Date sentDate = karyotypes[i].getSentDate();
            String billing = karyotypes[i].getBilling();
            domain = karyotypes[i].getDomain();

            /*
            System.out.println("-------------------------------------->projectName="+projectName);
            System.out.println("-------------------------------------->projectCode="+projectCode);
            System.out.println("-------------------------------------->investigator="+investigator);
            System.out.println("-------------------------------------->parentalLine="+parentalLine);
            System.out.println("-------------------------------------->labName="+labName);
            //System.out.println("-------------------------------------->phone="+phone);
            //System.out.println("-------------------------------------->probeNumber="+probeNumber);
            System.out.println("-------------------------------------->note="+note);
            System.out.println("-------------------------------------->requestedBy="+requestedBy);
            System.out.println("-------------------------------------->result="+result);
            System.out.println("-------------------------------------->sentDate="+sentDate);
            System.out.println("-------------------------------------->billing="+billing);
            System.out.println("-------------------------------------->domain="+domain);
            */
            
            if(isItemChecked)
            {
               icon.setActionLink("/wf/karyotypeMasterTable.wf?actiontype=deselect&id="+id);
               icon.setIcon(codeBase + "/images/checked.gif");
            }
            else
            {
               icon.setActionLink("/wf/karyotypeMasterTable.wf?actiontype=select&id="+id);
               icon.setIcon(codeBase + "/images/unchecked.gif");
            }
            row = new DataRow();
            row.addElement(icon);

            //Inventory informations
            row.setId(id+"");
            strBuffer = new StringBuffer("");
            strBuffer.append("Domain : ")
                     .append(Utility.NAFormat(domain))
                     .append('\r')
                     .append("Lab Head : ")
                     .append(Utility.NAFormat(labName));
                    
            // 1. project name
            item = new TextItem();
            item.setName("Project Name");
            item.setId("projectName");
            item.setText(Utility.NAFormat(projectName));
            item.setActionLink("/wf/karyotype.wf?actiontype=edit&id="+id);
            item.setActionTarget("_parent");
            item.setAltText(strBuffer.toString());
            item.setBgcolor("#48d1cc");
            item.setBold(true);
            row.addElement(item);

            // 2. project code
            projectCode = Utility.NAFormat(projectCode);
            item = new TextItem();
            item.setName("Project Code");
            item.setId("projectCode");
            item.setText(projectCode);
            if("n/a".equals(projectCode))
               item.setColor("#ca0000");
            item.setBgcolor("#C1A5FC");
            row.addElement(item);

            // 3. Cell source
            cellSource = Utility.NAFormat(cellSource);
            item = new TextItem();
            item.setName("Cell Source");
            item.setId("cellSource");
            item.setText(cellSource);
            if("n/a".equals(cellSource))
               item.setColor("#ca0000");
            //item.setBgcolor("#C1A5FC");
            row.addElement(item);
            
            // 4. investigator name
            investigator = Utility.NAFormat(investigator);
            item = new TextItem();
            item.setName("Investigator");
            item.setId("investigator");
            item.setText(investigator);
            item.setAltText(strBuffer.toString());
            if("n/a".equals(investigator))
               item.setColor("#ca0000");
            row.addElement(item);

            // 5. parentalLine
            parentalLine = Utility.NAFormat(parentalLine);
            item = new TextItem();
            item.setName("Parental Line");
            item.setId("parentalLine");
            item.setText(parentalLine);
            if("n/a".equals(parentalLine))
               item.setColor("#ca0000");
            row.addElement(item);

             // 6. result
            item = new TextItem();
            item.setName("Result");
            item.setId("result");
            if("n/a".equals(resultType))
            {
               item.setColor("#ca0000");
               item.setText("n/a");
            }
            else if("good".equals(resultType))
            {
                 item.setColor("#228b22");//#186321
                 item.setText("good");
                 //item.setBold(true);
           }
            else if("notGood".equals(resultType))
            {
                item.setColor("#C86400");//#AD4A18
                item.setText("not good");
                //item.setBold(true);
            }
            item.setBgcolor("#A6FA54");
            row.addElement(item);

            // 5. requestedBy
            requestedBy = Utility.NAFormat(requestedBy);
            item = new TextItem();
            item.setName("Requested By");
            item.setId("requestedBy");
            item.setText(requestedBy);
            if("n/a".equals(requestedBy))
               item.setColor("#ca0000");
            item.setBgcolor("#FFFF9C");
            row.addElement(item);


            // 8. sentDate
            String str_sentDate = Utility.dateFormat(sentDate,"MM/dd/yyyy");
            item = new TextItem();
            item.setName("Sent Date");
            item.setId("sentDate");
            item.setText(str_sentDate);

            if(!"n/a".equals(str_sentDate))
               item.setColor("#000066");
            else
               item.setColor("#ca0000");
            item.setBgcolor("#b0c4de");
            row.addElement(item);

            // 9. billing
            //String str_billing = Utility.dateFormat(billing,"MM/dd/yyyy");
            String str_billing = Utility.NAFormat(billing);            
            item = new TextItem();
            item.setName("Billing");
            item.setId("billing");
            item.setText(str_billing);
            if(!"n/a".equals(str_billing))
               item.setColor("#000066");
            else
               item.setColor("#ca0000");
            item.setBgcolor("da70d6");
            row.addElement(item);

         }
         catch(Exception e)
         {
              e.printStackTrace();
         }
         sheet.addDataRow(row);
        
      }
      return reportDetail;
   }
}