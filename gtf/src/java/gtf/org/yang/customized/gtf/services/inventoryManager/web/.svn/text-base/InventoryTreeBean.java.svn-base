/* Generated by Together */
package org.yang.customized.gtf.services.inventoryManager.web;
import java.util.Properties;
import java.util.Collection;
import java.util.Iterator;
import org.yang.web.applicationContainer.SecuredBean;
import org.yang.web.applicationContainer.Passport;
import org.yang.services.accountmgr.Group;
import org.yang.services.accountmgr.User;
import org.yang.services.accountmgr.UserManager;
import org.yang.web.view.controls.jsStyle.navigationTree.NavigationTree;
import org.yang.services.accountmgr.AccountDataAccessException;
import org.yang.services.servicemgr.Area;
import java.util.Map;
import java.util.Hashtable;
import java.util.Enumeration;
import java.util.ArrayList;
import org.yang.customized.gtf.services.dataAccess.Record;
import org.yang.customized.gtf.services.inventoryManager.InventoryManager;
import org.yang.customized.gtf.services.dataAccess.Storage;
import org.yang.web.view.controls.jsStyle.panel.GenericPanel;
import org.yang.web.view.controls.jsStyle.panel.TabPanelElement;

public class InventoryTreeBean   extends InventoryServiceBean 
{
   static final long serialVersionUID = 4751296682979734915L;

   private static int OPEN_NODE = 0;
   private static int CLOSE_NODE = 1;

   private String targetID = null;
   public void setTargetID(String targetID) { this.targetID = targetID; }
   public String getTargetID() { return targetID; }

   private String  serviceType = "";
   public String getServiceType(){ return serviceType;}
   public void setServiceType(String serviceType){this.serviceType = serviceType;}

   public InventoryTreeBean()
   {
      super();
      storageLocTable = new Hashtable();
   }

   /*************************************
    *  Implement NavigationTree method  *
    *************************************/

   public String getDomain()
   {
      return passport.getDomain();
   }
   /***************************************
    *  Implement GenericHandler's method  *
    ***************************************/

   protected void init() throws Exception
   {
      ensureResource();
      String[] areas = passport.getServiceAreas("InventoryManager");
      if(null==inventoryMgr)
         throw new Exception("Inventory manager is null.");
   }

   protected String altPage()
   {
      if(isReload)
         return "reload-forward";
      else
         return null;
   }

   /***************************************
    *           my action method          *
    ***************************************/
   public void load()
   {
      this.removeControl("inventoryTreePanel");
   }

   protected void destroy()
   {
      inventoryMgr = null;
   }

   public void open()
   {
      NavigationTree tree = (NavigationTree)((TabPanelElement)((GenericPanel)this.getControl("inventoryTreePanel")).getSubcontrol("inventory")).getSubcontrol("inventoryTree");
      tree.openNode(targetID);
   }

   public void close()
   {
      NavigationTree tree = (NavigationTree)((TabPanelElement)((GenericPanel)this.getControl("inventoryTreePanel")).getSubcontrol("inventory")).getSubcontrol("inventoryTree");
      tree.closeNode(targetID);
   }

   public Storage[] loadStoragesByLocation()
   {
      Storage[] storages = null; 	
      try
      {
      	storages = inventoryMgr.loadStoragesByLocation();
      }
      catch(Exception e)
      {
         e.printStackTrace();	
      }		
      return storages;	
   }
   
   private Hashtable storageLocTable = null;  	 
   public Hashtable loadStorageLocData()
   {
      try
      {
    	 storageLocTable.clear();  
      	 Storage[] storages = loadStoragesByLocation();
      	 if(storages==null)
      	    storages = new Storage[0];
      	 String id = "";
      	 String location = "";
      	 int boxNumber = 0;
      	 String RC = "";
      	 String [] rowColSet = null;
      	 boolean isNewBoxNumber = true;
      	 boolean isExistedRC = false;
      	 for(int i=0;i<storages.length;i++)
      	 {  
      	    location = storages[i].getLocation();
//System.out.println("[InventoryTreeBean::loadStorageLocData]Q---------->LOC["+location+"]-BOX["+storages[i].getBoxNumber()+"]-RC["+storages[i].getRowColumn()+"]");
//System.out.println("[InventoryTreeBean::loadStorageLocData]Q---------->storageLocTable.get("+location+")!=null??"+(storageLocTable.get(location)!=null));
            if(storageLocTable.get(location)!=null)//1
      	    { 	
      	       ArrayList boxNumbers = (ArrayList)storageLocTable.get(location);//
      	       //System.out.println("[InventoryTreeBean::loadStorageLocData]----* contain loc ["+location+"]---boxNumbers.size()="+boxNumbers.size());	
      	       Iterator iteratorBxes = boxNumbers.iterator();
      	       isNewBoxNumber = true;
      	       
      	       while(iteratorBxes.hasNext())
      	       {  
      	          ArrayList rowColumns = (ArrayList)iteratorBxes.next();
        	      //System.out.println("[InventoryTreeBean::loadStorageLocData]----rowColumns.size()-1=="+rowColumns.size()-1); 	
      	          if(rowColumns!=null)
      	          {
      	       	     Iterator iterator2 = rowColumns.iterator();
        	     boxNumber = ((Integer)iterator2.next()).intValue();
        	     //System.out.println("[InventoryTreeBean::loadStorageLocData]--ALL--> boxNumber["+boxNumber+"]--rowColumns.size()-1=="+rowColumns.size()-1); 	
        	     if(boxNumber==storages[i].getBoxNumber())
        	     {  
        	        //System.out.println("[InventoryTreeBean::loadStorageLocData]----* match boxNumber=="+boxNumber); 	
        	        isNewBoxNumber = false;
        	        isExistedRC = false;
      	                while(iterator2.hasNext()) 
      	       	        {
      	                   rowColSet = ((String[])iterator2.next());	
      	                   RC = storages[i].getRowColumn();
      	                   if(rowColSet[1].equals(RC))
      	                      isExistedRC = true;  	   
      	       	        }
      	       	        	   
      	                if(!isExistedRC)
      	                {	
      	       	           String[] rowColumnDataSet = new String[2];	
      	                   rowColumnDataSet[0] = RC;
      	                   rowColumnDataSet[1] = storages[i].getId();	
      	       	           rowColumns.add(rowColumnDataSet);
      	                }
      	              }
        	    }	
      	       }	
      	       
      	       if(isNewBoxNumber)
      	       {
      	       	  //System.out.println("[InventoryTreeBean::loadStorageLocData]--CREATE--* contain  "+location+": no  boxNumbr ["+boxNumbers+"]");	
      	       	  ArrayList rowColumns = new ArrayList();
      	       	  rowColumns.add(new Integer(storages[i].getBoxNumber()));
      	       	  String[] rowColumnDataSet = new String[2];	
      	          rowColumnDataSet[0] = storages[i].getRowColumn();
      	          rowColumnDataSet[1] = storages[i].getId();	
      	       	  rowColumns.add(rowColumnDataSet);
      	       	  boxNumbers.add(rowColumns);
      	       	  storageLocTable.put(location,boxNumbers);
      	       }	
      	    }
      	    else 
      	    {
      	       //System.out.println("[InventoryTreeBean::loadStorageLocData]----*NOT contain loc ["+location+"]-----");
      	       String[] rowColumnDataSet = new String[2]; 
      	       rowColumnDataSet[0] = storages[i].getRowColumn();
      	       rowColumnDataSet[1] = storages[i].getId();	
      	       ArrayList boxNumbers = new ArrayList();
      	       ArrayList rowColumns = new ArrayList();
      	       rowColumns.add(new Integer(storages[i].getBoxNumber()));//1
      	       rowColumns.add(rowColumnDataSet);//2
      	       boxNumbers.add(rowColumns);   	
      	       //System.out.println("[InventoryTreeBean::loadStorageLocData]----*create box["+storages[i].getBoxNumber()+"]");
     	       //System.out.println("[InventoryTreeBean::loadStorageLocData]----*put location["+location+"]---box Numbers-----");
      	       storageLocTable.put(location,boxNumbers);	
      	    }	 	
         }
         printStorageLocTable(storageLocTable);  	 	
      }
      catch(Exception e)
      {
         e.printStackTrace();	
      }			
      return storageLocTable;
   }
   	 
   private void printStorageLocTable(Hashtable locationTable)
   {
      String location = "";	
      try
      {
      	  int i = 0;
          for (Enumeration locations = locationTable.keys() ; locations.hasMoreElements() ;) 
          {
             i++;	
             location = (String)locations.nextElement();
             //System.out.println("[InvntoryTreeBean::printStorageLocTable]------------------------------------");
             //System.out.println("[InvntoryTreeBean::printStorageLocTable]----------location_"+i+"="+location);
             ArrayList boxNumbers = (ArrayList)locationTable.get(location);
             Iterator iteratorBoxes = boxNumbers.iterator();
             while(iteratorBoxes.hasNext())
             {
                ArrayList rowColumns = (ArrayList)iteratorBoxes.next();
                Iterator iteratorRowColumns =  rowColumns.iterator();
                int boxNumber = ((Integer)iteratorRowColumns.next()).intValue();
                
                while(iteratorRowColumns.hasNext())
                {
                   String[] rowColumnSet = (String[])iteratorRowColumns.next();
                   //System.out.println("[InvntoryTreeBean::printStorageLocTable]--boxNumber("+boxNumber+")-rowColumn["+rowColumnSet[0]+"]");
                }		
             }	  	
          }
          //System.out.println("[InvntoryTreeBean::printStorageLocTable]------------------------------------");
      	
      }
      catch(Exception e)
      {
         e.printStackTrace();	
      }			
   }	 

}