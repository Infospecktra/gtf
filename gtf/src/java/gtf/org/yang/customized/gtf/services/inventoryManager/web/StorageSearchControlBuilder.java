/* Generated by Together */
package org.yang.customized.gtf.services.inventoryManager.web;
import org.yang.web.view.controls.WebControlBuilder;
import org.yang.web.view.controls.WebControl;
import org.yang.web.controller.GenericBean;
import org.yang.web.view.controls.jsStyle.panel.Panel;
import org.yang.web.view.controls.jsStyle.panel.GenericPanel;
import org.yang.web.view.controls.jsStyle.panel.TabPanelElement;
import org.yang.web.view.controls.jsStyle.ButtonElement;
import org.yang.web.view.controls.jsStyle.SelectElement;
import org.yang.web.view.controls.jsStyle.CheckBoxes;
import org.yang.web.view.controls.jsStyle.CheckBoxGroup;
import org.yang.web.view.controls.jsStyle.CheckBox;
import org.yang.customized.gtf.services.inventoryManager.InventoryManager;
import org.yang.customized.gtf.services.dataAccess.Storage;
import org.yang.services.dataAccess.Data;
import org.yang.customized.gtf.services.dataAccess.Project;
import org.yang.web.view.controls.jsStyle.RadioButtonGroup;


public class StorageSearchControlBuilder implements WebControlBuilder
{
   String codeBase = null;
 
   public WebControl build(GenericBean bean) throws Exception
   {
	  //System.out.println("[StorageSearchControlBuilder::createSearchingControl]---1.System.currentTimeMillis() ="+ System.currentTimeMillis() );
      StorageSearchControlBean panelBean = (StorageSearchControlBean)bean;
      codeBase = panelBean.getAppBase() + panelBean.getGuiBase();
      //System.out.println("[StorageSearchControlBuilder::createSearchingControl]---codeBase ="+ codeBase);

      Panel panel = createPanel(panelBean);
      panelBean.setControl("searchControl", panel);
      return panel;
   }

   private GenericPanel createPanel(StorageSearchControlBean storageSearchBean)
   {
      String tab = storageSearchBean.getTab();
      //System.out.println("[StorageSearchControlBuilder::createSearchingControl]---2.System.currentTimeMillis() ="+ System.currentTimeMillis() );
      
      GenericPanel panel = new GenericPanel();
      panel.setId("searchControl");
      panel.setText("Searching your storages.");
      panel.setDisableForm(true);
      panel.setCodeBase(codeBase);
      panel.setColor("#C0C0C0");
      panel.setActionLink("/wf/storages.wf");

      // Search tab
      TabPanelElement searchingTab = new TabPanelElement();
      searchingTab.setText("Search");
      searchingTab.setCodeBase(codeBase);
      searchingTab.setTabSwitchingLink("/wf/storageSearch.wf?actiontype=toSearchMode");
      //System.out.println("[StorageSarchControlBuilder::createSearchingControl]---tab="+tab);
      if("search".equals(tab))
      {
         searchingTab.setOnFocus(true);
         searchingTab.addASubcontrol(createSearchingControl(panel.getId(), storageSearchBean));
      }
      else
         searchingTab.setOnFocus(false);
      
      panel.addASubcontrol(searchingTab);
      return panel;
   }

   private StorageSearchControl createSearchingControl(String id, StorageSearchControlBean storageSearchBean)
   {
      StorageSearchControl searching = new StorageSearchControl();
      searching.setCodeBase(codeBase);
      searching.setId(id);
      searching.setActionLink("/wf/storages.wf");
      searching.setSearchKeys(storageSearchBean.getSearchKeys());
      searching.setTarget("_parent");
      //System.out.println("[StorageSarchControlBuilder::createSearchingControl]---storageSearchBean.getSearchKeys()="+storageSearchBean.getSearchKey//s());
      
      String[] labs = storageSearchBean.getAllDomains();
      String[] domainsFromPassport =storageSearchBean.getDomainsFromPassport();
      //System.out.println("[StorageSearchControlBuilder::createSearchingControl]---labs.length="+labs.length);
      //System.out.println("[StorageSearchControlBuilder::createSearchingControl]---domainsFromPassport.length="+domainsFromPassport.length);
      SelectElement lab = new SelectElement();
      lab.setId("labName");
      lab.setName("labName");
      lab.setDisplayNames(labs);
      lab.setValues(labs);
      lab.setOptionStyles(getOptionStyles(domainsFromPassport,labs));

      String selectedLab = storageSearchBean.getLabName();
      if(null==selectedLab||"".equals(selectedLab))
         selectedLab = "  Please select";
      lab.setSelectedValue(selectedLab);
      //System.out.println("[StorageSearchControlBuilder::createSearchingControl]--2-selectedLab="+selectedLab);

      String[] investigators = storageSearchBean.getAvailableInvestigators();
      //System.out.println("[StorageSearchControlBuilder::createSearchingControl]------>1 investigators ="+investigators);  
      String[] investigatorsInSelectedLab =storageSearchBean.getInvestigatorsInSelectedLab();
      //System.out.println("[StorageSearchControlBuilder::createSearchingControl]------>2 investigatorsInSelectedLab="+investigatorsInSelectedLab);  
    		  
      SelectElement investigator = new SelectElement();
      investigator.setId("investigator");
      investigator.setName("investigator");
      investigator.setDisplayNames(investigators);
      investigator.setValues(investigators);
      String selectedInvestigator = storageSearchBean.getInvestigator();
      if(null==selectedInvestigator||"".equals(selectedInvestigator))
         selectedInvestigator ="  Please select";
      if(investigatorsInSelectedLab!=null&&investigatorsInSelectedLab.length!=0)
      {
//System.out.println("[StorageSearchControlBuilder::createSearchingControl]---investigators.length="+investigators.length);
//System.out.println("[StorageSearchControlBuilder::createSearchingControl]---investigatorsInSelectedLab.length="+investigatorsInSelectedLab.length);
//System.out.println("[StorageSearchControlBuilder::createSearchingControl]---selectedInvestigator="+selectedInvestigator);
         investigator.setOptionStyles(getOptionStyles(investigatorsInSelectedLab,investigators));
      }
      else
      {
      	 String[] style = {"style1"};
         investigator.setOptionStyles(style);
      }
	
      investigator.setSelectedValue(selectedInvestigator);
      searching.setLabSelector(lab);
      searching.setInvestigatorSelector(investigator);

      ButtonElement search = new ButtonElement();
      search.setAction("javascript:submitFormThenTargetTo('" + id + "','search', 'rightFrame2')");
      search.setAlt("Sending searching request.");
      search.setName("search");
      search.setOffIcon(codeBase + "/images/English/btn_submit.gif");
      search.setOnIcon(codeBase + "/images/English/btn_submit_on.gif");
      searching.addASubcontrol(search);

      ButtonElement clear = new ButtonElement();
      clear.setAction("javascript:submitFormThenTargetTo('" + id + "','clear', 'rightFrame2')");
      clear.setName("clear");
      clear.setOffIcon(codeBase + "/images/English/btn_clear.gif");
      clear.setOnIcon(codeBase + "/images/English/btn_clear_on.gif");
      clear.setAlt("Clear");
      searching.addASubcontrol(clear);

      return searching;
   }
   
   private String[] getOptionStyles(String[] domainsFromPassport,String[] labs)  // 
   {
      if(labs==null)
      	labs = new String[0];
      
      if(domainsFromPassport==null)
        domainsFromPassport = new String[0];
      String[] styles = new String[labs.length];	

      try
      {
         for(int i=0;i<styles.length;i++) //the length = labs
         {
           for(int j=0;j<domainsFromPassport.length;j++)
           {	
              if(labs[i].equalsIgnoreCase(domainsFromPassport[j])||labs[i].equalsIgnoreCase("  Please select"))	
                 styles[i] = "style1";
           }      	
           
           if(null==styles[i]||"".equals(styles[i]))
              styles[i] = "style2";
         }	
      }	
      catch(Exception e)
      {
         e.printStackTrace();	
      }		
      return styles;
      
   }	
}