/* Generated by Together */
package org.yang.customized.gtf.services.inventoryManager.web;

import java.sql.Date;
import org.yang.util.SMUtility;
import org.yang.util.DateFormatter;
import org.yang.web.controller.GenericBean;
import org.yang.web.view.controls.WebControl;
import org.yang.web.view.controls.WebControlBuilder;
import org.yang.web.view.controls.jsStyle.UIForm;
import org.yang.web.view.controls.jsStyle.TextField;
import org.yang.web.view.controls.jsStyle.PassElement;
import org.yang.web.view.controls.jsStyle.SelectElement;
import org.yang.web.view.controls.jsStyle.TextAreaElement;
import org.yang.web.view.controls.jsStyle.ButtonElement;
import org.yang.web.view.controls.jsStyle.dataSheet.DataSheet;
import org.yang.web.view.controls.jsStyle.dataSheet.DataRow;
import org.yang.web.view.controls.jsStyle.dataSheet.DataItem;
import org.yang.web.view.controls.jsStyle.dataSheet.TextItem;
import org.yang.web.view.controls.jsStyle.dataSheet.AccessIcon;
import org.yang.web.view.controls.jsStyle.dataSheet.DataSheetSet;
import org.yang.customized.gtf.services.dataAccess.ProbeCase;
import org.yang.services.dataAccess.Data;
import org.yang.services.dataAccess.DataUnavailableException;
import org.yang.web.view.controls.jsStyle.misc.MessageDisplayingBanner;
import org.yang.customized.gtf.services.inventoryManager.InventoryManager;
import org.yang.customized.gtf.services.dataAccess.DateTextItem;
import org.yang.web.view.controls.jsStyle.dataSheet.SelectableItem;
import org.yang.customized.gtf.services.inventoryManager.utility.Utility;

public class ProbeTestSpreadSheetBuilder implements WebControlBuilder
{
   private StringBuffer sb = null;
   public WebControl build(GenericBean bean) throws Exception
   {
      ProbeTestBean probeTestBean = (ProbeTestBean)bean;
      ProbeCase[] probeCases = null;

      try
      {
         probeCases = probeTestBean.getAvailableProbeCases();
      }
      catch(Exception e){}

      if(null==probeCases||0>=probeCases.length)      // if no inventory available
      {
         MessageDisplayingBanner banner = new MessageDisplayingBanner();
         banner.setText("No activated probe item is available.");
         banner.setColor("#c0c0c0");
         
         return banner;
      }

      String codeBase = probeTestBean.getAppBase() + probeTestBean.getGuiBase();
      DataSheetSet reportDetail = null;

      if(null==(reportDetail=(DataSheetSet)probeTestBean.getControl("probeTestSpreadSheet")))
      {
          reportDetail = createReportDetail(probeTestBean, probeCases, codeBase,System.currentTimeMillis());
          probeTestBean.setControl("probeTestSpreadSheet", reportDetail);
      }
      else
      {
          reportDetail = createReportDetail(probeTestBean, probeCases, codeBase,System.currentTimeMillis());
          reportDetail.getDatasheet("probeTestSpreadSheet").getPageNumberSelector().setSelectedValue(probeTestBean.getPage());
      }
      
      reportDetail.getDatasheet("probeTestSpreadSheet").sort(probeTestBean.getSortBy(), probeTestBean.getIsAcending());
      String currentProbeCaseId ;
      if(null!=probeTestBean.getCurrentProbeCase())
      {
         currentProbeCaseId = probeTestBean.getCurrentProbeCase().getId();
         reportDetail.setHighlightId(currentProbeCaseId+"");
         reportDetail.setHighlightColor("#00ffff");
      }

      return reportDetail;
   }

   private DataSheetSet createReportDetail(ProbeTestBean probeTestBean, ProbeCase[] probeCases, String codeBase,long time)
   {
      DataSheetSet reportDetail = new DataSheetSet();
      DataSheet sheet = new DataSheet();
      sheet.setId("probeTestSpreadSheet");
      sheet.setActionLink("/wf/probeTest.wf");
      sheet.setRowsPerPage(10);

      SelectableItem paging = new SelectableItem();
      paging.setId("page");
      paging.setName("page");
      paging.setCaption("Select page");
      paging.setActionLink("/wf/probeTest.wf");
      paging.setActionTarget("_parent");
      paging.setOnChange("javascript:submitForm('" + paging.getId() + "','changePage')");
      //System.out.println("page----------------------->" + probeTestBean.getPage());
      paging.setSelectedValue(probeTestBean.getPage());
      paging.setNeedPromptOption(false);

      sheet.setPageNumberSelector(paging);
      reportDetail.addDataSheet(sheet);

      DataRow row = null;
      TextItem item = null;
      String value = null;
      boolean iscurrentProbeCaseId = false;
      AccessIcon icon = null;
      Boolean allChecked = new Boolean (probeTestBean.getIsAllChecked());
      boolean isItemChecked = false;
     
      String id = "";
      String domain = "";
      String projectName = "";
      String investigator = "";
      String labName = "";
      String probeName = "";
      String phone = "";
      //String note = "";
      int probeNumber = 0;
      String testBy = "";
      String result = "";
      String billableType = "no";
      String resultType = "";
      StringBuffer strBuffer = null;

      for(int i=0; i<probeCases.length; i++)
      { 
         try
         {
            isItemChecked = probeCases[i].getIsSelected();
            icon = new AccessIcon();
            icon.setName("All");
            icon.setIsSortable(false);
            icon.setActionTarget("_parent");
            long time2 = System.currentTimeMillis();
            if(!probeTestBean.getIsAllChecked())
               icon.setTitleLink("/wf/probeTest.wf?actiontype=selectAll");
            else
               icon.setTitleLink("/wf/probeTest.wf?actiontype=deselectAll");
         
            id = probeCases[i].getId();
            projectName = probeCases[i].getProjectName();
            probeName = probeCases[i].getProbeName();
            investigator = probeCases[i].getInvestigator();
            labName = probeCases[i].getLabName();
            phone = probeCases[i].getPhone();
            probeNumber = probeCases[i].getProbeNumber();
            testBy = probeCases[i].getTestBy();
            result = probeCases[i].getResult();
            resultType = probeCases[i].getResultType();
            //note = probeCases[i].getNote();
            billableType = probeCases[i].getBillableType();

            Date testDate = probeCases[i].getTestDate();
            Date closedDate = probeCases[i].getClosedDate();
            domain = probeCases[i].getDomain();

            /*
            System.out.println("-------------------------------------->projectName="+projectName);
            System.out.println("-------------------------------------->probeName="+probeName);
            System.out.println("-------------------------------------->investigator="+investigator);
            System.out.println("-------------------------------------->labName="+labName);
            System.out.println("-------------------------------------->phone="+phone);
            System.out.println("-------------------------------------->probeNumber="+probeNumber);
            System.out.println("-------------------------------------->note="+note);
            System.out.println("-------------------------------------->testBy="+testBy);
            System.out.println("-------------------------------------->result="+result);
            System.out.println("-------------------------------------->testDate="+testDate);
            System.out.println("-------------------------------------->closedDate="+closedDate);
            System.out.println("-------------------------------------->domain="+domain);
            */
            if(isItemChecked)
            {
               icon.setActionLink("/wf/probeTest.wf?actiontype=deselect&id="+id);
               icon.setIcon(codeBase + "/images/checked.gif");
            }
            else
            {
               icon.setActionLink("/wf/probeTest.wf?actiontype=select&id="+id);
               icon.setIcon(codeBase + "/images/unchecked.gif");
            }
            row = new DataRow();
            row.addElement(icon);

            //Inventory informations
            row.setId(id+"");
            strBuffer = new StringBuffer("");
            strBuffer.append("Domain : ")
                     .append(Utility.NAFormat(domain))
                     .append('\r')
                     .append("Lab Head : ")
                     .append(Utility.NAFormat(labName))
                     .append('\r')
                     .append("Phone : ")
                     .append(Utility.NAFormat(phone));
            
            // 1. project name
            item = new TextItem();
            item.setName("Project Name");
            item.setId("projectName");
            item.setText(Utility.NAFormat(projectName));
            item.setActionLink("/wf/probeCase.wf?actiontype=edit&id="+id);
            item.setActionTarget("_parent");
            item.setAltText(strBuffer.toString());
            item.setBgcolor("#48d1cc");//#afeeee
            item.setBold(true);
            row.addElement(item);

            // 2. probe name
            probeName = Utility.NAFormat(probeName);
            item = new TextItem();
            item.setName("Probe Name");
            item.setId("probeName");
            item.setText(probeName);
            if("n/a".equals(probeName))
               item.setColor("#ca0000");
            item.setBgcolor("#C1A5FC");//#9370db
            row.addElement(item);
            
            // 3. investigator name
            investigator = Utility.NAFormat(investigator);
            item = new TextItem();
            item.setName("Investigator");
            item.setId("investigator");
            item.setText(investigator);
            item.setAltText(strBuffer.toString());
            if("n/a".equals(investigator))
               item.setColor("#ca0000");
            row.addElement(item);

            // 4. proebNumber
            String str_probeNumber = Utility.NAFormat(probeNumber+"");
            item = new TextItem();
            item.setName("Probe#");
            item.setId("probeNumber");
            item.setText(str_probeNumber);
            if("n/a".equals(str_probeNumber))
               item.setColor("#ca0000");
            row.addElement(item);

             // 6. result
            item = new TextItem();
            item.setName("Result");
            item.setId("result");
            if("n/a".equals(resultType))
            {
               item.setColor("#ca0000");
               item.setText("n/a");
            }
            else if("good".equals(resultType))
            {
                 item.setColor("#228b22");//#186321
                 item.setText("good");
                 //item.setBold(true);
           }
            else if("notGood".equals(resultType))
            {
                item.setColor("#C86400");//#AD4A18
                item.setText("not good");
                //item.setBold(true);
            }
            else if("repeat".equals(resultType))
            {
                item.setColor("#4169e1");//#3152A5
                item.setText("repeat");
                //item.setBold(true);
            }
            row.addElement(item);

            // 5. testBy
            testBy = Utility.NAFormat(testBy);
            item = new TextItem();
            item.setName("Test By");
            item.setId("testBy");
            item.setText(testBy);
            if("n/a".equals(testBy))
               item.setColor("#ca0000");
            item.setBgcolor("#A6FA54");//#7cfc00
            row.addElement(item);


            // 7. testDate
            String str_testDate = Utility.dateFormat(testDate,"MM/dd/yyyy");
            item = new TextItem();
            item.setName("Test Date");
            item.setId("testDate");
            item.setText(str_testDate);
            item.setBgcolor("#FFFF9C");

            if(!"n/a".equals(str_testDate))
               item.setColor("#000066");
            else
               item.setColor("#ca0000");
            row.addElement(item);

            // 8. closedDate
            String str_closedDate = Utility.dateFormat(closedDate,"MM/dd/yyyy");
            item = new TextItem();
            item.setName("Closed Date");
            item.setId("closedDate");
            item.setBgcolor("#b0c4de");// #3f0ffff
            item.setText(str_closedDate);
            if(!"n/a".equals(str_closedDate))
               item.setColor("#000066");
            else
               item.setColor("#ca0000");
            row.addElement(item);


            //10. billableType
            billableType = Utility.NAFormat(billableType);
            item = new TextItem();
            item.setName("Billable");
            item.setId("billableType");
            if("n/a".equals(billableType))
               billableType = "no";
            if("yes".equals(billableType))
            {
               //item.setText("Yes");
               item.setColor("#522994");//#dda0dd
            }
            else
            {
               //item.setText("No");
               item.setColor("#cccccc");//#dda0dd
            }
            item.setBgcolor("da70d6");// #ddao66
            item.setText(billableType);
            item.setBold(true);
            row.addElement(item);
         }
         catch(Exception e)
         {
              e.printStackTrace();
         }
         sheet.addDataRow(row);
        
      }
      return reportDetail;
   }
}