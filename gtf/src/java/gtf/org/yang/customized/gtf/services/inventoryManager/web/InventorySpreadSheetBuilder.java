/* Generated by Together */
package org.yang.customized.gtf.services.inventoryManager.web;

import java.sql.Date;
import org.yang.util.SMUtility;
import org.yang.util.DateFormatter;
import org.yang.web.controller.GenericBean;
import org.yang.web.view.controls.WebControl;
import org.yang.web.view.controls.WebControlBuilder;
import org.yang.web.view.controls.jsStyle.UIForm;
import org.yang.web.view.controls.jsStyle.TextField;
import org.yang.web.view.controls.jsStyle.PassElement;
import org.yang.web.view.controls.jsStyle.SelectElement;
import org.yang.web.view.controls.jsStyle.TextAreaElement;
import org.yang.web.view.controls.jsStyle.ButtonElement;
import org.yang.web.view.controls.jsStyle.dataSheet.DataSheet;
import org.yang.web.view.controls.jsStyle.dataSheet.DataRow;
import org.yang.web.view.controls.jsStyle.dataSheet.DataItem;
import org.yang.web.view.controls.jsStyle.dataSheet.TextItem;
import org.yang.web.view.controls.jsStyle.dataSheet.AccessIcon;
import org.yang.web.view.controls.jsStyle.dataSheet.DataSheetSet;
import org.yang.customized.gtf.services.dataAccess.Record;
import org.yang.services.dataAccess.Data;
import org.yang.services.dataAccess.DataUnavailableException;
import org.yang.web.view.controls.jsStyle.misc.MessageDisplayingBanner;
import org.yang.customized.gtf.services.inventoryManager.InventoryManager;
import org.yang.customized.gtf.services.dataAccess.DateTextItem;
import org.yang.web.view.controls.jsStyle.dataSheet.SelectableItem;
import org.yang.customized.gtf.services.inventoryManager.utility.Utility;

public class InventorySpreadSheetBuilder implements WebControlBuilder
{
   private StringBuffer sb = null;
   public WebControl build(GenericBean bean) throws Exception
   {
      InventoryBean inventoryBean = (InventoryBean)bean;
      Record[] records = new Record[]{};

      try
      {
         records = inventoryBean.getAvailableRecords();
      }
      catch(Exception e){}

      if(null==records||0>=records.length)      // if no inventory available
      {
         MessageDisplayingBanner banner = new MessageDisplayingBanner();
         banner.setText("No activated inventory item is available.");
         banner.setColor("#c0c0c0");
         
         return banner;
      }

      String codeBase = inventoryBean.getAppBase() + inventoryBean.getGuiBase();
      DataSheetSet reportDetail = null;

      if(null==(reportDetail=(DataSheetSet)inventoryBean.getControl("inventorySpreadSheet")))
      {
          reportDetail = createReportDetail(inventoryBean, records, codeBase,System.currentTimeMillis());
          inventoryBean.setControl("inventorySpreadSheet", reportDetail);
      }
      else
      {
          reportDetail = createReportDetail(inventoryBean, records, codeBase,System.currentTimeMillis());
          reportDetail.getDatasheet("inventorySpreadSheet").getPageNumberSelector().setSelectedValue(inventoryBean.getPage());
      }
      
      reportDetail.getDatasheet("inventorySpreadSheet").sort(inventoryBean.getSortBy(), inventoryBean.getIsAcending());
      
      String currentRecordId;
      if(null!=inventoryBean.getCurrentRecord())
      {
         currentRecordId = inventoryBean.getCurrentRecord().getId();
         reportDetail.setHighlightId(currentRecordId+"");
         reportDetail.setHighlightColor("#00ffff");
      }
      
      return reportDetail;
   }

   private DataSheetSet createReportDetail(InventoryBean inventoryBean, Record[] records, String codeBase,long time)
   {
      DataSheetSet reportDetail = new DataSheetSet();
      DataSheet sheet = new DataSheet();
      sheet.setId("inventorySpreadSheet");
      sheet.setActionLink("/wf/inventory.wf");
      sheet.setRowsPerPage(10);

      SelectableItem paging = new SelectableItem();
      paging.setId("page");
      paging.setName("page");
      paging.setCaption("Select page");
      paging.setActionLink("/wf/inventory.wf");
      paging.setActionTarget("_parent");
      paging.setOnChange("javascript:submitForm('" + paging.getId() + "','changePage')");
      //System.out.println("page----------------------->" + inventoryBean.getPage());
      paging.setSelectedValue(inventoryBean.getPage());
      paging.setNeedPromptOption(false);

      sheet.setPageNumberSelector(paging);
      reportDetail.addDataSheet(sheet);

      DataRow row = null;
      TextItem item = null;
      String value = null;
      boolean iscurrentRecordId = false;
      AccessIcon icon = null;
      Boolean allChecked = new Boolean (inventoryBean.getIsAllChecked());
      boolean isItemChecked = false;
     
      String id = "";
      String domain = "";
      String projectName = "";
      String plasmidBAC = "";
      String investigator = "";
      String labName = "";
      String phone = "";
      String billableType = "";
      int number = 0;
      String mouseHost = "";
      StringBuffer strBuffer = null;

      for(int i=0; i<records.length; i++)
      { 
         try
         {
            isItemChecked = records[i].getIsSelected();
            icon = new AccessIcon();
            icon.setName("All");
            icon.setIsSortable(false);
            icon.setActionTarget("_parent");
            if(!inventoryBean.getIsAllChecked())
               icon.setTitleLink("/wf/inventory.wf?actiontype=selectAll");
            else
               icon.setTitleLink("/wf/inventory.wf?actiontype=deselectAll");
         
            id = records[i].getId();
            projectName = records[i].getProjectName();
            plasmidBAC = records[i].getPlasmidBAC();
            investigator = records[i].getInvestigator();
            labName = records[i].getLabName();
            phone = records[i].getPhone();
            number = records[i].getNumber();
            mouseHost = records[i].getMouseHost();
            billableType = records[i].getBillableType();

            Date receivedDate = records[i].getReceivedDate();
            Date purifiedDate = records[i].getPurifiedDate();
            Date injectedDate = records[i].getInjectedDate();
            Date closedDate = records[i].getClosedDate();
            domain = records[i].getDomain();

            /*
            System.out.println("-------------------------------------->projectName="+projectName);
            System.out.println("-------------------------------------->plasmidBAC="+plasmidBAC);
            System.out.println("-------------------------------------->investigator="+investigator);
            System.out.println("-------------------------------------->labName="+labName);
            System.out.println("-------------------------------------->phone="+phone);
            System.out.println("-------------------------------------->number="+number);
            System.out.println("-------------------------------------->mouseHost="+mouseHost);
            System.out.println("-------------------------------------->receivedDate="+receivedDate);
            System.out.println("-------------------------------------->purifiedDate="+purifiedDate);
            System.out.println("-------------------------------------->injectedDate="+injectedDate);
            System.out.println("-------------------------------------->closedDate="+closedDate);
            System.out.println("-------------------------------------->domain="+domain);
            */
            if(isItemChecked)
            {
               icon.setActionLink("/wf/inventory.wf?actiontype=deselect&id="+id);
               icon.setIcon(codeBase + "/images/checked.gif");
            }
            else
            {
               icon.setActionLink("/wf/inventory.wf?actiontype=select&id="+id);
               icon.setIcon(codeBase + "/images/unchecked.gif");
            }
            row = new DataRow();
            row.addElement(icon);

            //Inventory informations
            row.setId(id+"");
            strBuffer = new StringBuffer("");
            strBuffer.append("Domain : ")
                     .append(Utility.NAFormat(domain))
                     .append('\r')
                     .append("Lab Head : ")
                     .append(Utility.NAFormat(labName))
                     .append('\r')
                     .append("Phone : ")
                     .append(Utility.NAFormat(phone));
            
            // 1. project name
            item = new TextItem();
            item.setName("Project");
            item.setId("projectName");
            item.setText(Utility.NAFormat(projectName));
            item.setActionLink("/wf/record.wf?actiontype=edit&id="+id);
            item.setActionTarget("_parent");
            item.setAltText(strBuffer.toString());
            item.setBgcolor("#afeeee");
            item.setBold(true);
            row.addElement(item);

            // 2. plasmidBAC name
            plasmidBAC = Utility.NAFormat(plasmidBAC);
            item = new TextItem();
            item.setName("Plasmid/BAC");
            item.setId("plasmidBAC");
            item.setText(plasmidBAC);
            if("n/a".equals(plasmidBAC))
               item.setColor("#ca0000");
            item.setBgcolor("#ccccff"); //#C6EFF7
            row.addElement(item);
            
            // 3. investigator name
            investigator = Utility.NAFormat(investigator);
            item = new TextItem();
            item.setName("Investigator");
            item.setId("investigator");
            item.setText(investigator);
            item.setAltText(strBuffer.toString());
            if("n/a".equals(investigator))
               item.setColor("#ca0000");
            row.addElement(item);


            // 4. number
            String str_number = Utility.NAFormat(number+"");
            item = new TextItem();
            item.setName("No.");
            item.setId("number");
            item.setText(str_number);
            if("n/a".equals(str_number))
               item.setColor("#ca0000");
            row.addElement(item);

            // 5. mouseHost
            mouseHost = Utility.NAFormat(mouseHost);
            item = new TextItem();
            item.setName("Mouse Host");
            item.setId("mouseHost");
            item.setText(mouseHost);
            if("n/a".equals(mouseHost))
               item.setColor("#ca0000");
            row.addElement(item);

             // 6. receivedDate
            String str_receivedDate = Utility.dateFormat(receivedDate,"MM/dd/yyyy");
            item = new TextItem();
            item.setName("Received Date");
            item.setId("receivedDate");
            item.setText(str_receivedDate);
            item.setBgcolor("#ffc0cd"); 
            if(!"n/a".equals(str_receivedDate))
               item.setColor("#000066");
            else
               item.setColor("#ca0000");
            row.addElement(item);

            // 7. purifiedDate
            String str_purifiedDate = Utility.dateFormat(purifiedDate,"MM/dd/yyyy");
            item = new TextItem();
            item.setName("Purified Date");
            item.setId("purifiedDate");
            item.setText(str_purifiedDate);
            item.setBgcolor("#FFFF9C");

            if(!"n/a".equals(str_purifiedDate))
               item.setColor("#000066");
            else
               item.setColor("#ca0000");
            row.addElement(item);

            // 8. injectedDate
            String str_injectedDate = Utility.dateFormat(injectedDate,"MM/dd/yyyy");
            item = new TextItem();
            item.setName("Injected Date");
            item.setId("injectedDate");
            item.setBgcolor("#ffcc33");
            item.setText(str_injectedDate);
            if(!"n/a".equals(str_injectedDate))
               item.setColor("#000066");
            else
               item.setColor("#ca0000");
            row.addElement(item);

            // 9. closedDate
            String str_closedDate = Utility.dateFormat(closedDate,"MM/dd/yyyy");
            item = new TextItem();
            item.setName("Closed Date");
            item.setId("closedDate");
            item.setBgcolor("#A5DE94");
            item.setText(str_closedDate);
            if(!"n/a".equals(str_closedDate))
               item.setColor("#000066");
            else
               item.setColor("#ca0000");
            row.addElement(item);

            //10. billableType
            billableType = Utility.NAFormat(billableType);
            item = new TextItem();
            item.setName("Billable");
            item.setId("billableType");
            if("n/a".equals(billableType))
               billableType = "no";
            if("yes".equals(billableType))
            {
               item.setColor("#522994");//#dda0dd
            }
            else
            {
               item.setColor("#cccccc");//#dda0dd
            }
            item.setBgcolor("#ddao66");//da70d6
            item.setText(billableType);
            item.setBold(true);
            row.addElement(item);


             //10. billableType
            /*
            billableType = Utility.NAFormat(billableType);
            item = new TextItem();
            item.setName("Billable");
            item.setId("billableType");
            if("n/a".equals(billableType))
               billableType = "no";
            item.setText(billableType);
            item.setAltText(strBuffer.toString());
            row.addElement(item);*/
         }
         catch(Exception e)
         {
              e.printStackTrace();
         }
         sheet.addDataRow(row);
        
      }
      return reportDetail;
   }
}