/* Generated by Together */
package org.yang.customized.gtf.services.scheduler.web;

import org.yang.web.view.controls.WebControlBuilder;
import org.yang.web.view.controls.WebControl;
import org.yang.web.controller.GenericBean;
import org.yang.web.view.controls.jsStyle.UIForm;
import org.yang.web.view.controls.jsStyle.TextField;
import org.yang.web.view.controls.jsStyle.PassElement;
import org.yang.web.view.controls.jsStyle.SelectElement;
import org.yang.web.view.controls.jsStyle.TextAreaElement;
import org.yang.web.view.controls.jsStyle.ButtonElement;
import java.util.HashMap;
import java.util.Iterator;
import org.yang.customized.gtf.services.dataAccess.ProjectFactory;
import org.yang.customized.gtf.services.dataAccess.Project;
import org.yang.web.view.controls.jsStyle.WebControlGroup;
import org.yang.services.dataAccess.DataGroup;
import org.yang.services.dataAccess.Data;
import org.yang.web.view.controls.jsStyle.misc.MessageDisplayingBanner1;
import org.yang.customized.gtf.services.scheduleManager.ScheduleManager;
import org.yang.customized.gtf.services.dataAccess.Timetable;
import org.yang.customized.gtf.services.scheduler.Scheduler;
import org.yang.customized.gtf.services.dataAccess.Schedule;
import org.yang.web.view.controls.jsStyle.DateField;
import org.yang.web.view.controls.jsStyle.FormElement;

public class TimetableBuilder implements WebControlBuilder
{
   public WebControl build(GenericBean bean) throws Exception
   {
      TimetableBean timetableBean = (TimetableBean)bean;
      String codeBase = timetableBean.getAppBase() + timetableBean.getGuiBase();
      Timetable currentTimetable = timetableBean.getCurrentTimetable();
      Project currentProject = timetableBean.getCurrentProject();

      WebControlGroup controlGroup = new WebControlGroup();

      if(GenericBean.ERR==timetableBean.getState())
      {
         MessageDisplayingBanner1 banner = new MessageDisplayingBanner1();
         banner.setText(timetableBean.getMsg());
         banner.setColor("#cc0000");
         controlGroup.addASubcontrol(banner);
      }

      // User permission
      boolean xdomain = timetableBean.gotPermit("Scheduler", currentTimetable.getProjectType(), Scheduler.CROSS_DOMAIN);

      UIForm form = new UIForm();
      form.setCaption("Basic Information");

      TextField type = new TextField();
      type.setTitle("project type");
      type.setId("type");
      type.setName("type");
      type.setValue(currentTimetable.getProjectType());
      type.setDisplayOnly(true);
      form.addASubcontrol(type);

      TextField projectId = new TextField();
      projectId.setTitle("project ID");
      projectId.setId("id");
      projectId.setName("id");
      projectId.setValue(currentTimetable.getId());
      projectId.setIsReadOnly(true);
      form.addASubcontrol(projectId);

      TextField projectname = new TextField();
      projectname.setTitle("project name");
      projectname.setId("name");
      projectname.setName("name");
      projectname.setValue(currentProject.getName());
      projectname.setIsReadOnly(true);
      form.addASubcontrol(projectname);

      String domain = currentProject.getDomain();
      TextField institute = new TextField();
      institute.setTitle("lab's name");
      institute.setId("domain");
      institute.setName("domain");
      institute.setValue(domain);
      institute.setDisplayOnly(true);
      form.addASubcontrol(institute);

      String account = currentProject.getAccountId();
      TextField accountId = new TextField();
      accountId.setTitle("accountId");
      accountId.setId("accountId");
      accountId.setName("account No.");
      if(null!=account&&!"null".equals(account))
         accountId.setValue(account);
      else
         accountId.setValue("N/A");
      accountId.setDisplayOnly(true);
      form.addASubcontrol(accountId);

      TextField investigator = new TextField();
      investigator.setTitle("investigator");
      investigator.setId("investigator");
      investigator.setName("investigator");
      investigator.setValue(currentProject.getInvestigator());
      investigator.setDisplayOnly(true);
      form.addASubcontrol(investigator);

      DateField dueDate = new DateField();
      dueDate.setTitle("due date");
      dueDate.setId("dueDate");
      dueDate.setName("dueDate");
      dueDate.setOnChangeLink("submitForm('timetable','onChange')");
      dueDate.setYear(currentTimetable.getDueDate().getYear()+1900);
      dueDate.setMonth(currentTimetable.getDueDate().getMonth());
      dueDate.setDate(currentTimetable.getDueDate().getDate());
      form.addASubcontrol(dueDate);

      TextAreaElement description = new TextAreaElement();
      description.setTitle("description");
      description.setId("description");
      description.setName("description");
      description.setValue(currentProject.getDescription());
      description.setIsReadOnly(true);
      form.addASubcontrol(description);

      // real datas
      Data[] timetableDatas = currentTimetable.getDatas();
      if(null!=timetableDatas)
      {
         for(int j=0; j<timetableDatas.length; j++)
         {
            timetableDatas[j].setId(currentTimetable.getId() + ":timetable");
            // getDisplay(Data data, String dataOwner, boolean displayOnly)
            //System.out.println("Timetable information:" +
            //                    timetableDatas[j].getId() +
            //                    ", name=" +
            //                    timetableDatas[j].getName() +
            //                    ", value=" +
            //                    timetableDatas[j].getValue());
            form.addASubcontrol(timetableDatas[j].getDisplayer().getDisplay(timetableDatas[j], null, false));
         }
      }

      controlGroup.addASubcontrol(form);

      Schedule[] schedules = currentTimetable.getSchedules();
      Data[] scheduleDatas = null;
      TextField data = null;
      Iterator it = null;
      String name = null;
      java.sql.Date sDueDate = null;
      for(int i=0; i<schedules.length; i++)
      {
         form = new UIForm();
         form.setCaption(schedules[i].getDisplayName());

         //TextField scheduleId = new TextField();
         //scheduleId.setTitle("schedule ID");
         //scheduleId.setId("sid");
         //scheduleId.setName("sid");
         //scheduleId.setValue(schedules[i].getId());
         //scheduleId.setIsReadOnly(true);
         //form.addASubcontrol(scheduleId);

         DateField sDueDateElement = new DateField();
         sDueDateElement.setTitle("due date");
         sDueDateElement.setId("dueDate");
         sDueDateElement.setName("dueDate");
         sDueDateElement.setOnChangeLink("submitForm('timetable','onChange')");
         if(null==(sDueDate=schedules[i].getDueDate()))
         {
            sDueDateElement.setDisable(true);
         }
         else
         {
            sDueDateElement.setDisplayOnly(true);
            sDueDateElement.setYear(schedules[i].getDueDate().getYear()+1900);
            sDueDateElement.setMonth(schedules[i].getDueDate().getMonth());
            sDueDateElement.setDate(schedules[i].getDueDate().getDate());
         }
         form.addASubcontrol(sDueDateElement);

         // real datas
         scheduleDatas = schedules[i].getDatas();
         if(null!=scheduleDatas)
         {
            for(int j=0; j<scheduleDatas.length; j++)
            {
               scheduleDatas[j].setId(schedules[j].getTimetableId() + ":" + schedules[j].getName());
               // getDisplay(Data data, String dataOwner, boolean displayOnly)
               System.out.println("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMm:" +
                                   scheduleDatas[j].getId() +
                                   ", name=" +
                                   scheduleDatas[j].getName() +
                                   ", value=" +
                                   scheduleDatas[j].getValue());
               form.addASubcontrol(scheduleDatas[j].getDisplayer().getDisplay(scheduleDatas[j], null, false));
            }
         }

         if(i==schedules.length-1)
         {
            ButtonElement save = new ButtonElement();
            save.setAction("javascript:submitForm('timetable','update')");
            save.setAlt("Update project information");
            save.setName("save");
            save.setOffIcon(codeBase + "/images/English/btn_update.gif");
            save.setOnIcon(codeBase + "/images/English/btn_update_on.gif");
            form.addAButton(save);

            ButtonElement help = new ButtonElement();
            help.setAction("javascript:top.topFrame.openSWHelpWindow('" + codeBase + "/help/English/help.jsp?right=schedule.htm#project')");
            help.setName("help");
            help.setOffIcon(codeBase + "/images/English/btn_help.gif");
            help.setOnIcon(codeBase + "/images/English/btn_help_on.gif");
            help.setAlt("Help");
            form.addAButton(help);
         }
         controlGroup.addASubcontrol(form);
      }
      return controlGroup;
   }



/*
         if(i==dataGroups.length-1)
         {
            ButtonElement save = new ButtonElement();
            if(Project.CREATE==currentProject.getAction()&&
               projectBean.gotPermit("ScheduleManager", currentProject.getType(), "create"))
            {
               save.setAction("javascript:submitForm('projectInformation','create')");
               save.setAlt("Create project");
               save.setName("save");
               save.setOffIcon(codeBase + "/images/English/btn_create.gif");
               save.setOnIcon(codeBase + "/images/English/btn_create_on.gif");
               form.addAButton(save);
            }
            else if(projectBean.gotPermit("ScheduleManager", currentProject.getType(), "update"))
            {
               save.setAction("javascript:submitForm('projectInformation','update')");
               save.setAlt("Update project information");
               save.setName("save");
               save.setOffIcon(codeBase + "/images/English/btn_update.gif");
               save.setOnIcon(codeBase + "/images/English/btn_update_on.gif");
               form.addAButton(save);
            }

            ButtonElement help = new ButtonElement();
            help.setAction("javascript:top.topFrame.openSWHelpWindow('" + codeBase + "/help/English/help.jsp?right=schedule.htm#project')");
            help.setName("help");
            help.setOffIcon(codeBase + "/images/English/btn_help.gif");
            help.setOnIcon(codeBase + "/images/English/btn_help_on.gif");
            help.setAlt("Help");
            form.addAButton(help);
         }
*/
}