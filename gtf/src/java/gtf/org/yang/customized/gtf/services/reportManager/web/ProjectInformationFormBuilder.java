/* Generated by Together */
package org.yang.customized.gtf.services.reportManager.web;

import org.yang.web.view.controls.WebControlBuilder;
import org.yang.web.view.controls.WebControl;
import org.yang.web.controller.GenericBean;
import org.yang.web.view.controls.jsStyle.UIForm;
import org.yang.web.view.controls.jsStyle.TextField;
import org.yang.web.view.controls.jsStyle.PassElement;
import org.yang.web.view.controls.jsStyle.SelectElement;
import org.yang.web.view.controls.jsStyle.TextAreaElement;
import org.yang.web.view.controls.jsStyle.ButtonElement;
import org.yang.web.view.controls.jsStyle.InformationForm;
import java.util.HashMap;
import java.util.Iterator;
import org.yang.customized.gtf.services.dataAccess.Project;
import org.yang.web.view.controls.jsStyle.WebControlGroup;
import org.yang.services.dataAccess.DataGroup;
import org.yang.services.dataAccess.Data;
import org.yang.customized.gtf.services.dataAccess.Stage;
import org.yang.util.DateFormatter;
import java.util.Date;
import org.yang.services.dataAccess.DataUnavailableException;
import org.yang.customized.gtf.services.reportManager.ReportManager;
import org.yang.web.view.controls.jsStyle.DataSheetElement;

public class ProjectInformationFormBuilder implements WebControlBuilder
{
   public WebControl build(GenericBean bean) throws Exception
   {
      ReportProjectInformationBean projectInformationBean = (ReportProjectInformationBean)bean;
      String codeBase = projectInformationBean.getAppBase() + projectInformationBean.getGuiBase();
      Project currentProject = projectInformationBean.getCurrentProject();
      boolean isClient = projectInformationBean.gotPermit("ReportManager", projectInformationBean.getProjectType(), ReportManager.CLIENT);
      //boolean isClient = projectInformationBean.gotPermit("ProjectManager", projectInformationBean.getProjectType(), ProjectManager.CLIENT);

      WebControlGroup controlGroup = new WebControlGroup();

      UIForm form = new UIForm();
      form.setCaption("Basic Information");

      TextField type = new TextField();
      type.setTitle("Project Type");
      type.setId("type");
      type.setName("type");
      type.setValue(currentProject.getDisplayTypeName());
      type.setDisplayOnly(true);
      form.addASubcontrol(type);

      TextField projectId = new TextField();
      projectId.setTitle("Project ID");
      projectId.setId("id");
      projectId.setName("id");
      projectId.setValue(currentProject.getId());
      projectId.setDisplayOnly(true);
      form.addASubcontrol(projectId);

      TextField projectname = new TextField();
      projectname.setTitle("Project Name");
      projectname.setId("name");
      projectname.setName("name");
      projectname.setValue(currentProject.getName());
      form.addASubcontrol(projectname);

      String domain = currentProject.getDomain();

      TextField investigator = new TextField();
      investigator.setTitle("Investigator's Name");
      investigator.setId("investigator");
      investigator.setName("investigator");
      investigator.setValue(projectInformationBean.whoIsIt(domain, currentProject.getInvestigator()));
      investigator.setIsReadOnly(true);
      form.addASubcontrol(investigator);

      TextField institute = new TextField();
      institute.setTitle("Lab's Name");
      institute.setId("domain");
      institute.setName("domain");
      institute.setValue(domain);
      institute.setIsReadOnly(true);
      form.addASubcontrol(institute);

      String projectType = projectInformationBean.getProjectType();
      String displayName = "Account ID";
      if("GT".equals(projectType))
        displayName = "Project Code";
      TextField accountId = new TextField();
      accountId.setTitle(displayName);
      accountId.setId("accountId");
      accountId.setName("accountId");
      accountId.setValue(currentProject.getAccountId());
      form.addASubcontrol(accountId);

      TextField protocolNumber = new TextField();
      protocolNumber.setTitle("Protocol Number");
      protocolNumber.setId("protocolNumber");
      protocolNumber.setName("protocolNumber");
      protocolNumber.setValue(currentProject.getProtocolNumber());
      protocolNumber.setIsMandatory(true);
      //protocolNumber.setIsReadOnly(true);
      form.addASubcontrol(protocolNumber);

      TextAreaElement description = new TextAreaElement();
      description.setTitle("Description");
      description.setId("description");
      description.setName("description");
      description.setValue(currentProject.getDescription());
      form.addASubcontrol(description);
      controlGroup.addASubcontrol(form);

      DataGroup[] dataGroups = currentProject.getGroups();
      Data[] datas = null;
      TextField data = null;
      Iterator it = null;
      String name = null;
      for(int i=0; i<dataGroups.length; i++)
      {
         datas = currentProject.getDatas(dataGroups[i].getName());
         form = new UIForm();
         form.setCaption(dataGroups[i].getDisplayName());
         for(int j=0; j<datas.length; j++)
         {
            form.addASubcontrol(datas[j].getDisplayer().getDisplay(datas[j],
                                                                   null,
                                                                   false));
         }
/*
         if(i==dataGroups.length-1)
         {
            ButtonElement save = new ButtonElement();
            save.setAction("javascript:submitForm('projectInformation','update')");
            save.setAlt("Update project information");
            save.setName("save");
            save.setOffIcon(codeBase + "/images/English/btn_update.gif");
            save.setOnIcon(codeBase + "/images/English/btn_update_on.gif");
            form.addAButton(save);

            ButtonElement help = new ButtonElement();
            help.setAction("javascript:top.topFrame.openSWHelpWindow('" + codeBase + "/help/English/help.jsp?right=schedule.htm#project')");
            help.setName("help");
            help.setOffIcon(codeBase + "/images/English/btn_help.gif");
            help.setOnIcon(codeBase + "/images/English/btn_help_on.gif");
            help.setAlt("Help");
            form.addAButton(help);
         }
*/		 
         controlGroup.addASubcontrol(form);
      }

      HashMap stages = projectInformationBean.getCurrentAvailableStages(currentProject.getId());
      if(null!=stages&&0<stages.size())
      {
         form = new UIForm();
         form.setCaption("Project Results");

         Stage[] templates = null;;
         templates = projectInformationBean.getAllStageTemplates();

         TextField dataItem = null;
         Stage aStage = null;
         String value = null;
         // loop all stages
         for(int j=0; j<templates.length; j++)
         {
            // Stage information
            aStage = (Stage)stages.get(templates[j].getName());

            // if auto-caught date need to be shown on master table
            if(templates[j].getDateOnMasterTable())
            {
               dataItem = new TextField();
               dataItem.setTitle(templates[j].getDateDisplayName());
               dataItem.setId(templates[j].getDateDisplayName());
               dataItem.setName(templates[j].getDateDisplayName());
               value = null;
               if(null!=aStage&&-1!=aStage.getDoneDate())
                  value = DateFormatter.getDateTimeString(new Date(aStage.getDoneDate()), templates[j].getDateDisplayFormat());
               if(null==value||"".equals(value))
                  value = "n/a";
               dataItem.setValue(value);
               dataItem.setDisplayOnly(true);
               form.addASubcontrol(dataItem);
            }

            // Display stage datas
            datas = templates[j].getDatas();
            for(int k=0; k<datas.length; k++)
            {
               try
               {
                  // 1. data was defined shown on master table
                  // 2. the user either is not client
                  // 3. or user is client and data is available for client
                  if(datas[k].getOnMasterTable()&&(!isClient||(isClient&&datas[k].getAvailForClient())))
                  {
                     try
                     {
                        value = aStage.getData(datas[k].getName()).getSummary(isClient);
                     }
                     catch(Exception due)
                     {
                        System.out.println("Data is not available, set it to empty string.");
                        value = "n/a";
                     }

                     if(!"click for detail".equals(value))
                     {
                        dataItem = new TextField();
                        dataItem.setTitle(datas[k].getBriefDisplayName());
                        dataItem.setId(datas[k].getBriefDisplayName());
                        dataItem.setName(datas[k].getBriefDisplayName());
                        //items.setIsSortable(datas[i].getIsSortable());
						if(null!=aStage)
                        {
                           if(null==value||"".equals(value))
                           {
                              dataItem.setValue("n/a");
                           }
                           else
                           {
                              dataItem.setValue(value);
                           }
                        }
                        else
                        {
                           dataItem.setValue("n/a");
                        }
                        dataItem.setDisplayOnly(true);
                        form.addASubcontrol(dataItem);
                     }
                     else
                     {					
                        try
                        {
                          
                           form.addASubcontrol(datas[k].getDisplayer()
                                                       .getDisplay(aStage.getData(datas[k].getName()), null, true));
													   
                        }
                        catch(Exception e)
                        {
                           dataItem = new TextField();
                           dataItem.setTitle(datas[k].getBriefDisplayName());
                           dataItem.setId(datas[k].getBriefDisplayName());
                           dataItem.setName(datas[k].getBriefDisplayName());
                           dataItem.setValue("n/a");
                           dataItem.setDisplayOnly(true);
                           form.addASubcontrol(dataItem);
                        }
                     }
                  }
               }
               catch(Exception e) { e.printStackTrace(); }
            }
         }
         controlGroup.addASubcontrol(form);
      }
      return controlGroup;
   }
}