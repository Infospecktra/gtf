/* Generated by Together */

package org.yang.customized.gtf.services.projectViewer;

import java.util.Calendar;
import java.util.Date;
import javax.servlet.ServletOutputStream;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import org.yang.web.controller.GenericBean;
import org.yang.customized.gtf.services.projectViewer.utility.ExcelFileWriter;
import org.yang.customized.gtf.services.projectViewer.web.ProjectViewerMasterBean;

/**
 *
 * @author Huei
 */
public class DownloadServlet extends HttpServlet {
   //public static String archiveDir = "/users/GTF/gtf_storage_xls/";//remote
   //public static String archiveDir = "C:\\GTFWorkingDir\\"; //local
   private String archiveDir; 
   private GenericBean  genericBean = null;

    /**
     * Processes requests for both HTTP
     * <code>GET</code> and
     * <code>POST</code> methods.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        response.setContentType("application/vnd.ms-excel");
		
	Calendar calendar = Calendar.getInstance();
        Date  now =  new Date(calendar.getTime().getTime());
        int year = now.getYear()+1900;
        int month = now.getMonth()+1;
        int day = now.getDate();
        
        archiveDir=  loadWorkingDir();
	String filename = "ProjectResultsOutput_"+year+"_"+month+"_"+day+".xls";
	String sourceFile = archiveDir + filename; 
		
	//set download filename
	response.setHeader("Content-Disposition", "inline; filename=\"" + filename + "\""  ); 
	ServletOutputStream sout= response.getOutputStream();
        
	try {
             genericBean = (GenericBean)request.getSession().getAttribute("projectMasterBean");
             ProjectViewerMasterBean  projectViewerMasterBean = (ProjectViewerMasterBean)genericBean;
	     //System.out.println("[ExcelFileTransferBean::writeToExcelFile]--->projects.length="+projects.length);   

	     ExcelFileWriter ewriter = new ExcelFileWriter(projectViewerMasterBean);
	     ewriter.write(sourceFile);
		 
		 /*
		 DataInputStream dataInputStream = new DataInputStream(new FileInputStream(ExcelFileWriter.PATH + "ProjectResultsOutput.xls"));
		 byte[] buffer = new byte[1024];
         int lastRead = 0; 
		 do
		 {
		     lastRead=dataInputStream.read(buffer);
			 sout.write(lastRead);
             sout.flush();			 
		 }
		 while(lastRead>0);
		 */
		 /*
		 BufferedReader breader = new BufferedReader(new FileReader(ExcelFileWriter.PATH + "ProjectResultsOutput.xls"));
		 String content; 
		 while((content=breader.readLine())!=null)
		 {
		     sout.write(content);
			 sout.flush();
		 }
		 */
		 File excelFile = new File(sourceFile);
                 //int fileLen = (int)excelFile.length();		 
		 //byte[] filebyteArray = new byte[fileLen];
		 byte[] buffer  = new byte[2048];
		 BufferedInputStream buffIS = new BufferedInputStream(new FileInputStream(excelFile));
		 int ch = 0;
		 while((ch=buffIS.read(buffer))>=0)
		 {
			sout.write(buffer,0,ch);
			sout.flush();
		 }
		 
        } finally {     
            sout.close();
        }
    }

    /**
     * Handles the HTTP
     * <code>GET</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    /**
     * Handles the HTTP
     * <code>POST</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
		response.sendRedirect("/wf/projectViewerMaster.wf?viewMode="+ProjectViewerManager.DATA_ON_TABLE_NAME_3);

    }

    /**
     * Returns a short description of the servlet.
     *
     * @return a String containing servlet description
     */
    public String getServletInfo() {
        return "Short description";
    }// </editor-fold>
	
    
    
   private String userHome; 
   private String loadWorkingDir(){
       userHome=System.getProperty("user.home");
       System.out.println("[DownloadServlet::loadWorkingDir]--ProjectViewer---->System.getProperty-user.home="+userHome);
       StringBuffer stringBf_workingDirectory =new StringBuffer(userHome);
       String directory;
       if(userHome.indexOf(":")>-1)
       {    
           stringBf_workingDirectory.append('\\')
                                    .append("gtf_storage_xls").append('\\'); 
    	   directory =  stringBf_workingDirectory.toString();
    	 
       }else{
           stringBf_workingDirectory.append('/')
                                    .append("gtf_storage_xls").append('/'); 
    	   directory =  stringBf_workingDirectory.toString();
    	    
        }
        System.out.println("[DownloadServlet::loadWorkingDir]--ProjectViewer---->archiveDir="+directory);
        return directory; 
  }
  
}
