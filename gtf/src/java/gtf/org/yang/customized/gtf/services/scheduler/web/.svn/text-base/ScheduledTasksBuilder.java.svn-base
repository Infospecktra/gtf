/* Generated by Together */
package org.yang.customized.gtf.services.scheduler.web;

import org.yang.web.view.controls.WebControlBuilder;
import org.yang.web.view.controls.WebControl;
import org.yang.web.controller.GenericBean;
import org.yang.web.view.controls.jsStyle.UIForm;
import org.yang.web.view.controls.jsStyle.TextField;
import org.yang.web.view.controls.jsStyle.PassElement;
import org.yang.web.view.controls.jsStyle.SelectElement;
import org.yang.web.view.controls.jsStyle.TextAreaElement;
import org.yang.web.view.controls.jsStyle.ButtonElement;
import java.util.HashMap;
import java.util.Iterator;
import org.yang.customized.gtf.services.dataAccess.ProjectFactory;
import org.yang.customized.gtf.services.dataAccess.Project;
import org.yang.web.view.controls.jsStyle.WebControlGroup;
import org.yang.services.dataAccess.DataGroup;
import org.yang.services.dataAccess.Data;
import org.yang.web.view.controls.jsStyle.misc.MessageDisplayingBanner1;
import org.yang.customized.gtf.services.scheduleManager.ScheduleManager;
import java.util.Calendar;
import org.yang.customized.gtf.services.dataAccess.Timetable;
import org.yang.customized.gtf.services.dataAccess.Schedule;

public class ScheduledTasksBuilder implements WebControlBuilder
{
   private static String[] MONS = {"January", "Febuary", "March", "April",
                                   "May", "June", "July", "Augst", "September",
                                   "October", "December", "November"};
   private static String[] DAYS = {"Sunday", "Monday", "Tuesday", "Wednesday",
                                   "Thursday", "Friday", "Saturday"};
   public WebControl build(GenericBean bean) throws Exception
   {
      ScheduledTasksBean tasksBean = (ScheduledTasksBean)bean;
      String codeBase = tasksBean.getAppBase() + tasksBean.getGuiBase();
      int year = tasksBean.getDisplayedYear();
      int month = tasksBean.getDisplayedMonth();
      int date = tasksBean.getDisplayedDay();

      WebControlGroup controlGroup = new WebControlGroup();
      if(false)
      {
         MessageDisplayingBanner1 banner = new MessageDisplayingBanner1();
         banner.setText(tasksBean.getMsg());//"Some required field is empty, Please submit it again.");
         banner.setColor("#cc0000");
         controlGroup.addASubcontrol(banner);
      }

      Calendar calendar = Calendar.getInstance();
      calendar.set(year+1900, month, date);

      WeekSchedule wSchedule = new WeekSchedule();
      wSchedule.setImageCodeBase(codeBase + "/images");


      if(tasksBean.getListMode())
      {
         buildListView(tasksBean, calendar, wSchedule);
         wSchedule.setImageCodeBase(codeBase + "/images");
         wSchedule.setIconLink(codeBase + "/images/day_on.gif");
         wSchedule.setActionLink(tasksBean.getAppBase()+
                                      "/scheduledTasks.wf?actiontype=load" +
                                                          "&listMode=false" +
                                                     "&displayedYear=" + year +
                                                    "&displayedMonth=" + month +
                                                      "&displayedDay=" + date);
      }
      else
      {
         buildCalendarView(tasksBean, calendar, wSchedule);
         wSchedule.setImageCodeBase(codeBase + "/images");
         wSchedule.setIconLink(codeBase + "/images/list_on.gif");
         wSchedule.setActionLink(tasksBean.getAppBase() +
                                          "/scheduledTasks.wf?actiontype=load" +
                                                              "&listMode=true" +
                                                         "&displayedYear=" + year +
                                                        "&displayedMonth=" + month +
                                                          "&displayedDay=" + date);
      }

      return wSchedule;
   }

   private void buildListView(ScheduledTasksBean tasksBean, Calendar calendar, WeekSchedule wSchedule)
   {
      wSchedule.setTitle("Tasks in next 10 days");
      FutureTasks tasks = new FutureTasks();

      java.sql.Date dateFrom = new java.sql.Date(calendar.getTimeInMillis());
      foreward(calendar, 10);
      java.sql.Date dateTo = new java.sql.Date(calendar.getTimeInMillis());
      Project[] projects = null;
      try
      {
         projects = tasksBean.getAllAvailableProjects(dateFrom, dateTo);
      }
      catch(Exception e) { e.printStackTrace(); }

      HashMap map = null;
      Timetable timetable = null;
      Schedule[] schedules = null;
      FutureTask task = null;
      String userdomain = null;
      String username = null;
      for(int i=0; i<projects.length; i++)
      {
         timetable = tasksBean.getTimetableUnderProject(projects[i]);
         schedules = tasksBean.getSchedulesUnderProject(timetable);
         map = new HashMap();
         for(int j=0; j<schedules.length; j++)
         {
            map.put(schedules[j].getName(), schedules[j]);
         }

         username = projects[i].getInvestigator();
         userdomain = projects[i].getDomain();
         task = new FutureTask();
         try
         {
            task.setItem(timetable.getDataValue("item"));
         } catch(Exception e) {e.printStackTrace();}

         try
         {
            task.setQuantity(timetable.getDataValue("quantity"));
         } catch(Exception e) {e.printStackTrace();}

         try
         {
            task.setStrain(timetable.getDataValue("strain"));
         } catch(Exception e) {e.printStackTrace();}

         try
         {
            task.setOrder(((Schedule)map.get("orderMice")).getDueDate().toString());
         } catch(Exception e) {e.printStackTrace();}

         try
         {
            task.setHcgMate(((Schedule)map.get("hcgMate")).getDueDate().toString());
         } catch(Exception e) {e.printStackTrace();}

         try
         {
            task.setPlugDate(((Schedule)map.get("plugCheck")).getDueDate().toString());
         } catch(Exception e) {e.printStackTrace();}

         try
         {
            task.setPms(((Schedule)map.get("pms")).getDueDate().toString());
         } catch(Exception e) {e.printStackTrace();}

         task.setUserName(tasksBean.whoIsIt(userdomain, username));
         task.setPhone(tasksBean.whatIsPhoneNumber(userdomain, username));
         tasks.addASubcontrol(task);
      }
      wSchedule.addASubcontrol(tasks);
   }

   private void buildCalendarView(ScheduledTasksBean tasksBean, Calendar calendar, WeekSchedule wSchedule)
   {
      wSchedule.setTitle(calendar.get(Calendar.YEAR) + " " +
                         MONS[calendar.get(Calendar.MONTH)] +
                         " (Week " + calendar.get(Calendar.WEEK_OF_MONTH) + ")");
      int day = calendar.get(Calendar.DAY_OF_WEEK);
      backward(calendar, day-1);
      DaySchedule dSchedule = null;
      DayTask task = null;
      int tempDay = 0;
      Project[] projects = null;
      Timetable timetable = null;
      Schedule[] schedules = null;
      HashMap map = null;
      java.sql.Date currentDate = null;
      for(int i=0; i<7; i++)
      {
         tempDay = calendar.get(Calendar.DAY_OF_WEEK);

         dSchedule = new DaySchedule();
         dSchedule.setTitle((calendar.get(Calendar.MONTH)+1)+"/"+calendar.get(Calendar.DATE)+"<br>("+DAYS[i]+")");

         if(day==tempDay)
         {
            dSchedule.setBgcolor("#CCFF99");
            dSchedule.setTitleColor("#000066");
         }
         else if(1==tempDay)
         {
            dSchedule.setBgcolor("#FFEEEE");
            dSchedule.setTitleColor("#CC0000");
         }
         else if(7==tempDay)
         {
            dSchedule.setBgcolor("#FFEEEE");
            dSchedule.setTitleColor("#CC0000");
         }

         try
         {
            currentDate =new java.sql.Date(calendar.getTimeInMillis());
            projects = tasksBean.getAllAvailableProjects(currentDate, currentDate);
            for(int j=0; j<projects.length; j++)
            {
               timetable = tasksBean.getTimetableUnderProject(projects[j]);
               schedules = tasksBean.getSchedulesUnderProject(timetable);
               map = new HashMap();
               for(int k=0; k<schedules.length; k++)
               {
                  map.put(schedules[k].getName(), schedules[k]);
               }

               task = new DayTask();

               task.setProject(projects[j].getName());

               try
               {
                  task.setItem(timetable.getDataValue("item"));
               } catch(Exception e) {e.printStackTrace();}

               try
               {
                  task.setStrain(timetable.getDataValue("strain"));
               } catch(Exception e) {e.printStackTrace();}

               try
               {
                  task.setQuantity(timetable.getDataValue("quantity"));
               } catch(Exception e) {e.printStackTrace();}

               try
               {
                  if(currentDate.toString().equals(((Schedule)map.get("orderMice")).getDueDate().toString()))
                     task.setOrder("<b>V</b>");
                  else
                     task.setOrder("");
               } catch(Exception e) {e.printStackTrace();}

               try
               {
                  if(currentDate.toString().equals(((Schedule)map.get("hcgMate")).getDueDate().toString()))
                     task.setHcgMate("<b>V</b>");
                  else
                     task.setHcgMate("");
               } catch(Exception e) {e.printStackTrace();}

               try
               {
                  if(currentDate.toString().equals(((Schedule)map.get("plugCheck")).getDueDate().toString()))
                     task.setPlugDate("<b>V</b>");
                  else
                     task.setPlugDate("");
               } catch(Exception e) {e.printStackTrace();}

               try
               {
                  if(currentDate.toString().equals(((Schedule)map.get("pms")).getDueDate().toString()))
                     task.setPms("<b>V</b>");
                  else
                     task.setPms("");
               } catch(Exception e) {e.printStackTrace();}

               try
               {
                  if(currentDate.toString().equals(((Schedule)map.get("injection")).getDueDate().toString()))
                     task.setInjection("<b>V</b>");
                  else
                     task.setInjection("");
               } catch(Exception e) {e.printStackTrace();}

               dSchedule.addASubcontrol(task);
            }
         }
         catch(Exception e) { e.printStackTrace(); }

         foreward(calendar, 1);
         wSchedule.addASubcontrol(dSchedule);
      }
   }

   private void backward(Calendar calendar, int day)
   {
      for(int i=0; i<day; i++)
      {
         if(1!=calendar.get(Calendar.DAY_OF_MONTH))
            calendar.roll(Calendar.DAY_OF_MONTH, -1);
         else
         {
            calendar.roll(Calendar.MONTH, -1);
            calendar.set(Calendar.DAY_OF_MONTH, calendar.getActualMaximum(Calendar.DAY_OF_MONTH));
         }
      }
   }

   private void foreward(Calendar calendar, int day)
   {
      for(int i=0; i<day; i++)
      {
         if(calendar.getActualMaximum(Calendar.DAY_OF_MONTH)!=calendar.get(Calendar.DAY_OF_MONTH))
            calendar.roll(Calendar.DAY_OF_MONTH, 1);
         else
         {
            calendar.roll(Calendar.DAY_OF_MONTH, 1);
            calendar.roll(Calendar.MONTH, 1);
         }
      }
   }
}