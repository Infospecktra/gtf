/* Generated by Together */
package org.yang.customized.gtf.services.inventoryManager.web;

import org.yang.web.view.controls.WebControlBuilder;
import org.yang.web.view.controls.WebControl;
import org.yang.web.controller.GenericBean;
import org.yang.web.view.controls.jsStyle.UIForm;
import org.yang.web.view.controls.jsStyle.TextField;
import org.yang.web.view.controls.jsStyle.PassElement;
import org.yang.web.view.controls.jsStyle.SelectElement;
import org.yang.web.view.controls.jsStyle.TextAreaElement;
import org.yang.web.view.controls.jsStyle.ButtonElement;
import org.yang.web.view.controls.jsStyle.navigationTree.NavigationNode;
import java.util.Iterator;
import org.yang.services.accountmgr.Group;
import org.yang.services.accountmgr.User;
import org.yang.web.view.controls.jsStyle.navigationTree.NavigationTree;
import java.util.Collection;
import java.util.Hashtable;
import java.util.Enumeration;
import java.util.ArrayList;
import org.yang.services.servicemgr.ServiceDescriptor;
import org.yang.web.services.accountManage.AccountManagerBean;
import org.yang.customized.gtf.services.dataAccess.Record;
import org.yang.web.view.controls.jsStyle.panel.GenericPanel;
import org.yang.web.view.controls.jsStyle.panel.TabPanelElement;
import java.net.URLEncoder;

public class InventoryTreeBuilder implements WebControlBuilder
{
   private String inventoryOpen = null;
   private String inventoryClose = null;
   private String inventoryIcon1 = null;
   private String inventoryIcon2 = null;
   private String inventoryIcon3 = null;
   private String locatorOpen = null;
   private String locatorClose = null;
   private String locatorIcon = null;
   
   private String locationOpen = null;
   private String locationClose = null;
   private String boxNumberOpen = null;
   private String boxNumberClose = null;
   private String rowColumnIcon = null;

   public WebControl build(GenericBean bean) throws Exception
   {
      InventoryTreeBean inventoryTreeBean = (InventoryTreeBean)bean;
      String appBase = inventoryTreeBean.getAppBase();
      String codeBase = inventoryTreeBean.getGuiBase();
      GenericPanel panel = null;
      
      inventoryOpen = inventoryTreeBean.calculateURL(inventoryTreeBean.getCurrentServiceProperty("ServiceTree.Icon.inventory.open"));
      inventoryClose = inventoryTreeBean.calculateURL(inventoryTreeBean.getCurrentServiceProperty("ServiceTree.Icon.inventory.close"));
      inventoryIcon1 = inventoryTreeBean.calculateURL(inventoryTreeBean.getCurrentServiceProperty("ServiceTree.Icon.inventory1"));
      inventoryIcon2 = inventoryTreeBean. calculateURL(inventoryTreeBean.getCurrentServiceProperty("ServiceTree.Icon.inventory2"));
      inventoryIcon3 = inventoryTreeBean. calculateURL(inventoryTreeBean.getCurrentServiceProperty("ServiceTree.Icon.inventory3"));

      locatorOpen = inventoryTreeBean.calculateURL(inventoryTreeBean.getCurrentServiceProperty("ServiceTree.Icon.locator.open"));
      locatorClose = inventoryTreeBean.calculateURL(inventoryTreeBean.getCurrentServiceProperty("ServiceTree.Icon.locator.close"));
      locatorIcon = inventoryTreeBean.calculateURL(inventoryTreeBean.getCurrentServiceProperty("ServiceTree.Icon.locator"));
      locationOpen = inventoryTreeBean.calculateURL(inventoryTreeBean.getCurrentServiceProperty("ServiceTree.Icon.location.open"));
      locationClose = inventoryTreeBean.calculateURL(inventoryTreeBean.getCurrentServiceProperty("ServiceTree.Icon.location.close"));
      boxNumberOpen = inventoryTreeBean.calculateURL(inventoryTreeBean.getCurrentServiceProperty("ServiceTree.Icon.boxNumber.open"));
      boxNumberClose = inventoryTreeBean.calculateURL(inventoryTreeBean.getCurrentServiceProperty("ServiceTree.Icon.boxNumber.close"));
      rowColumnIcon = inventoryTreeBean.calculateURL(inventoryTreeBean.getCurrentServiceProperty("ServiceTree.Icon.rowColumn"));

      panel = createPanel(inventoryTreeBean, appBase, codeBase);
      inventoryTreeBean.setControl("inventoryTreePanel", panel);
      
      return panel;
   }

   private GenericPanel createPanel(InventoryTreeBean inventoryTreeBean, String appBase, String codeBase)
   {
      GenericPanel panel = new GenericPanel();
      panel.setId("inventoryTreePanel");
      panel.setText("Managing inventory list.");
      panel.setCodeBase(codeBase);
      panel.setColor("#C0C0C0");
    
      TabPanelElement serviceTab = new TabPanelElement();
      serviceTab.setId("inventory");
      serviceTab.setText("Inventory Service");
      serviceTab.setCodeBase(appBase + codeBase);

      NavigationTree tree = createTree(inventoryTreeBean, appBase + codeBase);
      tree.openNodes(inventoryTreeBean.getTargetID());
      serviceTab.setColor("#F0F0F0");
      serviceTab.setOnFocus(true);
      serviceTab.addASubcontrol(tree);
      panel.addASubcontrol(serviceTab);

      return panel;
   }

   private NavigationTree createTree(InventoryTreeBean inventoryTreeBean, String codeBase)
   {
      NavigationNode root = NavigationNode.createNewNode(NavigationNode.BASE_STYLE);

      root.setId("root");
      root.setCaption(inventoryTreeBean.getDomain());
      root.setDescription("Inventory Information");
      root.setActionLink("/wf/default/inventoryService/introduction.jsp");
      root.setTargetFrame("rightFrame2");
      root.setTitle("enter introduction page");
      root.setType(NavigationNode.BASE_STYLE);
      root.setIsExpanded(true);
      root.setIconOpen(inventoryTreeBean.calculateURL("/images/domain.gif"));
      root.setIconClose(inventoryTreeBean.calculateURL("/images/domain.gif"));
      root.setCodeBase(codeBase);
      root.setLevel(0);
      root.setIsExpanded(true);
      root.setIsTheLastNode(true);

      NavigationNode inventoryRoot = NavigationNode.createNewNode(NavigationNode.ROOT_STYLE);
      inventoryRoot.setId("root.inventory");
      inventoryRoot.setCaption("Service preparation");
      inventoryRoot.setNavigationActionLink("inventoryTree.wf");
      inventoryRoot.setType(NavigationNode.ROOT_STYLE);
      inventoryRoot.setIsExpanded(true);
      inventoryRoot.setIconOpen(inventoryOpen);
      inventoryRoot.setIconClose(inventoryClose);
      inventoryRoot.setCodeBase(codeBase);
      inventoryRoot.setLevel(1);
      /////inventoryRoot.setIsExpanded(false);
      inventoryRoot.setParent(root);
      root.addChildNode(inventoryRoot);

      NavigationNode locatorRoot = NavigationNode.createNewNode(NavigationNode.ROOT_STYLE);
      locatorRoot.setId("root.locator");
      locatorRoot.setCaption("Storage locator");
      locatorRoot.setNavigationActionLink("inventoryTree.wf");
      locatorRoot.setType(NavigationNode.ROOT_STYLE);
      /////locatorRoot.setIsExpanded(true);
      locatorRoot.setIconOpen(locatorOpen);
      locatorRoot.setIconClose(locatorClose);
      /////locatorRoot.setIsTheLastNode(true);
      locatorRoot.setCodeBase(codeBase);
      locatorRoot.setLevel(1);
      locatorRoot.setIsExpanded(true);
      // the last node of current level
      locatorRoot.setParent(root);
      root.addChildNode(locatorRoot);

      try
      {
         String inventoryRootID = inventoryRoot.getId();
         String locatorRootID = locatorRoot.getId();

         NavigationNode inventoryNode = null;
         String pid = null;
         NavigationNode locatorNode = null;
         NavigationNode locationNode = null;
         NavigationNode boxNumberNode = null;
         NavigationNode rowColumnNode = null;
         String sid = null;
         String[] serviceNames = {"Pronuclear injection","Probe Test","Karyotype"};
         String[] serviceType = {"PI","PT","KR"};
         int inventorySize = serviceType.length;
         
         for(int i=0; i<inventorySize; i++)
         {
            pid = i +"";
            String inventoryNodeID = inventoryRootID + "." + pid;
            inventoryNode = NavigationNode.createNewNode(NavigationNode.NODE_STYLE);
            inventoryNode.setId(inventoryNodeID);
            inventoryNode.setCaption(serviceNames[i]);

            inventoryNode.setActionLink("/wf/inventory.wf?actiontype=enterService&serviceType="+serviceType[i]);
            inventoryNode.setNavigationActionLink("inventoryTree.wf");
            inventoryNode.setTargetFrame("mainFrame1");
            inventoryNode.setType(NavigationNode.NODE_STYLE);
            if("Pronuclear injection".equals(serviceNames[i]))
            {
               inventoryNode.setIconOpen(inventoryIcon1);
               inventoryNode.setIconClose(inventoryIcon1);
            }
            else if ("Probe Test".equals(serviceNames[i]))
            {
               inventoryNode.setIconOpen(inventoryIcon2);
               inventoryNode.setIconClose(inventoryIcon2);
            }	
            else
            {
               inventoryNode.setIconOpen(inventoryIcon3);
               inventoryNode.setIconClose(inventoryIcon3);
            }	
            inventoryNode.setTitle("enter "+serviceNames[i]);

            // the last node of this level
            inventoryNode.setCodeBase(codeBase);
            if(i==inventorySize-1)
               inventoryNode.setIsTheLastNode(true);
            inventoryNode.setLevel(2);
            inventoryNode.setParent(inventoryRoot);
            inventoryRoot.addChildNode(inventoryNode);
         }

         String[] locatorNames = {"Search service"};
         String[] locatorType = {"SLocator"};
         int locatorSize = locatorNames.length;
         String boxNumber = "";
         String rowColumn = "";
         String encordedLoc = "";
         String encordedBoxNumber = "";
         String encordedStorageId = "";
         for(int i=0; i<locatorSize; i++)
         {
            locatorNode = NavigationNode.createNewNode(NavigationNode.NODE_STYLE);
            String locatorNodeID = locatorRootID + ".searchService";
            locatorNode.setId(locatorNodeID);
            locatorNode.setCaption(locatorNames[i]);

            locatorNode.setActionLink("/wf/inventory.wf?actiontype=enterService&serviceType="+locatorType[i]);
            locatorNode.setNavigationActionLink("inventoryTree.wf");
            locatorNode.setTargetFrame("mainFrame1");
            locatorNode.setType(NavigationNode.LEAF_STYLE);
            locatorNode.setIconOpen(locatorIcon);
            locatorNode.setIconClose(locatorIcon);
            locatorNode.setCodeBase(codeBase);
            locatorNode.setIsExpanded(true);
            //locatorNode.setIsParentTheLastNode(true);
            // the last node of this level
            if(i==locatorSize-1)
               locatorNode.setIsTheLastNode(true);
            locatorNode.setLevel(2);
            locatorNode.setParent(locatorNode);
            locatorRoot.addChildNode(locatorNode);
            //-------
            //System.out.println("[InventoryTreeBuilder::]............------>inventoryTreeBean.getServiceType()="+inventoryTreeBean.getServiceType());
            if("SLocator".equals(inventoryTreeBean.getServiceType()))
            {	
               String location = "";        
               Hashtable locationTable = inventoryTreeBean.loadStorageLocData();
            
               int j =-1;
               for (Enumeration locations = locationTable.keys() ; locations.hasMoreElements() ;) 
               {  
                  j++;
                  location = (String)locations.nextElement(); //1 .LOC
                  String locID = ""; 
                  String locationNodeID = "";
                  if(!"LN#D".equals(location))
                     locationNodeID = locatorNodeID + "." + location;
                  else
                      locationNodeID = locatorNodeID + ".LNBD";

                  //System.out.println("[InventoryTreeBuiler::loadStorageLocData]**--------->locationNodeID="+locationNodeID);
                  locationNode = NavigationNode.createNewNode(NavigationNode.NODE_STYLE);
                  locationNode.setId(locationNodeID);
                  locationNode.setCaption(location);
                  encordedLoc=URLEncoder.encode(location);

                  locationNode.setActionLink("/wf/inventory.wf?actiontype=reloadStorageMasterTable&completeLoad=yes&serviceType=SLocator&id="+encordedLoc);
                  locationNode.setNavigationActionLink("inventoryTree.wf");
                  locationNode.setTargetFrame("mainFrame1");
                  locationNode.setType(NavigationNode.NODE_STYLE);
                  locationNode.setIconOpen(locationOpen);
                  locationNode.setIconClose(locationClose);
                  locationNode.setCodeBase(codeBase);
                  locationNode.setLevel(3);
                  // the last node of this level
                  if(j==locationTable.size()-1)
                     locationNode.setIsTheLastNode(true);
                  locationNode.setParent(locatorNode);
                  locatorNode.addChildNode(locationNode);
                  //---------------
                  ArrayList boxNumbers = (ArrayList)locationTable.get(location); //
                  Iterator iteratorBoxNumbers = boxNumbers.iterator(); 
                  int k =-1;
            
                  while (iteratorBoxNumbers.hasNext()) 
                  {  
                     k++;
                     ArrayList rowColumns = (ArrayList)iteratorBoxNumbers.next(); //2.boxNumber
                     if(rowColumns != null)
                     {
                        Iterator iteratorRowColumns = rowColumns.iterator();
                        boxNumber = ((Integer)iteratorRowColumns.next()).intValue()+"";
                        // System.out.println("[InventoryTreeBuilder::loadStorageLocData]--------->"+k+" : boxNumber ="+boxNumber);
                        String boxNumberNodeID = locationNodeID + "." + boxNumber ;
                        //System.out.println("[InventoryTreeBuiler::loadStorageLocData]--------->boxNumberNodeID="+boxNumberNodeID);
                        //System.out.println("[InventoryTreeBuiler::loadStorageLocData]--------->1.boxNumbers.size()="+boxNumbers.size());

                        boxNumberNode = NavigationNode.createNewNode(NavigationNode.NODE_STYLE);//LEAF_STYLE);
                        boxNumberNode.setId(boxNumberNodeID);
                        boxNumberNode.setCaption("box-"+boxNumber);
                        encordedBoxNumber=URLEncoder.encode(boxNumber);
                        boxNumberNode.setActionLink("/wf/inventory.wf?actiontype=reloadStorageMasterTable&completeLoad=yes&serviceType=SLocator&id="+encordedBoxNumber);
                        boxNumberNode.setNavigationActionLink("inventoryTree.wf");
                        boxNumberNode.setTargetFrame("mainFrame1");
                        boxNumberNode.setType(NavigationNode.NODE_STYLE);//LEAF_STYLE);
                        boxNumberNode.setIconOpen(boxNumberOpen);
                        boxNumberNode.setIconClose(boxNumberClose);
                        boxNumberNode.setCodeBase(codeBase);
                        boxNumberNode.setLevel(4);
                         // the last node of this level
                        if(k== boxNumbers.size()-1)
                           boxNumberNode.setIsTheLastNode(true);
          
                        boxNumberNode.setParent(locationNode);
                        locationNode.addChildNode(boxNumberNode);
                        //----- 
                        int l=-1;  
                        while(iteratorRowColumns.hasNext())
                        {
                     	   l++;
          	               String[] rowColumnSet = (String[])iteratorRowColumns.next();
                           //System.out.println("[InventoryTreeBuilder::loadStorageLocData]--------->"+k+" : boxNumber ="+boxNumber);
                           rowColumn = rowColumnSet[0];
                           String storageId = rowColumnSet[1];
                           String rowColumnNodeID = boxNumberNodeID + "." + rowColumn ;
                           rowColumnNode = NavigationNode.createNewNode(NavigationNode.LEAF_STYLE);
                           rowColumnNode.setId(rowColumnNodeID);
                           rowColumnNode.setCaption(rowColumn);
                           encordedStorageId=URLEncoder.encode(storageId);
                           rowColumnNode.setActionLink("/wf/inventory.wf?actiontype=reloadStorageMasterTable&completeLoad=yes&serviceType=SLocator&id="+encordedStorageId);
                           rowColumnNode.setNavigationActionLink("inventoryTree.wf");
                           rowColumnNode.setTargetFrame("mainFrame1");
                           rowColumnNode.setType(NavigationNode.LEAF_STYLE);
                           rowColumnNode.setIconOpen(rowColumnIcon);
                           rowColumnNode.setIconClose(rowColumnIcon);
                           rowColumnNode.setCodeBase(codeBase);
                           rowColumnNode.setLevel(5);
                           // the last node of this level
                           if(k== rowColumns.size()-2) // deduct boxNumbe:Integer
                              rowColumnNode.setIsTheLastNode(true);
          
                           rowColumnNode.setParent(boxNumberNode);
                           boxNumberNode.addChildNode(rowColumnNode);
          	     
          	            }
                     }	  
                  }
               }
            }
         }
      }
      catch(Exception e)
      {
         e.printStackTrace();
      }

      NavigationTree tree = new NavigationTree();
      tree.setId("inventoryTree");
      tree.setRoot(root);

      return tree;
   }
}