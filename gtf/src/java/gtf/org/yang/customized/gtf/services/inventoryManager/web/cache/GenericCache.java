/* Generated by Together */

package org.yang.customized.gtf.services.inventoryManager.web.cache;

import java.util.Enumeration;
import java.util.Hashtable;
//import org.yang.services.dbService.DataAccessException;
import java.util.Collection;
import org.yang.customized.gtf.services.dataAccess.Storage;

public class GenericCache {

    public Object fetchElement(String searchKey) {//throws DataAccessException {
        if("".equals(searchKey)||searchKey==null)
           return null;
        //throw new DataAccessException("[GenericCache::fetchElement]---need to input searchKey.");
        Object obj = me.get(searchKey);
        ///cachePrintOut();
        
        return  obj;
    }

    public boolean addElement(String searchKey ,Object obj) {
        if(searchKey==null||"".equals(searchKey)||obj==null)
            return false;
        //System.out.println("[GenericCache::addElement]---add new element to cache (Mode="+searchKey+")");
        me.put(searchKey,obj);
        return true;
    }

    public Object removeElement(String searchKey) {
       if(searchKey==null||"".equals(searchKey))	
          return null;
       //System.out.println("[GenericCache::removeElement]---remove collection element in cache (searchKey="+searchKey+")");
       return me.remove(searchKey);
    }

    public int size() {
       return me.size();
    }

    public void clear() {
        me.clear();
    }

    public boolean containKey(String searchKey) {
        return me.containsKey(searchKey);
    }

    public GenericCache() {
        me = new Hashtable();
    }
   
    public void  cachePrintOut()
    {
       String searchKey = "";	
       CacheEntry entry = null; 
       Storage[] storages =  null;
       for (Enumeration keys = me.keys(); keys.hasMoreElements() ;) {
          searchKey = (String)keys.nextElement();
          entry = (CacheEntry)me.get(searchKey);  
          
          //System.out.println("=======================================================");	
          //System.out.println("[GenericCache::toString]--searchKey="+searchKey);
          storages = (Storage[])entry.getElement();
          for(int i=0;i<storages.length;i++)
          {
             //System.out.println("[GenericCache::toString]--storages["+i+"]="+storages[i].getId()+"||"+storages[i].getCell());
          }
          //System.out.println("=======================================================");	
       }	
    }	
    private Hashtable me;
}
