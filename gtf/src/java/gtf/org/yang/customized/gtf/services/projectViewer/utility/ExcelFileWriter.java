/* Generated by Together */
package org.yang.customized.gtf.services.projectViewer.utility;

import org.yang.services.dataAccess.Data;
import org.yang.customized.gtf.services.dataAccess.Project;
import java.io.IOException; 
import java.util.HashMap;
import java.io.*;
import jxl.*;
import java.util.*;
import jxl.Workbook;
import jxl.write.*;
import org.yang.util.SMUtility;
import org.yang.customized.gtf.services.dataAccess.Stage;
import org.yang.services.dataAccess.DataUnavailableException;
import org.yang.customized.gtf.services.projectViewer.ProjectViewerManager;
import org.yang.customized.gtf.services.projectViewer.web.ProjectViewerMasterBean;

public class ExcelFileWriter 
{
   //final public static String PATH = "C:\\GTFWorkingDir\\"; //local
   //final public static String PATH = "/users/genetargeting/gtf_storage_xls/";//remote
   //final public static String PATH = "/users/GTF/gtf_storage_xls/";//remote

   private Project[] projects = null;       
   private ProjectViewerMasterBean bean = null;
   private String  userHome;
   private String workingDirectory;
   public ExcelFileWriter(ProjectViewerMasterBean bean)
   {
      try
      {
         this.projects = bean.getDisplayProjects();
         this.bean = bean ;
         loadWorkingDir();
      }
      catch(Exception e){}	  
   }
   
   private void loadWorkingDir(){
       userHome=System.getProperty("user.home");
       System.out.println("[ExcelFileWriter::loadWorkingDir]--ProjectViewer---->System.getProperty-user.home="+userHome);
       StringBuffer stringBf_workingDirectory =new StringBuffer(userHome);
       if(userHome.indexOf(":")>-1)
       {    
           stringBf_workingDirectory.append('\\')
                                    .append("gtf_storage_xls").append('\\'); 
    	   workingDirectory =  stringBf_workingDirectory.toString();
    	 
       }else{
           stringBf_workingDirectory.append('/')
                                    .append("gtf_storage_xls").append('/'); 
    	   workingDirectory =  stringBf_workingDirectory.toString();
       }
       System.out.println("[ExcelFileWriter::loadWorkingDir]--ProjectViewer---->workingDirectory="+workingDirectory);
   }
           
   //private String filename = PATH +"ProjectResultsOutput.xls";  
   private String filename = workingDirectory +"ProjectResultsOutput.xls";  
   
   
   public void write(String filename)
   {
       try
       {
	   if(filename!=null)
	         this.filename = filename;
	   WorkbookSettings ws = new WorkbookSettings();
	   ws.setLocale(new Locale("en", "EN"));
	   WritableWorkbook workbook = 
	   Workbook.createWorkbook(new File(filename), ws);
          //Workbook.createWorkbook(out, ws);

	   WritableSheet s = workbook.createSheet("Sheet1", 0);
	   s.getSettings().setDefaultColumnWidth(18);  
	   writeDataSheet(s);
	   workbook.write();
	   workbook.close();      
      }
      catch (IOException e)
      {
          e.printStackTrace();
      }
      catch (WriteException e)
      {
          e.printStackTrace();
      }
   }
   
   private String viewMode = "projectResults";
   public String getViewMode(){return viewMode;}
   public void setViewMode(String viewMode){this.viewMode=viewMode;}
   
   private HashMap currentAvailableStages = null;
   public  HashMap getCurrentAvailableStages(){return currentAvailableStages;}
   public void setCurrentAvailableStages(HashMap map){currentAvailableStages=map;}
   
   private Stage[] allStageTemplates;
   public void setAllStageTemplates(Stage[] stages){this.allStageTemplates = stages;}
   public Stage[] getAllStageTemplates(){return allStageTemplates;} 
   
   private void writeDataSheet(WritableSheet s) 
      throws WriteException
   {
      String[] groupNames = {ProjectViewerManager.DATAGROUP_NAME_1,ProjectViewerManager.DATAGROUP_NAME_2,ProjectViewerManager.DATAGROUP_NAME_3}; //1.tVectorInfo 2.SCInfo 3.ESCInfo (datagroups for project/not for stage)
      String[] onTableNames = {ProjectViewerManager.DATA_ON_TABLE_NAME_1,ProjectViewerManager.DATA_ON_TABLE_NAME_2,ProjectViewerManager.DATA_ON_TABLE_NAME_3};
      String[] titles_3cols = {"Project#","Project name ","Investigator/Lab"};//,"Targeting Nuclease","ESC","# Pos. Clone2","Colony #2","Germline2","Charge Point2","InjDate,Clone#2,Chimera Grade2"};
      String id = "";
      String projectNumber = "";
      String investigator = "";
      String labName = "";
      String projectName = "";
      String dataName = "";
      String dataValue = "";
      String briefName = "";
      
      try
      {
          /* Format the Font */
          WritableFont wf = new WritableFont(WritableFont.ARIAL, 
            10, WritableFont.BOLD);
          WritableCellFormat cf = new WritableCellFormat(wf);
          cf.setWrap(true);

          /* Creates Label and writes date to one cell of sheet*/
          int r = 0;
          int cl = 0;
          int r2 = 3; 
          int cl2 =4; 
          Label l = new Label(0,r++,"Title:Project Results Table",cf); 
          s.addCell(l);// r=1
          r++;         //r=2
          
          for(int j=0;j<titles_3cols.length;j++)//j:col
          {
              l = new Label(j,r,titles_3cols[j],cf); //r=2
              s.addCell(l);
          }
          r++; //r=3
          
          //(c,r)
          int titleColIndex = 0;     
          for (int i=0;i<projects.length;i++)
          {    
              StringBuffer personalInfo = new StringBuffer();
              Data[] myData = null;
              
              projectNumber = projects[i].getAccountId();
              if(projectNumber==null||"null".equals(projectNumber))
              	projectNumber="";
              investigator = projects[i].getInvestigator();
              labName = projects[i].getDomain();
              personalInfo.append(investigator).append(" /").append(labName);
              projectName = projects[i].getName(); 
              //System.out.println("[ExcelFileWriter::writeDataSheet]--->projectName="+projectName);
              cl = 0;
              l = new Label(cl++,r,projectNumber,cf); //r=3,cl=0
              s.addCell(l);
              l = new Label(cl++,r,projectName,cf);   //r=3,cl=1
              s.addCell(l);
              l = new Label(cl++,r,personalInfo.toString(),cf); //r=3,cl=2
              s.addCell(l);                                     //r=3,cl=3
              int u=0;
              for(int x=0;x<groupNames.length;x++)
              {  
                 myData = projects[i].getDatas(groupNames[x]);          
                 //System.out.println("-------------------------------------->groupNames["+x+"]="+groupNames[x]);
                ////System.out.println("-------------------------------------->viewMode="+viewMode);
                 //System.out.println("-------------------------------------->myData.length="+myData.length);
                  
                 if(myData==null)
                    myData = new Data[0];
                 for(int k=0;k<myData.length;k++)
                 {   
              	   //System.out.println("-------------------------------------->myData[k].getOnTableName()="+myData[k].getOnTableName());
                    if(myData[k].getOnTableName()!=null&&
                	  (myData[k].getOnTableName()).indexOf(viewMode)>-1)
                    {
                   //System.out.println("*------------------(col(u+3:"+(u+3)+",rw:2)-------------------->myData["+k+"].getBriefDisplayName()="+myData[k].getBriefDisplayName());
                   //System.out.println("*------------------(col(cl:"+cl+",r:"+r+")-------------------->myData["+k+"].getValue()="+myData[k].getValue());
                       dataName = myData[k].getName(); ///
                       dataValue = myData[k].getValue();
                       briefName = myData[k].getBriefDisplayName();///
                       
                       String fm_value = NAFormat(dataValue);
                       if("".equals(fm_value))
                           fm_value="n/a";
                       l = new Label(3+u,2,briefName,cf); //r=2,cl=3
                       s.addCell(l);    
                       l = new Label(cl++,r,fm_value,cf);//r=3,cl=3
                       s.addCell(l);                     //r=3,cl=4
                       titleColIndex= 3+u; 
                       u++;  
                    }//if
                 }//for(int k=0;myData.length<k
              }//for(int x=0;x<groupNames.length
              r++;
              // loop all stages
              //System.out.println("start stage -------------------------------------->titleCoIndex= " + titleColIndex);
              Data[] datas = null;
              Stage aStage = null;
              String stgName = "";
              StringBuffer sb = null;
              String value = null;
              Stage[] templates = bean.getAllStageTemplates("GT");
              HashMap stages = bean.getCurrentAvailableStages(projects[i].getId());
              HashMap dataTemplateMap = new HashMap();
              if(templates==null)
                 templates= new Stage[0];	  
              //System.out.println("--------------------------------------> templates.length="+templates.length);
              cl2 = titleColIndex+1;//5;
              int x = titleColIndex+1;//5;
              for(int j=0; j<templates.length; j++)
              {
                 // stage template
                 stgName = templates[j].getName();
                 // Stage information
                 aStage = (Stage)stages.get(stgName);
                 // Display stage datas
                 sb = new StringBuffer();
                 sb.append("GT").append(".").append(stgName);
                 String key = sb.toString();
                 if(null==(datas=(Data[])dataTemplateMap.get(key)))
                 {
                    datas = templates[j].getDatas();
                    dataTemplateMap.put(key, datas);
                 }
                 //System.out.println("huei>>>-------------------------------------->datas.length="+datas.length);
                  
                 for(int k=0; k<datas.length; k++)
                 {
                	 if((datas[k].getOnTableName()!=null)&&
              		   (datas[k].getOnTableName()).indexOf(ProjectViewerManager.DATA_ON_TABLE_NAME_3)>-1)
                         {
                   	 //System.out.println("huei>>>-------------------------------------->datas[k].getOnTableName()="+datas[k].getOnTableName());

                         if(null!=aStage)
                         {
                          try
                          {
                             briefName = datas[k].getBriefDisplayName();///
                             l = new Label(x++,2,briefName,cf); ///5,2
                             s.addCell(l);
                             //System.out.println("------------------(cl2="+cl2+",r2="+2+")------>briefName="+briefName);//row=3
                      	     //System.out.println("-------------------------------------->datas[k].getName()="+datas[k].getName());
                             value = aStage.getData(datas[k].getName()).getSummary(true);
                            //---
                            if("click for detail".equals(value))
                            {
                           	value = "";
                              	datas[k].setId(aStage.getId() + "-" + datas[k].getName());
                             	//System.out.println("{click for detail}--->aStage.getId() -  datas[k].getName()="+aStage.getId() + "-" + datas[k].getName());
                              	String[] values = aStage.getData(datas[k].getName()).getAllValues(); //get all users values
                               	//System.out.println("{click for detail}--->values.length="+values.length);
                               	
                                String val = "";
                                for(int h=0;h<values.length;h++)
                                {
                               	   //System.out.println("{click for detail}--->values["+h+"]="+values[h]);
                                   if(null!=values[h]&&!"".equals(values[h])){
                              	       val = getSubDataContent(datas[k].getSubdatas() ,values[h]);
                                       if(!"".equals(value))
                                          value = value + " & " + val;   
                                       else
                                          value = val;
                              	   }
                                }                              	
                                
                       	     }   
                       	     String fm_value = NAFormat(value);
                             //System.out.println("*----------(cl2="+cl2+",r2="+r2+")--->fm_value="+fm_value);
                       	     l = new Label(cl2++,r2,fm_value,cf);
                             s.addCell(l);
                          }
                          catch(DataUnavailableException e)
                          {
                              l = new Label(cl2++,r2,"n/a",cf);
                              s.addCell(l);
                              //cl2++;
                          }
                       }
                       else
                       {
                           //System.out.println("*----------(cl2="+cl2+",r2="+r2+")--->fm_value=n/a");
                           l = new Label(cl2++,r2,"n/a",cf);
                           s.addCell(l);
                           	
                       }//end of if(null!=aStage)
                       //cl2++;
                    }//The end of if((datas[k].getOnTableName()).indexOf(ProjectViewerManager.DATA_ON_TABLE_NAME_3)>-1)
                	                  
                 }//The end of for(int k=0; k<datas.length; k++)
              }//The end 0f for(int j=0; j<templates.length; j++)
              r2++;   
              //System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~after r2++~~~~~~~~~~~(r2="+r2+")");
          }//for(int i=0;i<projects)
      }
      catch(Exception e)
      {
         e.printStackTrace();	  
      }
   }
   
   private String getSubDataContent(String[] columns,String value)
   {
      String valueSet = "";
      String[] rows = SMUtility.splitByToken(value, "!", false);
      String[] cols = null;
      int colLength = 0;
      int rowLength = rows.length;
      for(int i=0; i<rowLength; i++)
      {
         try
         {
               valueSet=valueSet+ " [ "+rows[i]+" ]";
         }
         catch(Exception e)
         {
            e.printStackTrace();
         }
         valueSet= valueSet + " ";
      }
      //System.out.println("[ProjectResultsMAsterBuilder:: getSubDataValue]---valueSet="+valueSet);
      return valueSet;
   } 
     
   public String NAFormat(String str)
   {

      if(str==null)
         return "n/a";
      str=str.trim();
      if("".equals(str))
         return "n/a";
      return str;
   }}