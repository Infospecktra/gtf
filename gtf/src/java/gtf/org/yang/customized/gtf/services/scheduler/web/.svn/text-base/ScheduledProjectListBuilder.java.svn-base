/* Generated by Together */
package org.yang.customized.gtf.services.scheduler.web;

import org.yang.web.view.controls.WebControlBuilder;
import org.yang.web.view.controls.WebControl;
import org.yang.web.controller.GenericBean;
import org.yang.web.view.controls.jsStyle.UIForm;
import org.yang.web.view.controls.jsStyle.TextField;
import org.yang.web.view.controls.jsStyle.PassElement;
import org.yang.web.view.controls.jsStyle.SelectElement;
import org.yang.web.view.controls.jsStyle.TextAreaElement;
import org.yang.web.view.controls.jsStyle.ButtonElement;
import org.yang.web.view.controls.jsStyle.navigationTree.NavigationNode;
import java.util.Iterator;
import org.yang.services.accountmgr.Group;
import org.yang.services.accountmgr.User;
import org.yang.web.view.controls.jsStyle.navigationTree.NavigationTree;
import java.util.Collection;
import java.util.Map;
import org.yang.services.servicemgr.ServiceDescriptor;
import org.yang.web.services.accountManage.AccountManagerBean;
import org.yang.customized.gtf.services.dataAccess.Project;
import org.yang.web.view.controls.jsStyle.panel.GenericPanel;
import org.yang.web.view.controls.jsStyle.panel.TabPanelElement;
import org.yang.customized.gtf.services.projectManager.web.ActiveProjectsTreeBean;
import org.yang.customized.gtf.services.dataAccess.Timetable;
import org.yang.customized.gtf.services.dataAccess.Schedule;

public class ScheduledProjectListBuilder implements WebControlBuilder
{
   private String projectsOpen = null;
   private String projectsClose = null;
   private String projectIcon = null;
   private String scheduleIcon = null;

   String[] allTabs  = null;
   String currentTab = null;

   public WebControl build(GenericBean bean) throws Exception
   {
      ScheduledProjectListBean projectsBean = (ScheduledProjectListBean)bean;
      String appBase = projectsBean.getAppBase();
      String codeBase = projectsBean.getGuiBase();
      allTabs  = projectsBean.getAllAvailableProjectTypes();
      currentTab = projectsBean.getTargetType();
      GenericPanel panel = null;
      if(null==(panel=(GenericPanel)projectsBean.getControl("projectsTreePanel")))
      {
         projectsOpen = projectsBean.calculateURL(projectsBean.getCurrentServiceProperty("ServiceTree.Icon.projects.open"));
         projectsClose = projectsBean.calculateURL(projectsBean.getCurrentServiceProperty("ServiceTree.Icon.projects.close"));
         projectIcon = projectsBean.calculateURL(projectsBean.getCurrentServiceProperty("ServiceTree.Icon.project"));

         scheduleIcon = projectsBean.calculateURL(projectsBean.getCurrentServiceProperty("ServiceTree.Icon.stage"));

         panel = createPanel(projectsBean, appBase, codeBase);
         projectsBean.setControl("projectsTreePanel", panel);
      }

      return panel;
   }

   private GenericPanel createPanel(ScheduledProjectListBean projectsBean, String appBase, String codeBase)
   {

      GenericPanel panel = new GenericPanel();
      panel.setId("projectsTreePanel");
      panel.setText("Managing project schedule.");
      panel.setCodeBase(codeBase);
      panel.setColor("#C0C0C0");
      panel.setActionLink(appBase + "/scheduledProjectList.wf");

      TabPanelElement typeTab = null;
      for(int i=0; i<allTabs.length; i++)
      {
         typeTab = new TabPanelElement();
         typeTab.setId(allTabs[i]);
         typeTab.setText(allTabs[i]);
         typeTab.setCodeBase(appBase + codeBase);

         if(allTabs[i].equals(currentTab))
         {
            // project list
            NavigationTree tree = createTree(projectsBean, appBase + codeBase);
            tree.openNodes(projectsBean.getTargetID());
            typeTab.setColor("#F0F0F0");
            typeTab.setOnFocus(true);
            typeTab.addASubcontrol(tree);
         }
         else
         {
            typeTab.setTabSwitchingLink("/wf/scheduledProjectList.wf?actiontype=changeType&targetType=" + allTabs[i]);
            typeTab.setOnFocus(false);
         }

         panel.addASubcontrol(typeTab);
      }

      return panel;
   }

   private NavigationTree createTree(ScheduledProjectListBean projectsBean, String codeBase)
   {
      NavigationNode root = NavigationNode.createNewNode(NavigationNode.BASE_STYLE);

      root.setId("root");
      root.setCaption(projectsBean.getDomain());
      root.setDescription("Account Information");
      //root.setActionLink("/wf/scheduledProjectList.wf?actiontype=accessDatasheet&targetPage=datasheet&projectType=" + currentTab);
      root.setType(NavigationNode.BASE_STYLE);
      root.setIsExpanded(true);
      root.setIconOpen(projectsBean.calculateURL("/images/domain.gif"));
      root.setIconClose(projectsBean.calculateURL("/images/domain.gif"));
      root.setCodeBase(codeBase);
      root.setLevel(0);
      root.setIsExpanded(true);
      root.setIsTheLastNode(true);

      NavigationNode projectsRoot = NavigationNode.createNewNode(NavigationNode.ROOT_STYLE);
      projectsRoot.setId("root.projects");
      projectsRoot.setCaption("Projects");
      projectsRoot.setNavigationActionLink("scheduledProjectList.wf");
      projectsRoot.setType(NavigationNode.ROOT_STYLE);
      projectsRoot.setIsExpanded(true);
      projectsRoot.setIconOpen(projectsOpen);
      projectsRoot.setIconClose(projectsClose);
      projectsRoot.setCodeBase(codeBase);
      projectsRoot.setIsTheLastNode(true);
      projectsRoot.setLevel(1);
      //projectsRoot.setIsExpanded(false);
      projectsRoot.setParent(root);

      root.addChildNode(projectsRoot);

      try
      {
         String projectsRootID = projectsRoot.getId();

         Project[] projects = projectsBean.getAllAvailableProjects();
         Timetable timetable = null;
         int projectsSize = projects.length;
         NavigationNode projectNode = null;
         String pid = null;
         NavigationNode stageNode = null;
         String sid = null;
         java.sql.Date date = null;

         for(int i=0; i<projectsSize; i++)
         {
            pid = projects[i].getId();
            timetable = projectsBean.getTimetableUnderProject(projects[i]);
            String projectNodeID = projectsRootID + "." + pid;
            projectNode = NavigationNode.createNewNode(NavigationNode.NODE_STYLE);
            projectNode.setId(projectNodeID);
            if(null!=(date=timetable.getDueDate()))
               projectNode.setCaption(projects[i].getName()+"[" + date + "]");
            else
               projectNode.setCaption(projects[i].getName());

            projectNode.setActionLink("/wf/timetable.wf?actiontype=load&view=timetable&id=" + pid + "&projectType=" + currentTab + "&targetPage=application");
            projectNode.setNavigationActionLink("scheduledProjectList.wf");
            projectNode.setType(NavigationNode.NODE_STYLE);
            projectNode.setIconOpen(projectIcon);
            projectNode.setIconClose(projectIcon);
            // the last node of this level
            projectNode.setCodeBase(codeBase);
            if(i==projectsSize-1)
               projectNode.setIsTheLastNode(true);
            projectNode.setLevel(2);
            projectNode.setParent(projectsRoot);

            projectsRoot.addChildNode(projectNode);

            Schedule[] schedules = projectsBean.getSchedulesUnderTimetable(timetable.getId());
            for(int j=0; j<schedules.length; j++)
            {
               sid = schedules[j].getId();
               String stageNodeID = projectNodeID + "." + sid;
               stageNode = NavigationNode.createNewNode(NavigationNode.LEAF_STYLE);
               stageNode.setId(stageNodeID);
               if(null!=(date=schedules[j].getDueDate()))
                  stageNode.setCaption(schedules[j].getName()+"[" + date + "]");
               else
                  stageNode.setCaption(schedules[j].getName());
               stageNode.setActionLink("/wf/timetable.wf?actiontype=load&view=schedule&id=" + pid + "&name=" + schedules[j].getName() + "&projectType=" + currentTab);
               stageNode.setType(NavigationNode.LEAF_STYLE);
               stageNode.setIconOpen(scheduleIcon);
               stageNode.setIconClose(scheduleIcon);
               stageNode.setCodeBase(codeBase);
               stageNode.setLevel(3);
               // the last node of this level
               if(j==schedules.length-1)
                  stageNode.setIsTheLastNode(true);
               stageNode.setParent(projectNode);

               projectNode.addChildNode(stageNode);
            }
         }
      }
      catch(Exception e)
      {
         e.printStackTrace();
      }

      NavigationTree tree = new NavigationTree();
      tree.setId("projectsTree");
      tree.setRoot(root);
      return tree;
   }
}